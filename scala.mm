<map version="1.0.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1409052649174" ID="ID_1987233628" MODIFIED="1415431153238" TEXT="scala">
<node CREATED="1409053185709" FOLDED="true" ID="ID_1680169307" MODIFIED="1417111192589" POSITION="right" TEXT="wiki">
<node CREATED="1409052820382" ID="ID_1291848072" MODIFIED="1409053189340" TEXT="object-functional"/>
<node CREATED="1409052841210" ID="ID_1634213442" MODIFIED="1409053189337" TEXT="functional programming">
<node CREATED="1409052850454" ID="ID_1681858451" MODIFIED="1409052851692" TEXT="currying"/>
<node CREATED="1409052861298" ID="ID_992468080" MODIFIED="1409052862128" TEXT="pattern matching"/>
<node CREATED="1409052871135" ID="ID_1235728984" MODIFIED="1409052872132" TEXT="algebraic data types"/>
<node CREATED="1409052880828" ID="ID_663210313" MODIFIED="1409052881633" TEXT="lazy evaluation"/>
<node CREATED="1409052890511" ID="ID_119418059" MODIFIED="1409052891472" TEXT="tail recursion"/>
<node CREATED="1409052899889" ID="ID_1213046161" MODIFIED="1409052900747" TEXT="immutability"/>
</node>
<node CREATED="1409052918170" ID="ID_722604455" MODIFIED="1409053189326" TEXT="concise and thus smaller in size than most general purpose programming languages"/>
</node>
<node CREATED="1409053191935" FOLDED="true" ID="ID_1052314810" MODIFIED="1417111188912" POSITION="right" TEXT="overview">
<node CREATED="1409053513274" ID="ID_1297980924" MODIFIED="1409053514851" TEXT="scala">
<node CREATED="1409053527597" ID="ID_756941429" MODIFIED="1409053528302" TEXT="Scala fuses object-oriented and functional programming in a statically typed programming language. It is aimed at the construction of components and component systems."/>
</node>
<node CREATED="1409053539094" ID="ID_1367000611" MODIFIED="1409060172039" TEXT="component systems">
<node CREATED="1409053558350" ID="ID_696442082" MODIFIED="1409053559341" TEXT="True component systems have been an elusive goal of the software industry. Ideally, software should be assembled from libraries of pre-written components, just as hardware is assembled from pre-fabricated chips. In reality, large parts of software applications are written &#x10;from scratch&#x11;, so that software production is still more a craft than an industry."/>
</node>
<node CREATED="1409060161033" ID="ID_491610061" MODIFIED="1417065663642" TEXT="components">
<node CREATED="1409060174355" ID="ID_396704424" MODIFIED="1409060203810" TEXT=" simply software parts used by larger parts or whole apps"/>
<node CREATED="1409060368278" ID="ID_1347456879" MODIFIED="1409060370266" TEXT="forms">
<node CREATED="1409060364070" ID="ID_1293718634" MODIFIED="1409060364070" TEXT="classes"/>
<node CREATED="1409060364071" ID="ID_1796442794" MODIFIED="1409060364071" TEXT="libraries"/>
<node CREATED="1409060364072" ID="ID_43914968" MODIFIED="1409060364072" TEXT="frameworks"/>
<node CREATED="1409060364074" ID="ID_1706064762" MODIFIED="1409060364074" TEXT="processes"/>
<node CREATED="1409060364075" ID="ID_442372851" MODIFIED="1409060364075" TEXT="web services"/>
</node>
<node CREATED="1409060414731" ID="ID_838556451" MODIFIED="1409060442518" TEXT="one component linked with another by a variety of mechanisms">
<node CREATED="1409060533734" ID="ID_1534825370" MODIFIED="1409060533734" TEXT="aggregation"/>
<node CREATED="1409060533736" MODIFIED="1409060533736" TEXT="parameterization"/>
<node CREATED="1409060533737" MODIFIED="1409060533737" TEXT="inheritance"/>
<node CREATED="1409060533739" ID="ID_1370472499" MODIFIED="1409060533739" TEXT="remote invocation"/>
<node CREATED="1409060533740" ID="ID_123507100" MODIFIED="1409060540393" TEXT="message passing"/>
</node>
</node>
<node CREATED="1409060637920" ID="ID_163667118" MODIFIED="1409060648532" TEXT="shortcomings in the programming languages used to define and integrate components.">
<node CREATED="1409060668590" ID="ID_1041937294" MODIFIED="1409060669454" TEXT=" limited support for component abstraction and composition."/>
</node>
<node CREATED="1409060746057" ID="ID_1093494818" MODIFIED="1417065662025" TEXT="scala history">
<node CREATED="1409060703969" ID="ID_1978916342" MODIFIED="1409060704916" TEXT="Scala has been developed from 2001 in the programming methods laboratory at EPFL."/>
<node CREATED="1409060719385" ID="ID_1899359213" MODIFIED="1409060720341" TEXT="It has been released publicly on the JVM platform in January 2004 "/>
<node CREATED="1409060730328" ID="ID_855333997" MODIFIED="1409060731080" TEXT="on the .NET platform in June 2004. "/>
<node CREATED="1409060741245" ID="ID_1785257036" MODIFIED="1409060742140" TEXT="A second, revised version, described in this paper was released in March 2006."/>
</node>
<node CREATED="1409060794792" ID="ID_1580910066" MODIFIED="1417065650780" TEXT="lang better support for component software. two hypotheses">
<node CREATED="1409060981330" ID="ID_1672622387" MODIFIED="1409060984530" TEXT="scalable">
<node CREATED="1409061006684" ID="ID_1590828355" MODIFIED="1409061007585" TEXT=" the same concepts can describe small as well as large parts."/>
<node CREATED="1409061036288" ID="ID_72562215" MODIFIED="1417065907757" TEXT="we concentrate on mechanisms for abstraction, composition, and decomposition rather than adding a large set of primitives which might be useful for components at some level of scale, but not at other levels. "/>
</node>
<node CREATED="1409061054408" ID="ID_1548259256" MODIFIED="1409061146692" TEXT="object-oriented meets functional">
<node CREATED="1409061051818" ID="ID_424495190" MODIFIED="1409061104346" TEXT="scalable support for components can be provided by a programming language which unifies and generalizes object-oriented and functional programming. "/>
</node>
</node>
<node CREATED="1409061655223" ID="ID_9658473" MODIFIED="1409061669347" TEXT="type system breaks new ground in at least three areas">
<node CREATED="1409061687470" ID="ID_24602340" MODIFIED="1409061712765" TEXT="First, abstract type defninitions and path-dependent types apply the &#x3bd;Obj calculus to a concrete language design"/>
<node CREATED="1409061740584" ID="ID_1118463570" MODIFIED="1409061745284" TEXT="Second, modular mixin composition combines the advantages of mixins and traits."/>
<node CREATED="1409061814701" ID="ID_9400660" MODIFIED="1409064177470" TEXT="Third, views enable component adaptation in a modular way."/>
</node>
</node>
<node CREATED="1417111200990" ID="ID_1260551387" MODIFIED="1417189799026" POSITION="right" TEXT="oop">
<node CREATED="1417111204209" FOLDED="true" ID="ID_1230309366" MODIFIED="1417185239735" TEXT="components(class,object,trait)">
<node CREATED="1417111210147" ID="ID_1330277882" MODIFIED="1417111254138" TEXT="class">
<node CREATED="1417117000264" ID="ID_1568842043" MODIFIED="1417179019660" TEXT="modifiers: { abstract, override, final,  implicit }">
<node CREATED="1417181282994" ID="ID_1105994413" MODIFIED="1417181286207" TEXT="abstract">
<node CREATED="1417179165020" ID="ID_1793889530" MODIFIED="1417181288008" TEXT="abstract class member">
<node CREATED="1417179178391" ID="ID_171995190" MODIFIED="1417179290803" TEXT="class method that lack definition, no additional &apos;abstract&apos; modifier is needed from them"/>
</node>
<node CREATED="1417179112769" ID="ID_290613893" MODIFIED="1417181288001" TEXT="abstract class">
<node CREATED="1417179123468" FOLDED="true" ID="ID_135854163" MODIFIED="1417181279184" TEXT="class has abstract member(unimplemented member) must be modified by abstract">
<node CREATED="1417181267285" MODIFIED="1417181267285">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//class has unimplemented member(abstract member)<br /></span><span style="color: #808080">//must be modified by 'abstract'<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">abstract class </span></font></b>Nat {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">isZero</span></font>: <font color="#cc7832"><span style="color: #cc7832">Boolean </span></font><font color="#808080"><span style="color: #808080">//abstract member(unimplement)<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">pred</span></font>:Nat <font color="#808080"><span style="color: #808080">//abstract member(unimplement)<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">succ</span></font>:Nat=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Succ(<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>)<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">+ </span></font>(x:Nat):Nat = {<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(x.isZero)<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this else </span></font></b>succ + x.pred<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">- </span></font>(x:Nat):Nat = {<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(x.isZero)<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this else </span></font></b>pred - x.pred<br />  }<br />}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>Zero <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>Nat{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">isZero</span></font>:<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">true<br /></span><span style="color: #cc7832; font-weight: bold">  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">pred</span></font>:Nat=Zero<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String </span></font>= <font color="#6a8759"><span style="color: #6a8759">&quot;zero&quot;<br /></span></font>}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Succ(n:Nat) <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>Nat{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">isZero</span></font>:<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">false<br /></span><span style="color: #cc7832; font-weight: bold">  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">pred</span></font>:Nat=n<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<font color="#6a8759"><span style="color: #6a8759">&quot;Succ(&quot;</span></font>+n+<font color="#6a8759"><span style="color: #6a8759">&quot;)&quot;<br /></span></font>}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417181289012" ID="ID_586672372" MODIFIED="1417181291965" TEXT="override">
<node CREATED="1417181752372" ID="ID_521402152" MODIFIED="1417181861218" TEXT="&apos;override&apos; is required  for methods that override a concrete method is some inherited class"/>
<node CREATED="1417181861723" ID="ID_920395861" MODIFIED="1417181909780" TEXT="&apos;override&apos; is opitional for methods that implement some abstract method in their superclass"/>
<node CREATED="1417181911905" ID="ID_36236572" MODIFIED="1417181973231" TEXT="gives useful redundancy to protect against two common class of errors">
<node CREATED="1417181974462" ID="ID_248755899" MODIFIED="1417182040359" TEXT="accident overrides,unintentionally override"/>
<node CREATED="1417182050380" ID="ID_1248279977" MODIFIED="1417182144733" TEXT="broken overriding links. silently converting the override to an overloading"/>
</node>
</node>
</node>
<node CREATED="1417178308934" ID="ID_851749983" MODIFIED="1417178429701" TEXT="{ primary, auxiliary/secondary } constructor">
<node CREATED="1417181335177" FOLDED="true" ID="ID_1503666611" MODIFIED="1417181522603" TEXT="demo">
<node CREATED="1417181502602" MODIFIED="1417181502602">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//primary constructor<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Employee() {<br />  <i><font color="#808080"><span style="color: #808080; font-style: italic">/*<br /></span><span style="color: #808080; font-style: italic">  A variable definition var x: T = _ can appear only as a member of a template. It<br /></span><span style="color: #808080; font-style: italic">  introduces a mutable field with type T and a default initial value. The default value<br /></span><span style="color: #808080; font-style: italic">  depends on the type T as follows:<br /></span><span style="color: #808080; font-style: italic">  0 if T is Int or one of its subrange types,<br /></span><span style="color: #808080; font-style: italic">  0L if T is Long,<br /></span><span style="color: #808080; font-style: italic">  0.0f if T is Float,<br /></span><span style="color: #808080; font-style: italic">  0.0d if T is Double,<br /></span><span style="color: #808080; font-style: italic">  false if T is Boolean,<br /></span><span style="color: #808080; font-style: italic">  () if T is Unit,<br /></span><span style="color: #808080; font-style: italic">  null for all other types T .<br /></span><span style="color: #808080; font-style: italic">  */<br /></span><span style="color: #808080; font-style: italic">  </span></font></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">private var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">n</span></font></i>:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=_<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">private var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">g</span></font></i>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=_<br />  <font color="#808080"><span style="color: #808080">//auxiliary/secondary constructor<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def this</span></font></b>(name:<font color="#4e807d"><span style="color: #4e807d">String</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>gender:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>) ={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>() <font color="#808080"><span style="color: #808080">// primary constructor must be called by auxiliary ones<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">n</span></font></i>=name<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">g</span></font></i>=gender<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(gender==Employee.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">FEMALE</span></font></i>)Employee.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">female</span></font></i>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else </span></font></b>Employee.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">male</span></font></i>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font>}<br />}</pre>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1417181383048" ID="ID_820546643" MODIFIED="1417181701106" TEXT="the whole body of the class is executed when the primary constructor is called at the time the is instantiated"/>
</node>
<node CREATED="1417178380792" FOLDED="true" ID="ID_1548648507" MODIFIED="1417178797892" TEXT="{ parameterless , empty parameter list } constructor">
<node CREATED="1417178796197" MODIFIED="1417178796197">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//empty parameter list constructor<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Foo(){}<br /><font color="#808080"><span style="color: #808080">//parameterless constructor<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Bar{}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>TestParamaterlessAndEmptyParameterListConstructor {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>f2=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>f1=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo()<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>b1=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>b2=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar() <font color="#808080"><span style="color: #808080">// different from parameterless method<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html>
</richcontent>
</node>
</node>
</node>
<node CREATED="1417111254958" FOLDED="true" ID="ID_1906270709" MODIFIED="1417116291610" TEXT="object        -- singleton ">
<node CREATED="1417111305927" ID="ID_1882532527" MODIFIED="1417111305927">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>object </b></span></font>HelloWorld {<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <span style="font-style: italic"><i>println</i></span>(<font color="#6a8759"><span style="color: #6a8759">&quot;Hello World!!</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
<node CREATED="1417111534212" FOLDED="true" ID="ID_481924656" MODIFIED="1417112514937" TEXT="ditto static member of a class in Java">
<node CREATED="1417111858890" ID="ID_484055107" MODIFIED="1417111858890">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#cc7832"><span style="color: #cc7832">public class </span></font>HelloWorld {<br />    <font color="#cc7832"><span style="color: #cc7832">private </span></font>HelloWorld(){}<br />    <font color="#cc7832"><span style="color: #cc7832">public static void </span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(String args[]){<br />        System.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>out</i></span></font>.println(<font color="#6a8759"><span style="color: #6a8759">&quot;Hello World!!</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417111867558" FOLDED="true" ID="ID_622988153" MODIFIED="1417112513269" TEXT="singleton  Scala vs. Java">
<node CREATED="1417112249184" ID="ID_542217853" MODIFIED="1417112249184">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Scala<br /></span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>object  </b></span></font>Singleton {<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">do_something</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <span style="font-style: italic"><i>println</i></span>(<font color="#6a8759"><span style="color: #6a8759">&quot;Singleton.do_something()...&quot;</span></font>)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
<node CREATED="1417112509090" MODIFIED="1417112509090">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Java<br /></span></font><font color="#cc7832"><span style="color: #cc7832">public class </span></font>Singleton {<br />    <font color="#cc7832"><span style="color: #cc7832">private static </span></font>Singleton <font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>instance</i></span></font>=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Singleton()<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    private </span></font>Singleton(){}<br />    <font color="#cc7832"><span style="color: #cc7832">public static </span></font>Singleton <font color="#ffc66d"><span style="color: #ffc66d">getInstance</span></font>(){<br />        <font color="#cc7832"><span style="color: #cc7832">return </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>instance</i></span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />    <font color="#cc7832"><span style="color: #cc7832">void </span></font><font color="#ffc66d"><span style="color: #ffc66d">do_something</span></font>(){<br />        System.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>out</i></span></font>.println(<font color="#6a8759"><span style="color: #6a8759">&quot;Singleton.do_something()...&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417111314242" FOLDED="true" ID="ID_1009476183" MODIFIED="1417116299090" TEXT="companion object          -- separate static members from non-static ones">
<node CREATED="1417115793067" FOLDED="true" ID="ID_840197120" MODIFIED="1417115837811" TEXT="Scala">
<node CREATED="1417115710410" ID="ID_251189284" MODIFIED="1417115795556">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//primary constructor<br /></span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>class </b></span></font>Employee() {<br />  <font color="#808080"><span style="color: #808080; font-style: italic"><i>/*<br /></i></span><i><span style="color: #808080; font-style: italic">  A variable definition var x: T = _ can appear only as a member of a template. It<br /></span><span style="color: #808080; font-style: italic">  introduces a mutable field with type T and a default initial value. The default value<br /></span><span style="color: #808080; font-style: italic">  depends on the type T as follows:<br /></span><span style="color: #808080; font-style: italic">  0 if T is Int or one of its subrange types,<br /></span><span style="color: #808080; font-style: italic">  0L if T is Long,<br /></span><span style="color: #808080; font-style: italic">  0.0f if T is Float,<br /></span><span style="color: #808080; font-style: italic">  0.0d if T is Double,<br /></span><span style="color: #808080; font-style: italic">  false if T is Boolean,<br /></span><span style="color: #808080; font-style: italic">  () if T is Unit,<br /></span><span style="color: #808080; font-style: italic">  null for all other types T .<br /></span><span style="color: #808080; font-style: italic">  */<br /></span><span style="color: #808080; font-style: italic">  </span></i></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>private var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>n</i></span></font>:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=_<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>private var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>g</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=_<br />  <font color="#808080"><span style="color: #808080">//auxiliary/secondary constructor<br /></span><span style="color: #808080">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def this</b></span></font>(name:<font color="#4e807d"><span style="color: #4e807d">String</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>gender:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>) ={<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>() <font color="#808080"><span style="color: #808080">// primary constructor must be called by auxiliary ones<br /></span><span style="color: #808080">    </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>n</i></span></font>=name<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>g</i></span></font>=gender<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>if </b></span></font>(gender==Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">    </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>else </b></span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font>}<br />}<br /><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>object </b></span></font>Employee{<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">summarize</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <span style="font-style: italic"><i>printf</i></span>(<font color="#6a8759"><span style="color: #6a8759">&quot;Total:%d Female:%d Male:%d</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>+<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>)<br />  }<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font>empa=<font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>new </b></span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;Mary&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font>empb=<font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>new </b></span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;John&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>)<br />    Employee.<span style="font-style: italic"><i>summarize</i></span>()<br />    <font color="#808080"><span style="color: #808080">//val x:Int=_ //WRONG!!!<br /></span><span style="color: #808080">    </span></font><span style="font-style: italic"><i>println</i></span>(x)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417115838196" FOLDED="true" ID="ID_1558454921" MODIFIED="1417116266710" TEXT="Java">
<node CREATED="1417116265322" MODIFIED="1417116265322">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Java<br /></span></font><font color="#cc7832"><span style="color: #cc7832">public class </span></font>Employee {<br />    <font color="#cc7832"><span style="color: #cc7832">static final int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static final int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">1</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static public void </span></font><font color="#ffc66d"><span style="color: #ffc66d">summarize</span></font>(){<br />        System.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>out</i></span></font>.printf(<font color="#6a8759"><span style="color: #6a8759">&quot;Total:%d Female:%d Male:%d</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female </i></span></font>+ <font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br /><br />    <font color="#cc7832"><span style="color: #cc7832">private </span></font>String <font color="#9876aa"><span style="color: #9876aa">n</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    private int </span></font><font color="#9876aa"><span style="color: #9876aa">g</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    public </span></font>Employee(String name<font color="#cc7832"><span style="color: #cc7832">,int </span></font>gender){<br />        <font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">n</span></font>=name<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        this</span></font>.<font color="#9876aa"><span style="color: #9876aa">g</span></font>=gender<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        if </span></font>(gender==Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>++<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        else </span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>++<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br /><br />    <font color="#cc7832"><span style="color: #cc7832">public static void </span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(String args[]){<br />        Employee ea=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;Mary&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Employee eb=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;John&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Employee.<span style="font-style: italic"><i>summarize</i></span>()<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417116300857" ID="ID_17948278" MODIFIED="1417178368876" TEXT="trait"/>
<node CREATED="1417116305528" ID="ID_559570838" MODIFIED="1417178374807" TEXT="abstract class vs. trat"/>
</node>
<node CREATED="1417185240106" ID="ID_1488302890" MODIFIED="1417189780757" TEXT="Everything Is an Object">
<node CREATED="1417176737262" FOLDED="true" ID="ID_1172260535" MODIFIED="1417195782856" TEXT="Operations Are Methods">
<node CREATED="1417185585491" ID="ID_1120119727" MODIFIED="1417185645997" TEXT="operations are method per se">
<node CREATED="1417176744434" FOLDED="true" ID="ID_1333829521" MODIFIED="1417185738342" TEXT="every operation is a message send, ditto, the invocation of a method.">
<node CREATED="1417176811323" ID="ID_1396029251" MODIFIED="1417176837128" TEXT="x + y interpreted as x.+(y)"/>
<node CREATED="1417176884895" ID="ID_349185383" MODIFIED="1417176895479" TEXT="originate from Smalltalk"/>
</node>
<node CREATED="1417176953589" FOLDED="true" ID="ID_689937931" MODIFIED="1417185747570" TEXT="scala treats operator names as ordinary identifiers.">
<node CREATED="1417177006160" ID="ID_387357593" MODIFIED="1417177017668" TEXT="identifiers">
<node CREATED="1417177018733" ID="ID_1345117202" MODIFIED="1417177284403" TEXT="\w[\d\w]*"/>
<node CREATED="1417177286150" ID="ID_164606325" MODIFIED="1417177325220" TEXT="sequence of operators characters  -- used as method name"/>
</node>
</node>
</node>
<node CREATED="1417185665051" ID="ID_1405419297" MODIFIED="1417185776936" TEXT="infix operators are syntactic sugar ">
<node CREATED="1417184099660" ID="ID_1579386321" MODIFIED="1417185805585" TEXT="infix operator">
<node CREATED="1417177328547" ID="ID_1025945709" MODIFIED="1417184106490" TEXT="syntactic sugar: ( arg.startWith(&quot;-&quot;) ) can be used in operator syntax ( arg startWith &quot;-&quot; )"/>
<node CREATED="1417182307358" ID="ID_1640432043" MODIFIED="1417185809951" TEXT="associativities and precedences of infix operator">
<node CREATED="1417182365421" FOLDED="true" ID="ID_991476710" MODIFIED="1417183100802" TEXT="precedences determined by its first char">
<node CREATED="1417182682522" ID="ID_7183465" MODIFIED="1417182682522">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New">(all letters)<br />|<br />^<br />&amp;<br />&lt; &gt;<br />= !<br />:<br />+ -<br />* / %<br />(all other special characters)</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417182700193" FOLDED="true" ID="ID_874072431" MODIFIED="1417183099535" TEXT="associativity ">
<node CREATED="1417182954661" ID="ID_417040998" MODIFIED="1417182961998" TEXT="operators are usually left-associative "/>
<node CREATED="1417182963455" ID="ID_516457168" MODIFIED="1417182977022" TEXT="operators ending in colon(:) is right-associative">
<node CREATED="1417182993605" ID="ID_96396599" MODIFIED="1417183031638" TEXT="right-associative operators take their right operand as receiver."/>
<node CREATED="1417183032090" ID="ID_1448374855" MODIFIED="1417183061680" TEXT="x::y::zs means zx.::(y).::(x)  "/>
</node>
</node>
</node>
</node>
<node CREATED="1417184257689" FOLDED="true" ID="ID_904334639" MODIFIED="1417185804242" TEXT="dereferencing and assignment are operations">
<node CREATED="1417185150931" MODIFIED="1417185150931">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Foobar[<font color="#4e807d"><span style="color: #4e807d">T</span></font>](init:<font color="#4e807d"><span style="color: #4e807d">T</span></font>) {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">x</span></font></i>:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=init<br />  <font color="#808080"><span style="color: #808080">// Scala auto-gen setter and getter method as fellows<br /></span><span style="color: #808080">  // def x:T // getter<br /></span><span style="color: #808080">  // def x_=(newval:T):Unit // setter<br /></span></font>}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Celsius{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">private var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">d</span></font></i>: <font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">degree</span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">d<br /></span><span style="color: #9876aa; font-style: italic">  </span></font></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">degree_=</span></font>(x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>= <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(x &gt;= -<font color="#6897bb"><span style="color: #6897bb">273</span></font>) <i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">d</span></font></i>=x<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>Foobar{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fb: Foobar[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foobar[<font color="#4e807d"><span style="color: #4e807d">String</span></font>](<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font>)<br />    <i><span style="font-style: italic">println</span></i>(fb.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">x</span></font></i>)<font color="#808080"><span style="color: #808080">// print: &quot;foobar&quot;<br /></span><span style="color: #808080">    </span></font>fb.x_=(<font color="#6a8759"><span style="color: #6a8759">&quot;deadbeef&quot;</span></font>)<font color="#808080"><span style="color: #808080">// ditto: fb.x=&quot;deadbeef&quot;<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fb.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">x</span></font></i>) <font color="#808080"><span style="color: #808080">// print: &quot;deadbeef&quot;<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>C:Celsius=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Celsius<br />    C.degree=<font color="#6897bb"><span style="color: #6897bb">10 </span></font><font color="#808080"><span style="color: #808080">//ditto: C.degree_=(10)<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(C.degree) <font color="#808080"><span style="color: #808080">// print: 10<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417185261727" FOLDED="true" ID="ID_775986736" MODIFIED="1417195779618" TEXT="Methods Are Function Values">
<node CREATED="1417177556059" FOLDED="true" ID="ID_357775873" MODIFIED="1417185781273" TEXT="parameterless methods vs. empty parameter list () method ">
<node CREATED="1417178065249" MODIFIED="1417178065249">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>ParameterlessMethod {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">foobar</span></font>:<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <i><span style="font-style: italic">print </span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;Parameterless Method is called with no argument list passed</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">deadbeef</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <i><span style="font-style: italic">print </span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;Method is called with no argument passed or with '()'</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<br />  }<br />}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>ParameterlessMethod{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b>a:ParameterlessMethod  = <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>ParameterlessMethod<br />    a.foobar<br />    <font color="#808080"><span style="color: #808080">//a.foobar()//WRONT<br /></span><span style="color: #808080">    </span></font>a.deadbeef()<br />    a.deadbeef <br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417183102075" ID="ID_1090711175" MODIFIED="1417185823491" TEXT="pass argu by name/reference or by value">
<node CREATED="1417183136817" ID="ID_500846243" MODIFIED="1417183964967" TEXT="by value"/>
<node CREATED="1417183142568" ID="ID_1423644765" MODIFIED="1417185846033" TEXT="by name &apos;=&gt;&apos;">
<node CREATED="1417185843901" FOLDED="true" ID="ID_1119685745" MODIFIED="1417185849994" TEXT="demo">
<node CREATED="1417183951305" ID="ID_544266975" MODIFIED="1417185847547">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">// short-circuit operators &amp;&amp; ||<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">abstract class </span></font></b>SCBool {<br />  <font color="#808080"><span style="color: #808080">// '=&gt;' means arg passed by name/reference<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">&amp;&amp; </span></font>(x: =&gt; SCBool):SCBool<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">|| </span></font>(x: =&gt; SCBool):SCBool<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>SCFalse <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>SCBool{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">&amp;&amp; </span></font>(x: =&gt; SCBool):SCBool=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this<br /></span><span style="color: #cc7832; font-weight: bold">  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">|| </span></font>(x: =&gt; SCBool):SCBool=x<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String </span></font>= <font color="#6a8759"><span style="color: #6a8759">&quot;False&quot;<br /></span></font>}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>SCTrue <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>SCBool{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">&amp;&amp; </span></font>(x: =&gt; SCBool):SCBool=x<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">|| </span></font>(x: =&gt; SCBool):SCBool=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this<br /></span><span style="color: #cc7832; font-weight: bold">  override  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String </span></font>= <font color="#6a8759"><span style="color: #6a8759">&quot;True&quot;<br /></span></font>}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>Bool {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">&amp;&amp;</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">&amp;&amp;</span></i>SCTrue)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">&amp;&amp;</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">&amp;&amp;</span></i>SCTrue)<br /><br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">||</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">||</span></i>SCTrue)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">||</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">||</span></i>SCTrue)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417185851238" ID="ID_1719436413" MODIFIED="1417186003983" TEXT="x: =&gt;T  ">
<node CREATED="1417185916328" ID="ID_1379097211" MODIFIED="1417185935854" TEXT="x: _=&gt;T"/>
<node CREATED="1417185929096" ID="ID_1152067886" MODIFIED="1417185998639" TEXT="x:: \_-&gt;T     -- in haskell"/>
</node>
</node>
</node>
</node>
<node CREATED="1417185275821" ID="ID_27642057" MODIFIED="1417185357881" TEXT="Funtions Are Objects"/>
</node>
</node>
<node CREATED="1417189783992" ID="ID_1235766344" MODIFIED="1417195849042" POSITION="right" TEXT="functional">
<node CREATED="1417186513808" FOLDED="true" ID="ID_1184276243" MODIFIED="1417195870421" TEXT="Higher-order Functions (Functions are values)">
<node CREATED="1417186627502" ID="ID_509013474" MODIFIED="1417189824786" TEXT="function literals">
<node CREATED="1417186793314" FOLDED="true" ID="ID_1089162397" MODIFIED="1417189825981" TEXT="nested functions">
<node CREATED="1417189641275" MODIFIED="1417189641275">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//nested function<br /></span><span style="color: #808080">//closure: nested function that can access upvalues<br /></span><span style="color: #808080">//upvalues(originate from lua) means local variables of enclosing functions<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fibonacci</span></font>:(()=&gt;<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)={<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a:Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>]=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>](<font color="#6897bb"><span style="color: #6897bb">2</span></font>)<br />  a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font>a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fib</span></font>():<font color="#cc7832"><span style="color: #cc7832">Int</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>t=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<br />    a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)+t<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>fib<br />}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_fibonacci</span></font>(n:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fib=<i><span style="font-style: italic">fibonacci<br /></span><span style="font-style: italic">  </span></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">for </span></font></b>(x &lt;- <font color="#6897bb"><span style="color: #6897bb">1 </span></font>to n){<br />    <i><span style="font-style: italic">println</span></i>(fib())<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417186802222" FOLDED="true" ID="ID_1543294245" MODIFIED="1417189830182" TEXT="anonymous functions">
<node CREATED="1417189427487" MODIFIED="1417189427487">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//anonymous function/lambda expression<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_add</span></font>(x:<font color="#cc7832"><span style="color: #cc7832">Int,</span></font>y:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />  <font color="#808080"><span style="color: #808080">// -- in Haskell<br /></span><span style="color: #808080">  // let add = \x y-&gt;x+y in putStrLn $ show $ add 10 10<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; background-color: #344134; font-weight: bold">val</span><span style="color: #cc7832; font-weight: bold"> </span></font></b>add = <span style="background-color: #344134">(x:Int</span><font color="#cc7832"><span style="color: #cc7832; background-color: #344134">,</span></font><span style="background-color: #344134">y:Int)=&gt;x+y</span><br />  <i><span style="font-style: italic">println</span></i>(add(x<font color="#cc7832"><span style="color: #cc7832">,</span></font>y))<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417186884868" ID="ID_401524610" MODIFIED="1417188037654" TEXT="sections">
<node CREATED="1417187033782" ID="ID_545140846" MODIFIED="1417187252638" TEXT="0 ==   --  x: Int =&gt; 0 == x ">
<node CREATED="1417187254026" ID="ID_864533339" MODIFIED="1417187312305" TEXT="(0==)  -- \x-&gt;0==x  (in Haskell)"/>
</node>
<node CREATED="1417187285211" ID="ID_264018805" MODIFIED="1417187338582" TEXT="==0 -- invalid !!!">
<node CREATED="1417187316683" ID="ID_1799631924" MODIFIED="1417187344724" TEXT="valid in Haskell"/>
</node>
</node>
</node>
<node CREATED="1417186578759" FOLDED="true" ID="ID_115128111" MODIFIED="1417195868940" TEXT="function as paremeters/arguments">
<node CREATED="1417195756197" MODIFIED="1417195756197">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>HigherOrderScala {<br /><br />  <font color="#808080"><span style="color: #808080">//nested function<br /></span><span style="color: #808080">  //closure: nested function that can access upvalues<br /></span><span style="color: #808080">  //upvalues(originate from lua) means local variables of enclosing functions<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fibonacci</span></font>:(()=&gt;<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a:Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>]=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>](<font color="#6897bb"><span style="color: #6897bb">2</span></font>)<br />    a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">    </span></font>a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fib</span></font>():<font color="#cc7832"><span style="color: #cc7832">Int</span></font>={<br />      <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>t=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />      a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<br />      a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)+t<br />      <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    }<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>fib<br />  }<br /><br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_fibonacci</span></font>(n:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fib=<i><span style="font-style: italic">fibonacci<br /></span><span style="font-style: italic">    </span></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">for </span></font></b>(x &lt;- <font color="#6897bb"><span style="color: #6897bb">1 </span></font>to n){<br />      <i><span style="font-style: italic">println</span></i>(fib())<br />    }<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">foldr</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#4e807d"><span style="color: #4e807d">S</span></font>](f:(<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#4e807d"><span style="color: #4e807d">S</span></font>)=&gt;<font color="#4e807d"><span style="color: #4e807d">S</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>z:<font color="#4e807d"><span style="color: #4e807d">S</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#4e807d"><span style="color: #4e807d">S</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(xs.length == <font color="#6897bb"><span style="color: #6897bb">0</span></font>) <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>z<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else return </span></font></b>f(xs.head<font color="#cc7832"><span style="color: #cc7832">,</span></font><i><span style="font-style: italic">foldr</span></i>(f<font color="#cc7832"><span style="color: #cc7832">,</span></font>z<font color="#cc7832"><span style="color: #cc7832">,</span></font>xs.tail))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">any</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (p:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#cc7832"><span style="color: #cc7832">Boolean,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>f = (x:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>ok:<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>)=&gt;ok || p(x)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>(f<font color="#cc7832"><span style="color: #cc7832">,</span><b><span style="color: #cc7832; font-weight: bold">false</span></b><span style="color: #cc7832">,</span></font>xs)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">all</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (p:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#cc7832"><span style="color: #cc7832">Boolean,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>!<i><span style="font-style: italic">any</span></i>((x:<font color="#4e807d"><span style="color: #4e807d">T</span></font>) =&gt; !p(x)<font color="#cc7832"><span style="color: #cc7832">,</span></font>xs)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">map</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#4e807d"><span style="color: #4e807d">S</span></font>] (f:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#4e807d"><span style="color: #4e807d">S</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">S</span></font>]={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>((y:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>ys:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">S</span></font>])=&gt;f(y)::ys<font color="#cc7832"><span style="color: #cc7832">,</span></font><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">Nil</span></font></i><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">grep</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (p:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#cc7832"><span style="color: #cc7832">Boolean,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]): <font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] ={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>((y:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>ys:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>])=&gt;<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(p(y)) y::ys <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else </span></font></b>ys<font color="#cc7832"><span style="color: #cc7832">,</span></font><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">Nil</span></font></i><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs)<br />  }<br /><br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">join</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (sep:<font color="#4e807d"><span style="color: #4e807d">String</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#4e807d"><span style="color: #4e807d">String </span></font>= {<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>((x:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>s:<font color="#4e807d"><span style="color: #4e807d">String</span></font>)=&gt;<font color="#6a8759"><span style="color: #6a8759">&quot;&quot;</span></font>+x+sep+s<font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;&quot;</span></font>+xs.last<font color="#cc7832"><span style="color: #cc7832">,</span></font>xs.init)<br />  }<br /><br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_any</span></font>(): <font color="#cc7832"><span style="color: #cc7832">Unit </span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>days = <i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">List</span></font></i>[<font color="#4e807d"><span style="color: #4e807d">String</span></font>](<font color="#6a8759"><span style="color: #6a8759">&quot;scala&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;is&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;an&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;programming&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;language&quot;</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>p = (x:<font color="#4e807d"><span style="color: #4e807d">String</span></font>)=&gt;x.startsWith(<font color="#6a8759"><span style="color: #6a8759">&quot;a&quot;</span></font>)<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">any</span></i>(p<font color="#cc7832"><span style="color: #cc7832">,</span></font>days))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_all</span></font>(): <font color="#cc7832"><span style="color: #cc7832">Unit </span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a=<font color="#6897bb"><span style="color: #6897bb">1 </span></font>to <font color="#6897bb"><span style="color: #6897bb">10<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br /><br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_map</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a=<font color="#6897bb"><span style="color: #6897bb">1 </span></font>to <font color="#6897bb"><span style="color: #6897bb">10<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><i><span style="font-style: italic">map</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;x*x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList)))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_grep</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a=<font color="#6897bb"><span style="color: #6897bb">1 </span></font>to <font color="#6897bb"><span style="color: #6897bb">10<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><i><span style="font-style: italic">grep</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;x%<font color="#6897bb"><span style="color: #6897bb">3</span></font>==<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList)))<br />  }<br /><br />  <font color="#808080"><span style="color: #808080">//anonymous function/lambda expression<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_add</span></font>(x:<font color="#cc7832"><span style="color: #cc7832">Int,</span></font>y:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <font color="#808080"><span style="color: #808080">// -- in Haskell<br /></span><span style="color: #808080">    // let add = \x y-&gt;x+y in putStrLn $ show $ add 10 10<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>add = (x:<font color="#cc7832"><span style="color: #cc7832">Int,</span></font>y:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;x+y<br />    <i><span style="font-style: italic">println</span></i>(add(x<font color="#cc7832"><span style="color: #cc7832">,</span></font>y))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]): <font color="#cc7832"><span style="color: #cc7832">Unit </span></font>={<br />    <font color="#808080"><span style="color: #808080">//test_add(1,2)<br /></span><span style="color: #808080">    //test_fibonacci(10)<br /></span><span style="color: #808080">    //test_any<br /></span><span style="color: #808080">    //test_all()<br /></span><span style="color: #808080">    //test_map()<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">test_grep</span></i>()<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417186621365" ID="ID_518130017" MODIFIED="1417186626737" TEXT="functions as return value"/>
<node CREATED="1417186898166" ID="ID_929906027" MODIFIED="1417187018881" TEXT="functions can be binded to variable"/>
</node>
</node>
<node CREATED="1417161555757" FOLDED="true" ID="ID_1331900498" MODIFIED="1417189797426" POSITION="right" TEXT="type">
<node CREATED="1417173633029" FOLDED="true" ID="ID_696968813" MODIFIED="1417176545097" TEXT="type hierarchy">
<node CREATED="1417161559016" ID="ID_1993474055" MODIFIED="1417173646263" TEXT="scala.Any       -- root">
<node CREATED="1417161581926" ID="ID_993305904" MODIFIED="1417161589874" TEXT="scala.AnyVal">
<node CREATED="1417161626491" ID="ID_1406226748" MODIFIED="1417161677564" TEXT="scala.{Unit, Boolean, Char, Byte, Short, Int, Long, Float, Double}"/>
</node>
<node CREATED="1417161595944" ID="ID_707113591" MODIFIED="1417161603447" TEXT="scala.AnyRef">
<node CREATED="1417161689734" ID="ID_458595210" MODIFIED="1417161709850" TEXT="scala.{Iterable, Seq, List} "/>
<node CREATED="1417161710311" ID="ID_1339246368" MODIFIED="1417161735090" TEXT="java.lang.String"/>
<node CREATED="1417161735320" ID="ID_747948306" MODIFIED="1417161745008" TEXT="other java classes"/>
<node CREATED="1417161758893" ID="ID_420730064" MODIFIED="1417161764602" TEXT="scala.Null"/>
</node>
<node CREATED="1417161750977" ID="ID_1343419640" MODIFIED="1417161758676" TEXT="scala.Nothing"/>
<node CREATED="1417164377911" ID="ID_1858385944" MODIFIED="1417164419230" TEXT="Nothing vs. Null">
<node CREATED="1417164420190" ID="ID_1615783725" MODIFIED="1417164423176" TEXT="Null">
<node CREATED="1417164427854" ID="ID_473657518" MODIFIED="1417164458626" TEXT="Null is a subtype of all references types"/>
<node CREATED="1417164466397" ID="ID_1010238349" MODIFIED="1417164515654" TEXT="Null is not a subtype of any value types"/>
<node CREATED="1417164515994" ID="ID_1100696038" MODIFIED="1417164548142" TEXT="null is  the only instance of Null "/>
<node CREATED="1417164555878" ID="ID_179153009" MODIFIED="1417164592717" TEXT="It&apos;s impossible to assign null to variable of value types "/>
</node>
<node CREATED="1417164423653" ID="ID_431524806" MODIFIED="1417164426298" TEXT="Nothing">
<node CREATED="1417164594496" ID="ID_1650251887" MODIFIED="1417164660996" TEXT="Nothing is a subtype of all other type  but Nothing itself "/>
<node CREATED="1417164663239" ID="ID_1044598342" MODIFIED="1417164686500" TEXT="no instance of Nothing"/>
<node CREATED="1417164687070" ID="ID_848151908" MODIFIED="1417164778324" TEXT="Nil =List[Nothing], Nil is an instance of List[T], because lists are convariant in Scala"/>
</node>
</node>
</node>
</node>
<node CREATED="1417173652831" FOLDED="true" ID="ID_1470577340" MODIFIED="1417176546199" TEXT="eq equals  ==">
<node CREATED="1417173677314" FOLDED="true" ID="ID_1713582867" MODIFIED="1417173715325" TEXT="Java">
<node CREATED="1417173688483" MODIFIED="1417173688483">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">// in Java<br /></span></font><font color="#cc7832"><span style="color: #cc7832">class </span></font>Foo{<br />    <font color="#cc7832"><span style="color: #cc7832">private int </span></font><font color="#9876aa"><span style="color: #9876aa">i</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    public </span></font>Foo(<font color="#cc7832"><span style="color: #cc7832">int </span></font>i){<font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">i</span></font>=i<font color="#cc7832"><span style="color: #cc7832">;</span></font>}<br />    <i><font color="#808080"><span style="color: #808080; font-style: italic">/*by default, '==' and 'equals' of User-defined class<br /></span><span style="color: #808080; font-style: italic">      inherit from Object. 'equals' has the SAME behavior as '=='<br /></span><span style="color: #808080; font-style: italic">     */<br /></span><span style="color: #808080; font-style: italic"><br /></span></font></i>}<br /><br /><font color="#cc7832"><span style="color: #cc7832">class </span></font>Bar{<br />    <font color="#cc7832"><span style="color: #cc7832">private int </span></font><font color="#9876aa"><span style="color: #9876aa">i</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    public </span></font>Bar(<font color="#cc7832"><span style="color: #cc7832">int </span></font>i){<font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">i</span></font>=i<font color="#cc7832"><span style="color: #cc7832">;</span></font>}<br />    <font color="#808080"><span style="color: #808080">// modify default behavior of 'equal'<br /></span><span style="color: #808080">    </span></font><font color="#cc7832"><span style="color: #cc7832">public boolean </span></font><font color="#ffc66d"><span style="color: #ffc66d">equals</span></font>(Object rhs){<br />        <font color="#cc7832"><span style="color: #cc7832">if </span></font>(rhs!=<font color="#cc7832"><span style="color: #cc7832">null </span></font>&amp;&amp; (rhs <font color="#cc7832"><span style="color: #cc7832">instanceof </span></font>Bar)){<br />            Bar r=(Bar)rhs<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">            if </span></font>(r.<font color="#9876aa"><span style="color: #9876aa">i</span></font>==<font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">i</span></font>)<font color="#cc7832"><span style="color: #cc7832">return true;<br /></span><span style="color: #cc7832">            else return false;<br /></span><span style="color: #cc7832">        </span></font>}<br />        <font color="#cc7832"><span style="color: #cc7832">else</span></font>{<br />            <font color="#cc7832"><span style="color: #cc7832">return false;<br /></span><span style="color: #cc7832">        </span></font>}<br />    }<br />}<br /><br /><font color="#cc7832"><span style="color: #cc7832">public class </span></font>EqualTest {<br />    <font color="#cc7832"><span style="color: #cc7832">public static void </span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(String args[]){<br />        String a=<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// values of a and b in constant pool<br /></span><span style="color: #808080">        </span></font>String b=<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// a and b reference to  the IDENTICAL object<br /></span><span style="color: #808080">        </span></font>Integer ia=<font color="#6897bb"><span style="color: #6897bb">10</span></font><font color="#cc7832"><span style="color: #cc7832">;  </span></font><font color="#808080"><span style="color: #808080">// values of ia and ib in constant pool<br /></span><span style="color: #808080">        </span></font>Integer ib=<font color="#6897bb"><span style="color: #6897bb">10</span></font><font color="#cc7832"><span style="color: #cc7832">;  </span></font><font color="#808080"><span style="color: #808080">// ia and ib reference to the IDENTICAL object<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(a==b)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(ia==ib)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>String a1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>String(<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// values of a and b in heap<br /></span><span style="color: #808080">        </span></font>String b1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>String(<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// a and b reference to the DIFFERENT objects<br /></span><span style="color: #808080">        </span></font>Integer ia1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Integer(<font color="#6897bb"><span style="color: #6897bb">10</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// values of ia1 and ib1 in heap<br /></span><span style="color: #808080">        </span></font>Integer ib1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Integer(<font color="#6897bb"><span style="color: #6897bb">10</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// ia1 and ib1 reference to the DIFFERENT objects<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(a1==b1)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(ia1==ib1)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        // '==' always means reference equal<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        // for objects of String and Wrappers of primitive types<br /></span><span style="color: #808080">        // 'equals' is different from '=='<br /></span><span style="color: #808080">        // 'equals' value/content equal<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        // for objects of user-defined class<br /></span><span style="color: #808080">        // 'equal' means '==' if the class just inherit 'equal' of Object<br /></span><span style="color: #808080">        // 'equal' is user-defined if user override 'equal' in subclass<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(a1.equals(b1))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">// true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(ia1.equals(ib1))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">// true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>Foo f1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Foo(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Foo f2=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Foo(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Foo f3=f1<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1==f2)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1.equals(f2))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1==f3)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1.equals(f3))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>Bar bar1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Bar(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Bar bar2=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Bar(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Bar bar3=bar1<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1==bar2)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1.equals(bar2))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1==bar3)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1.equals(bar3))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font>}<br />}<br /></pre>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1417176239705" FOLDED="true" ID="ID_369755319" MODIFIED="1417176250175" TEXT="Scala">
<node CREATED="1417176243279" MODIFIED="1417176243279">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080">// eq in scala.AnyRef: reference equality,just like '==' Java<br /></span><span style="color: #808080">// == : value equality,just like 'equals' in java<br /></span><span style="color: #808080">// eq is final,you can't override<br /></span><span style="color: #808080">// == : can be user-defined by override 'equals'<br /></span><span style="color: #808080">// eq is NOT a member of  subtypes of scala.AnyVal<br /></span><span style="color: #808080">// so for primitives and String,'==' always means natural(content) equality <br /></span><span style="color: #808080">// for subtypes of scala.AnyRef, default '==' means 'eq'<br /></span><span style="color: #808080"><br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Foo(init:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>){<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>=init<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Bar(init:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>){<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>=init<br />  <font color="#808080"><span style="color: #808080">// you must override 'equals', if you want customize '=='<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">equals</span></font>(rhs:Any):<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if</span></font></b>(rhs!=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">null </span></font></b>&amp;&amp; rhs.isInstanceOf[Bar]){ <font color="#808080"><span style="color: #808080">// instanceOf in Java<br /></span><span style="color: #808080">      </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>r:Bar=asInstanceOf[Bar] <font color="#808080"><span style="color: #808080">// downward cast in Java<br /></span><span style="color: #808080">      </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(r.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>==<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>)<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return true<br /></span><span style="color: #cc7832; font-weight: bold">      else return false<br /></span><span style="color: #cc7832; font-weight: bold">    </span></font></b>}<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else</span></font></b>{<br />      <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return false<br /></span><span style="color: #cc7832; font-weight: bold">    </span></font></b>}<br />  }<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>TestEqual {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>b:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(a==b)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sa:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;<br /></span><span style="color: #6a8759">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sb:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;<br /></span><span style="color: #6a8759">    </span></font><i><span style="font-style: italic">println</span></i>(sa==sb)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(sa eq sb)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sa1:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>String(<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sb1:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>String(<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;</span></font>)<br /><br />    <i><span style="font-style: italic">println</span></i>(sa1==sb1)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(sa1 eq sb1)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fa:Foo=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fb:Foo=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fc:Foo=fa<br />    <br />    <i><span style="font-style: italic">println</span></i>(fa==fb)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fa eq fb)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fa==fc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fa eq fc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>ba:Bar=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>bb:Bar=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>bc:Bar=ba<br />    <i><span style="font-style: italic">println</span></i>(ba==bb)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(ba eq bb)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(ba==bc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(ba eq bc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1417176253443" ID="ID_1425826556" MODIFIED="1417176310169" TEXT="reference equality :  ==(Java) eq (Scala)"/>
<node CREATED="1417176269242" ID="ID_240517830" MODIFIED="1417176368620" TEXT="value equality : equals(Java) == (Scala)"/>
</node>
<node CREATED="1417176479326" ID="ID_1566184364" MODIFIED="1417176515744" TEXT="isInstanceOf[T]     --- instanceOf"/>
<node CREATED="1417176516940" ID="ID_1924227003" MODIFIED="1417176538464" TEXT="asInstanceOf[T]    --- downward cast"/>
<node CREATED="1417176547585" ID="ID_1964855677" MODIFIED="1417176605760" TEXT="view(implicit conversion)  --- ">
<node CREATED="1417176694661" ID="ID_545766543" MODIFIED="1417176704796" TEXT="primitive type cast"/>
</node>
</node>
<node CREATED="1409472118000" FOLDED="true" ID="ID_295975344" MODIFIED="1417195708344" POSITION="right" TEXT="scala.collection">
<node CREATED="1409472122709" FOLDED="true" ID="ID_1237860577" MODIFIED="1409477404438" TEXT="Array[T] -- immutable">
<node CREATED="1409472171393" ID="ID_1233597494" MODIFIED="1409472419390" TEXT="val week= new Array[String](7)"/>
<node CREATED="1409472488459" ID="ID_1815736155" MODIFIED="1409472546479" TEXT="val mon=week(1)  //String mon=week[1]">
<node CREATED="1409472547564" ID="ID_982284484" MODIFIED="1409472557706" TEXT="week.apply(1)"/>
</node>
<node CREATED="1409472420329" ID="ID_1978941606" MODIFIED="1409472463968" TEXT="week(0)=&quot;Sunday&quot; //week[0]=&quot;Sunday&quot;">
<node CREATED="1409472465905" ID="ID_1613690204" MODIFIED="1409472485493" TEXT="week.update(0,&quot;Sunday&quot;)"/>
</node>
<node CREATED="1409472574061" ID="ID_1929678241" MODIFIED="1409472629303" TEXT="val week=Array(&quot;sun.&quot;,&quot;mon&quot;,&quot;tue&quot;,&quot;wed&quot;,&quot;thu&quot;,&quot;fri&quot;,&quot;sat&quot;)">
<node CREATED="1409472631742" ID="ID_1072465346" MODIFIED="1409472676992" TEXT="companion object"/>
<node CREATED="1409472677638" ID="ID_851390130" MODIFIED="1409472687071" TEXT="Array.apply(&quot;sun&quot;,...)"/>
</node>
</node>
<node CREATED="1409472145056" ID="ID_1559914646" MODIFIED="1417190491154" TEXT="List[T] -- mutable">
<node CREATED="1409475923928" FOLDED="true" ID="ID_151495946" MODIFIED="1409477277437" TEXT=":::  -- ++ in haskell">
<node CREATED="1409477266657" ID="ID_1475658670" MODIFIED="1409477273648">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      def qsort(lst:List[Int]):List[Int]=lst match{
    </p>
    <p>
      &#160;&#160;&#160;&#160;case Nil=&gt; Nil
    </p>
    <p>
      &#160;&#160;&#160;&#160;case x::xs=&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;val llst=qsort(xs.filter(x&gt;))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;val rlst=qsort(xs.filter(x&lt;=))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;llst:::List(x):::rlst
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1409475933029" ID="ID_1942723276" MODIFIED="1409475958157" TEXT="::  -- : in haskell"/>
<node CREATED="1409475971331" ID="ID_222456920" MODIFIED="1409475979171" TEXT="List()/ Nil"/>
<node CREATED="1409475998708" ID="ID_1215546406" MODIFIED="1409476003027" TEXT="list(idx)"/>
<node CREATED="1409476019270" ID="ID_889135617" MODIFIED="1409476038711" TEXT="List.count(T=&gt;Boolean)"/>
<node CREATED="1409476053205" ID="ID_260795708" MODIFIED="1409476061225" TEXT="drop/dropRight"/>
<node CREATED="1409476061968" ID="ID_594096323" MODIFIED="1409476254030" TEXT="{exists,forall}(T=&gt;Boolean)"/>
<node CREATED="1409476081878" ID="ID_898392814" MODIFIED="1409476249247" TEXT="{filter,map}"/>
<node CREATED="1409476130031" ID="ID_354963845" MODIFIED="1409476244841" TEXT="foreach(T=&gt;Unit)"/>
<node CREATED="1409476214776" ID="ID_1818479154" MODIFIED="1409476240156" TEXT="isEmpty"/>
<node CREATED="1409476221085" ID="ID_143939762" MODIFIED="1409476235821" TEXT="length"/>
<node CREATED="1409476228513" ID="ID_1345139562" MODIFIED="1409476324759" TEXT="{head,tail,init,last}"/>
<node CREATED="1409476335728" ID="ID_909335227" MODIFIED="1409476338827" TEXT="remove"/>
<node CREATED="1409476339058" ID="ID_1765856301" MODIFIED="1409476341301" TEXT="mkString"/>
<node CREATED="1409476341559" ID="ID_1605522963" MODIFIED="1409476350200" TEXT="{reverse,sort}"/>
</node>
<node CREATED="1409472150388" FOLDED="true" ID="ID_540192773" MODIFIED="1409477890034" TEXT="Tuple -- immutable, distinct type">
<node CREATED="1409477426126" ID="ID_809401584" MODIFIED="1409477457641" TEXT="val pair=(&quot;String&quot;,0)"/>
<node CREATED="1409477459640" ID="ID_624465347" MODIFIED="1409477463006" TEXT="pair._1"/>
<node CREATED="1409477463446" ID="ID_1886492910" MODIFIED="1409477465505" TEXT="pair._n"/>
</node>
<node CREATED="1409472157139" FOLDED="true" ID="ID_575294016" MODIFIED="1417176686919" TEXT="Set/Map --immutable,mutable">
<node CREATED="1409477939775" ID="ID_461588781" MODIFIED="1409477959146" TEXT="scala.collection.Set/Map"/>
<node CREATED="1409477959571" ID="ID_844672005" MODIFIED="1409478019061" TEXT="scala.collection.{immutable,mutable}.{Hash,Tree,List,Sorted}{Set,Map}"/>
</node>
</node>
</node>
</map>
