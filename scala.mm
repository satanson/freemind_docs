<map version="1.0.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1409052649174" ID="ID_1987233628" MODIFIED="1415431153238" TEXT="scala">
<node CREATED="1409053185709" FOLDED="true" ID="ID_1680169307" MODIFIED="1417111192589" POSITION="right" TEXT="wiki">
<node CREATED="1409052820382" ID="ID_1291848072" MODIFIED="1409053189340" TEXT="object-functional"/>
<node CREATED="1409052841210" ID="ID_1634213442" MODIFIED="1409053189337" TEXT="functional programming">
<node CREATED="1409052850454" ID="ID_1681858451" MODIFIED="1409052851692" TEXT="currying"/>
<node CREATED="1409052861298" ID="ID_992468080" MODIFIED="1409052862128" TEXT="pattern matching"/>
<node CREATED="1409052871135" ID="ID_1235728984" MODIFIED="1409052872132" TEXT="algebraic data types"/>
<node CREATED="1409052880828" ID="ID_663210313" MODIFIED="1409052881633" TEXT="lazy evaluation"/>
<node CREATED="1409052890511" ID="ID_119418059" MODIFIED="1409052891472" TEXT="tail recursion"/>
<node CREATED="1409052899889" ID="ID_1213046161" MODIFIED="1409052900747" TEXT="immutability"/>
</node>
<node CREATED="1409052918170" ID="ID_722604455" MODIFIED="1409053189326" TEXT="concise and thus smaller in size than most general purpose programming languages"/>
</node>
<node CREATED="1409053191935" FOLDED="true" ID="ID_1052314810" MODIFIED="1417261099134" POSITION="right" TEXT="overview">
<node CREATED="1409053513274" ID="ID_1297980924" MODIFIED="1409053514851" TEXT="scala">
<node CREATED="1409053527597" ID="ID_756941429" MODIFIED="1409053528302" TEXT="Scala fuses object-oriented and functional programming in a statically typed programming language. It is aimed at the construction of components and component systems."/>
</node>
<node CREATED="1409053539094" ID="ID_1367000611" MODIFIED="1409060172039" TEXT="component systems">
<node CREATED="1409053558350" ID="ID_696442082" MODIFIED="1409053559341" TEXT="True component systems have been an elusive goal of the software industry. Ideally, software should be assembled from libraries of pre-written components, just as hardware is assembled from pre-fabricated chips. In reality, large parts of software applications are written &#x10;from scratch&#x11;, so that software production is still more a craft than an industry."/>
</node>
<node CREATED="1409060161033" ID="ID_491610061" MODIFIED="1417065663642" TEXT="components">
<node CREATED="1409060174355" ID="ID_396704424" MODIFIED="1409060203810" TEXT=" simply software parts used by larger parts or whole apps"/>
<node CREATED="1409060368278" ID="ID_1347456879" MODIFIED="1409060370266" TEXT="forms">
<node CREATED="1409060364070" ID="ID_1293718634" MODIFIED="1409060364070" TEXT="classes"/>
<node CREATED="1409060364071" ID="ID_1796442794" MODIFIED="1409060364071" TEXT="libraries"/>
<node CREATED="1409060364072" ID="ID_43914968" MODIFIED="1409060364072" TEXT="frameworks"/>
<node CREATED="1409060364074" ID="ID_1706064762" MODIFIED="1409060364074" TEXT="processes"/>
<node CREATED="1409060364075" ID="ID_442372851" MODIFIED="1409060364075" TEXT="web services"/>
</node>
<node CREATED="1409060414731" ID="ID_838556451" MODIFIED="1409060442518" TEXT="one component linked with another by a variety of mechanisms">
<node CREATED="1409060533734" ID="ID_1534825370" MODIFIED="1409060533734" TEXT="aggregation"/>
<node CREATED="1409060533736" MODIFIED="1409060533736" TEXT="parameterization"/>
<node CREATED="1409060533737" MODIFIED="1409060533737" TEXT="inheritance"/>
<node CREATED="1409060533739" ID="ID_1370472499" MODIFIED="1409060533739" TEXT="remote invocation"/>
<node CREATED="1409060533740" ID="ID_123507100" MODIFIED="1409060540393" TEXT="message passing"/>
</node>
</node>
<node CREATED="1409060637920" ID="ID_163667118" MODIFIED="1409060648532" TEXT="shortcomings in the programming languages used to define and integrate components.">
<node CREATED="1409060668590" ID="ID_1041937294" MODIFIED="1409060669454" TEXT=" limited support for component abstraction and composition."/>
</node>
<node CREATED="1409060746057" ID="ID_1093494818" MODIFIED="1417065662025" TEXT="scala history">
<node CREATED="1409060703969" ID="ID_1978916342" MODIFIED="1409060704916" TEXT="Scala has been developed from 2001 in the programming methods laboratory at EPFL."/>
<node CREATED="1409060719385" ID="ID_1899359213" MODIFIED="1409060720341" TEXT="It has been released publicly on the JVM platform in January 2004 "/>
<node CREATED="1409060730328" ID="ID_855333997" MODIFIED="1409060731080" TEXT="on the .NET platform in June 2004. "/>
<node CREATED="1409060741245" ID="ID_1785257036" MODIFIED="1409060742140" TEXT="A second, revised version, described in this paper was released in March 2006."/>
</node>
<node CREATED="1409060794792" ID="ID_1580910066" MODIFIED="1417065650780" TEXT="lang better support for component software. two hypotheses">
<node CREATED="1409060981330" ID="ID_1672622387" MODIFIED="1409060984530" TEXT="scalable">
<node CREATED="1409061006684" ID="ID_1590828355" MODIFIED="1409061007585" TEXT=" the same concepts can describe small as well as large parts."/>
<node CREATED="1409061036288" ID="ID_72562215" MODIFIED="1417065907757" TEXT="we concentrate on mechanisms for abstraction, composition, and decomposition rather than adding a large set of primitives which might be useful for components at some level of scale, but not at other levels. "/>
</node>
<node CREATED="1409061054408" ID="ID_1548259256" MODIFIED="1409061146692" TEXT="object-oriented meets functional">
<node CREATED="1409061051818" ID="ID_424495190" MODIFIED="1409061104346" TEXT="scalable support for components can be provided by a programming language which unifies and generalizes object-oriented and functional programming. "/>
</node>
</node>
<node CREATED="1409061655223" ID="ID_9658473" MODIFIED="1409061669347" TEXT="type system breaks new ground in at least three areas">
<node CREATED="1409061687470" ID="ID_24602340" MODIFIED="1409061712765" TEXT="First, abstract type defninitions and path-dependent types apply the &#x3bd;Obj calculus to a concrete language design"/>
<node CREATED="1409061740584" ID="ID_1118463570" MODIFIED="1409061745284" TEXT="Second, modular mixin composition combines the advantages of mixins and traits."/>
<node CREATED="1409061814701" ID="ID_9400660" MODIFIED="1409064177470" TEXT="Third, views enable component adaptation in a modular way."/>
</node>
</node>
<node CREATED="1417359919022" FOLDED="true" ID="ID_592769895" MODIFIED="1417362267994" POSITION="right" TEXT="import">
<node CREATED="1417359994762" ID="ID_1958644324" MODIFIED="1417359995435" TEXT="import scala.collection.mutable"/>
<node CREATED="1417359925954" ID="ID_816361391" MODIFIED="1417360633330" TEXT="import import scala.collection.mutable._"/>
<node CREATED="1417360036239" ID="ID_1573208471" MODIFIED="1417360037168" TEXT="import scala.collection.mutable.{ListBuffer,ArrayBuffer}"/>
<node CREATED="1417360257693" ID="ID_392164992" MODIFIED="1417360294138" TEXT="import scala.collection.mutable.{ListBuffer=&gt;LB,ArrayBuffer=&gt;AB}"/>
<node CREATED="1417360301348" ID="ID_164667222" MODIFIED="1417360314298" TEXT="import scala.collection.mutable.{=&gt;_}"/>
</node>
<node CREATED="1417293663173" FOLDED="true" ID="ID_636814302" MODIFIED="1417362270378" POSITION="right" TEXT="stmts">
<node CREATED="1417293696916" ID="ID_1370059332" MODIFIED="1417293700495" TEXT="for"/>
<node CREATED="1417293700792" ID="ID_1242715697" MODIFIED="1417293709250" TEXT="if"/>
<node CREATED="1417293712978" ID="ID_378593966" MODIFIED="1417293713852" TEXT="while"/>
</node>
<node CREATED="1417294201994" ID="ID_298544090" MODIFIED="1417627588206" POSITION="right" TEXT="abstract">
<node CREATED="1417111200990" FOLDED="true" ID="ID_1260551387" MODIFIED="1417625961708" TEXT="oop  subtyping and mixin">
<node CREATED="1417111204209" FOLDED="true" ID="ID_234562648" MODIFIED="1417454407844" TEXT="components(class,object,trait)">
<node CREATED="1417111210147" ID="ID_130541612" MODIFIED="1417111254138" TEXT="class">
<node CREATED="1417117000264" FOLDED="true" ID="ID_1601727822" MODIFIED="1417454296674" TEXT="modifiers: { abstract, private, override, final,sealed, implicit,   }">
<node CREATED="1417181282994" ID="ID_1439578895" MODIFIED="1417181286207" TEXT="abstract">
<node CREATED="1417179165020" ID="ID_50607729" MODIFIED="1417181288008" TEXT="abstract class member">
<node CREATED="1417179178391" ID="ID_1974860662" MODIFIED="1417179290803" TEXT="class method that lack definition, no additional &apos;abstract&apos; modifier is needed from them"/>
</node>
<node CREATED="1417179112769" ID="ID_676413267" MODIFIED="1417181288001" TEXT="abstract class">
<node CREATED="1417179123468" FOLDED="true" ID="ID_148178652" MODIFIED="1417181279184" TEXT="class has abstract member(unimplemented member) must be modified by abstract">
<node CREATED="1417181267285" MODIFIED="1417181267285">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//class has unimplemented member(abstract member)<br /></span><span style="color: #808080">//must be modified by 'abstract'<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">abstract class </span></font></b>Nat {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">isZero</span></font>: <font color="#cc7832"><span style="color: #cc7832">Boolean </span></font><font color="#808080"><span style="color: #808080">//abstract member(unimplement)<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">pred</span></font>:Nat <font color="#808080"><span style="color: #808080">//abstract member(unimplement)<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">succ</span></font>:Nat=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Succ(<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>)<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">+ </span></font>(x:Nat):Nat = {<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(x.isZero)<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this else </span></font></b>succ + x.pred<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">- </span></font>(x:Nat):Nat = {<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(x.isZero)<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this else </span></font></b>pred - x.pred<br />  }<br />}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>Zero <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>Nat{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">isZero</span></font>:<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">true<br /></span><span style="color: #cc7832; font-weight: bold">  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">pred</span></font>:Nat=Zero<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String </span></font>= <font color="#6a8759"><span style="color: #6a8759">&quot;zero&quot;<br /></span></font>}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Succ(n:Nat) <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>Nat{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">isZero</span></font>:<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">false<br /></span><span style="color: #cc7832; font-weight: bold">  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">pred</span></font>:Nat=n<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<font color="#6a8759"><span style="color: #6a8759">&quot;Succ(&quot;</span></font>+n+<font color="#6a8759"><span style="color: #6a8759">&quot;)&quot;<br /></span></font>}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417181289012" ID="ID_1238913350" MODIFIED="1417181291965" TEXT="override">
<node CREATED="1417181752372" ID="ID_1014707514" MODIFIED="1417181861218" TEXT="&apos;override&apos; is required  for methods that override a concrete method is some inherited class"/>
<node CREATED="1417181861723" ID="ID_1776025881" MODIFIED="1417181909780" TEXT="&apos;override&apos; is opitional for methods that implement some abstract method in their superclass"/>
<node CREATED="1417181911905" ID="ID_1784701739" MODIFIED="1417181973231" TEXT="gives useful redundancy to protect against two common class of errors">
<node CREATED="1417181974462" ID="ID_752109812" MODIFIED="1417182040359" TEXT="accident overrides,unintentionally override"/>
<node CREATED="1417182050380" ID="ID_1140113726" MODIFIED="1417182144733" TEXT="broken overriding links. silently converting the override to an overloading"/>
</node>
</node>
<node CREATED="1417261139200" FOLDED="true" ID="ID_884643257" MODIFIED="1417261673715" TEXT="private[this]">
<node CREATED="1417261164289" ID="ID_1093445957" MODIFIED="1417261173776" TEXT="object-private">
<node CREATED="1417261655508" ID="ID_614376462" MODIFIED="1417261655508">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #808080"><font color="#808080">//in Scala<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>KeyValue(k:<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>v:<span style="color: #cc7832"><font color="#cc7832">Int</font></span>){<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private var </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>key</i></font></span>:<span style="color: #cc7832"><font color="#cc7832">Int</font></span>=k<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private</b></font></span>[<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>this</b></font></span>] <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>value</i></font></span>:<span style="color: #cc7832"><font color="#cc7832">Int</font></span>=v <span style="color: #808080"><font color="#808080">// object-private<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">cmp</font></span>(rhs:KeyValue):<span style="color: #cc7832"><font color="#cc7832">Boolean</font></span>={<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>return this</b></font></span>.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>key</i></font></span>==rhs.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>key<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">    </span></i></font><span style="color: #808080"><font color="#808080">//an object can't access object-private field of another object<br /></font></span><font color="#808080"><span style="color: #808080">    //return this.key==rhs.key &amp;&amp; this.value==rhs.value<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417178308934" FOLDED="true" ID="ID_1951248933" MODIFIED="1417454301347" TEXT="{ primary, auxiliary/secondary } constructor">
<node CREATED="1417181335177" FOLDED="true" ID="ID_109572588" MODIFIED="1417181522603" TEXT="demo">
<node CREATED="1417181502602" MODIFIED="1417181502602">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//primary constructor<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Employee() {<br />  <i><font color="#808080"><span style="color: #808080; font-style: italic">/*<br /></span><span style="color: #808080; font-style: italic">  A variable definition var x: T = _ can appear only as a member of a template. It<br /></span><span style="color: #808080; font-style: italic">  introduces a mutable field with type T and a default initial value. The default value<br /></span><span style="color: #808080; font-style: italic">  depends on the type T as follows:<br /></span><span style="color: #808080; font-style: italic">  0 if T is Int or one of its subrange types,<br /></span><span style="color: #808080; font-style: italic">  0L if T is Long,<br /></span><span style="color: #808080; font-style: italic">  0.0f if T is Float,<br /></span><span style="color: #808080; font-style: italic">  0.0d if T is Double,<br /></span><span style="color: #808080; font-style: italic">  false if T is Boolean,<br /></span><span style="color: #808080; font-style: italic">  () if T is Unit,<br /></span><span style="color: #808080; font-style: italic">  null for all other types T .<br /></span><span style="color: #808080; font-style: italic">  */<br /></span><span style="color: #808080; font-style: italic">  </span></font></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">private var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">n</span></font></i>:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=_<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">private var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">g</span></font></i>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=_<br />  <font color="#808080"><span style="color: #808080">//auxiliary/secondary constructor<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def this</span></font></b>(name:<font color="#4e807d"><span style="color: #4e807d">String</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>gender:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>) ={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>() <font color="#808080"><span style="color: #808080">// primary constructor must be called by auxiliary ones<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">n</span></font></i>=name<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">g</span></font></i>=gender<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(gender==Employee.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">FEMALE</span></font></i>)Employee.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">female</span></font></i>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else </span></font></b>Employee.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">male</span></font></i>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417181383048" ID="ID_1453716400" MODIFIED="1417181701106" TEXT="the whole body of the class is executed when the primary constructor is called at the time the is instantiated"/>
<node CREATED="1417286863977" ID="ID_1867062425" MODIFIED="1417286929788" TEXT="can primary constructor  do some computing besides initialization ? how ?">
<icon BUILTIN="help"/>
</node>
</node>
<node CREATED="1417178380792" FOLDED="true" ID="ID_967216130" MODIFIED="1417287011048" TEXT="{ parameterless , empty parameter list } constructor">
<node CREATED="1417178796197" MODIFIED="1417178796197">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//empty parameter list constructor<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Foo(){}<br /><font color="#808080"><span style="color: #808080">//parameterless constructor<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Bar{}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>TestParamaterlessAndEmptyParameterListConstructor {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>f2=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>f1=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo()<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>b1=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>b2=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar() <font color="#808080"><span style="color: #808080">// different from parameterless method<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417320288000" ID="ID_1675555757" MODIFIED="1417320313407" TEXT="nested class, anonymous class supported"/>
<node CREATED="1417454308488" ID="ID_1521483363" MODIFIED="1417454368260" TEXT="private/protected modifier">
<node CREATED="1417454330860" ID="ID_303806927" MODIFIED="1417454380786" TEXT="private/protected primary constructor"/>
<node CREATED="1417454343295" ID="ID_575202221" MODIFIED="1417454378032" TEXT="object-private/protected"/>
<node CREATED="1417454382559" ID="ID_449185309" MODIFIED="1417454390703" TEXT="class-private/protected"/>
<node CREATED="1417454391987" ID="ID_1508805765" MODIFIED="1417454405456" TEXT="package-private/protected"/>
</node>
</node>
<node CREATED="1417362777011" FOLDED="true" ID="ID_1396255750" MODIFIED="1417362792878" TEXT="object">
<node CREATED="1417111314242" FOLDED="true" ID="ID_1681340916" MODIFIED="1417362763422" TEXT="companion object          -- separate static members from non-static ones">
<node CREATED="1417115793067" FOLDED="true" ID="ID_1797231961" MODIFIED="1417115837811" TEXT="Scala">
<node CREATED="1417115710410" ID="ID_1485036055" MODIFIED="1417115795556">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//primary constructor<br /></span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>class </b></span></font>Employee() {<br />  <font color="#808080"><span style="color: #808080; font-style: italic"><i>/*<br /></i></span><i><span style="color: #808080; font-style: italic">  A variable definition var x: T = _ can appear only as a member of a template. It<br /></span><span style="color: #808080; font-style: italic">  introduces a mutable field with type T and a default initial value. The default value<br /></span><span style="color: #808080; font-style: italic">  depends on the type T as follows:<br /></span><span style="color: #808080; font-style: italic">  0 if T is Int or one of its subrange types,<br /></span><span style="color: #808080; font-style: italic">  0L if T is Long,<br /></span><span style="color: #808080; font-style: italic">  0.0f if T is Float,<br /></span><span style="color: #808080; font-style: italic">  0.0d if T is Double,<br /></span><span style="color: #808080; font-style: italic">  false if T is Boolean,<br /></span><span style="color: #808080; font-style: italic">  () if T is Unit,<br /></span><span style="color: #808080; font-style: italic">  null for all other types T .<br /></span><span style="color: #808080; font-style: italic">  */<br /></span><span style="color: #808080; font-style: italic">  </span></i></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>private var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>n</i></span></font>:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=_<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>private var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>g</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=_<br />  <font color="#808080"><span style="color: #808080">//auxiliary/secondary constructor<br /></span><span style="color: #808080">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def this</b></span></font>(name:<font color="#4e807d"><span style="color: #4e807d">String</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>gender:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>) ={<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>() <font color="#808080"><span style="color: #808080">// primary constructor must be called by auxiliary ones<br /></span><span style="color: #808080">    </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>n</i></span></font>=name<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>g</i></span></font>=gender<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>if </b></span></font>(gender==Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">    </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>else </b></span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>+=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font>}<br />}<br /><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>object </b></span></font>Employee{<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>var </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">summarize</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <span style="font-style: italic"><i>printf</i></span>(<font color="#6a8759"><span style="color: #6a8759">&quot;Total:%d Female:%d Male:%d</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>+<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>)<br />  }<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font>empa=<font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>new </b></span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;Mary&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)<br />    <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font>empb=<font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>new </b></span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;John&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>)<br />    Employee.<span style="font-style: italic"><i>summarize</i></span>()<br />    <font color="#808080"><span style="color: #808080">//val x:Int=_ //WRONG!!!<br /></span><span style="color: #808080">    </span></font><span style="font-style: italic"><i>println</i></span>(x)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417115838196" FOLDED="true" ID="ID_689842141" MODIFIED="1417116266710" TEXT="Java">
<node CREATED="1417116265322" MODIFIED="1417116265322">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Java<br /></span></font><font color="#cc7832"><span style="color: #cc7832">public class </span></font>Employee {<br />    <font color="#cc7832"><span style="color: #cc7832">static final int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static final int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">1</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static int </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>=<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    static public void </span></font><font color="#ffc66d"><span style="color: #ffc66d">summarize</span></font>(){<br />        System.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>out</i></span></font>.printf(<font color="#6a8759"><span style="color: #6a8759">&quot;Total:%d Female:%d Male:%d</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female </i></span></font>+ <font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br /><br />    <font color="#cc7832"><span style="color: #cc7832">private </span></font>String <font color="#9876aa"><span style="color: #9876aa">n</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    private int </span></font><font color="#9876aa"><span style="color: #9876aa">g</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    public </span></font>Employee(String name<font color="#cc7832"><span style="color: #cc7832">,int </span></font>gender){<br />        <font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">n</span></font>=name<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        this</span></font>.<font color="#9876aa"><span style="color: #9876aa">g</span></font>=gender<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        if </span></font>(gender==Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>female</i></span></font>++<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        else </span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>male</i></span></font>++<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br /><br />    <font color="#cc7832"><span style="color: #cc7832">public static void </span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(String args[]){<br />        Employee ea=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;Mary&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>FEMALE</i></span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Employee eb=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Employee(<font color="#6a8759"><span style="color: #6a8759">&quot;John&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>Employee.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>MALE</i></span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Employee.<span style="font-style: italic"><i>summarize</i></span>()<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417111254958" ID="ID_479344968" MODIFIED="1417362790186" TEXT="singleton ">
<node CREATED="1417111305927" ID="ID_63161969" MODIFIED="1417111305927">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>object </b></span></font>HelloWorld {<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <span style="font-style: italic"><i>println</i></span>(<font color="#6a8759"><span style="color: #6a8759">&quot;Hello World!!</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
<node CREATED="1417111534212" FOLDED="true" ID="ID_430027889" MODIFIED="1417112514937" TEXT="ditto static member of a class in Java">
<node CREATED="1417111858890" ID="ID_1961914660" MODIFIED="1417111858890">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#cc7832"><span style="color: #cc7832">public class </span></font>HelloWorld {<br />    <font color="#cc7832"><span style="color: #cc7832">private </span></font>HelloWorld(){}<br />    <font color="#cc7832"><span style="color: #cc7832">public static void </span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(String args[]){<br />        System.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>out</i></span></font>.println(<font color="#6a8759"><span style="color: #6a8759">&quot;Hello World!!</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417111867558" FOLDED="true" ID="ID_1146086564" MODIFIED="1417112513269" TEXT="singleton  Scala vs. Java">
<node CREATED="1417112249184" ID="ID_553009917" MODIFIED="1417112249184">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Scala<br /></span></font><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>object  </b></span></font>Singleton {<br />  <font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><font color="#ffc66d"><span style="color: #ffc66d">do_something</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <span style="font-style: italic"><i>println</i></span>(<font color="#6a8759"><span style="color: #6a8759">&quot;Singleton.do_something()...&quot;</span></font>)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
<node CREATED="1417112509090" MODIFIED="1417112509090">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="background-color: #2b2b2b; font-family: Courier New; color: #a9b7c6; font-size: 16pt"><font color="#808080"><span style="color: #808080">//in Java<br /></span></font><font color="#cc7832"><span style="color: #cc7832">public class </span></font>Singleton {<br />    <font color="#cc7832"><span style="color: #cc7832">private static </span></font>Singleton <font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>instance</i></span></font>=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Singleton()<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    private </span></font>Singleton(){}<br />    <font color="#cc7832"><span style="color: #cc7832">public static </span></font>Singleton <font color="#ffc66d"><span style="color: #ffc66d">getInstance</span></font>(){<br />        <font color="#cc7832"><span style="color: #cc7832">return </span></font><font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>instance</i></span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />    <font color="#cc7832"><span style="color: #cc7832">void </span></font><font color="#ffc66d"><span style="color: #ffc66d">do_something</span></font>(){<br />        System.<font color="#9876aa"><span style="color: #9876aa; font-style: italic"><i>out</i></span></font>.println(<font color="#6a8759"><span style="color: #6a8759">&quot;Singleton.do_something()...&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417116300857" ID="ID_1571945670" MODIFIED="1417363004408" TEXT="trait">
<node CREATED="1417362318611" ID="ID_1968450163" MODIFIED="1417362721781" TEXT="have no constructor"/>
<node CREATED="1417362722722" ID="ID_1298212391" MODIFIED="1417362840787" TEXT="only traits can be mixins"/>
<node CREATED="1417362826919" ID="ID_150744408" MODIFIED="1417362828025" TEXT="used in all contexts where other abstract classes appear"/>
</node>
<node CREATED="1417116305528" ID="ID_739954438" MODIFIED="1417178374807" TEXT="abstract class vs. trat"/>
</node>
<node CREATED="1417363006501" ID="ID_1001774296" MODIFIED="1417447599046" TEXT="mixin ; multiple inheritance ; class linearization">
<node CREATED="1417363011634" FOLDED="true" ID="ID_1946882913" MODIFIED="1417363149456" TEXT="what&apos;s mixins means?">
<node CREATED="1417363023562" ID="ID_171792168" MODIFIED="1417363033207" TEXT="reuse the delta of a class definition"/>
<node CREATED="1417363035118" ID="ID_1675965941" MODIFIED="1417363049264" TEXT="stackable modification"/>
<node CREATED="1417363050783" ID="ID_1679556694" MODIFIED="1417363062038" TEXT="decorator pattern"/>
</node>
<node CREATED="1417363150332" FOLDED="true" ID="ID_1150370465" MODIFIED="1417454214680" TEXT="multiple inheritance">
<node CREATED="1417363541939" ID="ID_1592215297" MODIFIED="1417363924390" TEXT="MRO(Method Resolution Order) / super call resolution">
<node CREATED="1417363591073" ID="ID_1875537965" MODIFIED="1417363962728" TEXT="partial-order set  (base classes / supertype set, &lt;:) ==linearization==&gt; linear/total-order set"/>
</node>
</node>
<node CREATED="1417364142348" ID="ID_1137864236" MODIFIED="1417625927445" TEXT="linearization L(C)">
<node CREATED="1417364036878" ID="ID_386558303" MODIFIED="1417364155637" TEXT="class C extends B0 with B1. . . with Bn { . . . } "/>
<node CREATED="1417364156673" FOLDED="true" ID="ID_803837714" MODIFIED="1417366467271" TEXT="recursive definition">
<node CREATED="1417366365915" ID="ID_453756061" MODIFIED="1417366366953" TEXT="1.">
<node CREATED="1417366258744" ID="ID_658758257" MODIFIED="1417366454789" TEXT="starts with the linearization of the C&apos;s superclass B0. This will form the last part of the linearization of C."/>
</node>
<node CREATED="1417366371105" ID="ID_1582509761" MODIFIED="1417366373339" TEXT="2.">
<node CREATED="1417366272526" ID="ID_24791714" MODIFIED="1417366385841" TEXT="then prefixes to this all classes in the linearization of the first mixin class B1, except those classes that are already in the constructed linearization because they were inherited from B0. "/>
</node>
<node CREATED="1417366411352" ID="ID_263654931" MODIFIED="1417366412445" TEXT="3.">
<node CREATED="1417366413615" ID="ID_1421890325" MODIFIED="1417366414690" TEXT="One continues like this for all other mixin classes B2, . . . , Bn, adding only those classes that are not yet in the constructed linearization. "/>
</node>
<node CREATED="1417366425831" ID="ID_259163295" MODIFIED="1417366427954" TEXT="4.">
<node CREATED="1417366429227" ID="ID_555954067" MODIFIED="1417366462831" TEXT="Finally, one takes C itself as &#x1c;first class of the linearization of C."/>
</node>
</node>
<node CREATED="1417366604977" ID="ID_1659893560" MODIFIED="1417447789376" TEXT="three properties">
<node CREATED="1417366612238" ID="ID_1986243205" MODIFIED="1417366850192" TEXT="if C is a subclass of D, then C precedes D in any linearization where both C and D occur. "/>
<node CREATED="1417366639091" ID="ID_1899176640" MODIFIED="1417366646455" TEXT="a linearization of a class always contains the linearization of its direct superclass as a suffix. "/>
<node CREATED="1417366814516" ID="ID_1795547518" MODIFIED="1417366891225" TEXT="It is also possible that classes of the linearization of a mixin class appear in different order in the linearization of an inheriting class"/>
</node>
</node>
<node CREATED="1417420778001" ID="ID_1341061256" MODIFIED="1417454206047" TEXT="super call">
<node CREATED="1417420784527" ID="ID_1641765102" MODIFIED="1417421703390" TEXT="paternity super call /vertical ">
<node CREATED="1417421340477" ID="ID_300540163" MODIFIED="1417421573408" TEXT="super.M in C is resolved to be an method of its direct base class B"/>
</node>
<node CREATED="1417420799039" ID="ID_1416495458" MODIFIED="1417421677893" TEXT="sibling super call /horizontal">
<node CREATED="1417421433129" ID="ID_902063039" MODIFIED="1417421643950" TEXT="super.M  in C is resolved to be an method of its sibling B, exists D C&lt;:D and B&lt;:D"/>
</node>
<node CREATED="1417421683797" ID="ID_1452591343" MODIFIED="1417421750310" TEXT="&apos;abstract override&apos; modifier designates sibling super call"/>
<node CREATED="1417421752857" FOLDED="true" ID="ID_921900969" MODIFIED="1417454209613" TEXT="demo">
<node CREATED="1417422733363" MODIFIED="1417422733363">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-family: Courier New; color: #a9b7c6; font-size: 17pt; background-color: #2b2b2b"><span style="font-style: italic; color: #629755"><i><font color="#629755">/**<br /></font></i></span><i><font color="#629755"><span style="font-style: italic; color: #629755"> * Created by satanson on 2014/12/1.<br /></span><span style="font-style: italic; color: #629755"> */<br /></span></font></i><span style="color: #808080"><font color="#808080">//in Scala<br /></font></span><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">trait </font></b></span>AbsIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">hasNext</font></span>:<span style="color: #cc7832"><font color="#cc7832">Boolean<br /></font></span><font color="#cc7832"><span style="color: #cc7832">  </span><span style="font-weight: bold; color: #cc7832"><b>def </b></span></font><span style="color: #ffc66d"><font color="#ffc66d">next</font></span>:<span style="color: #4e807d"><font color="#4e807d">T<br /></font></span>}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">trait </font></b></span>RichIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>AbsIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">foreach</font></span>(f:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=&gt;<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>= <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">while</font></b></span>(hasNext)f(next)<br />}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">class </font></b></span>StringIterator(s:<span style="color: #4e807d"><font color="#4e807d">String</font></span>) <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>AbsIterator[<span style="color: #cc7832"><font color="#cc7832">Char</font></span>]{<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">private var </font></b></span><span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">i</font></i></span>=<span style="color: #6897bb"><font color="#6897bb">0<br /></font></span><font color="#6897bb"><span style="color: #6897bb">  </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">hasNext</font></span>=<span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">i</font></i></span>&lt;s.length<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">next</font></span>={<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">val </font></b></span>x=s charAt <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">i</font></i></span><span style="color: #cc7832"><font color="#cc7832">;</font></span><span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">i</font></i></span>+=<span style="color: #6897bb"><font color="#6897bb">1</font></span><span style="color: #cc7832"><font color="#cc7832">;</font></span>x}<br />}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">trait </font></b></span>SyncIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>AbsIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {<br />  <span style="color: #808080"><font color="#808080">//sibling super call<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">override abstract def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">hasNext</font></span>:<span style="color: #cc7832"><font color="#cc7832">Boolean</font></span>={<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">try </font></b></span>{<br />      <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;SyncIterator:lock&quot;</font></span>)<br />      synchronized(<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">super</font></b></span>.hasNext)<br />    }<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">finally</font></b></span>{<br />      <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;SyncIterator:unlock&quot;</font></span>)<br />    }<br />  }<br />  <span style="color: #808080"><font color="#808080">//sibling super call<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">override abstract def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">next</font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>={<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">try </font></b></span>{<br />      <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;SyncIterator:lock&quot;</font></span>)<br />      <span style="color: #808080"><font color="#808080">//super.next is not AbsIterator.next<br /></font></span><font color="#808080"><span style="color: #808080">      //resolution has to be deferred to the pointer<br /></span><span style="color: #808080">      //where a class is instantiated or inherited<br /></span><span style="color: #808080">      </span></font>synchronized(<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">super</font></b></span>.next)<br />    }<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">finally</font></b></span>{<br />      <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;SyncIterator:unlock&quot;</font></span>)<br />    }<br />  }<br />}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">trait </font></b></span>LoggedIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>AbsIterator[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]{<br />  <span style="color: #808080"><font color="#808080">//sibling super call<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">abstract override def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">next</font></span>:<span style="color: #4e807d"><font color="#4e807d">T </font></span>= {<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">val </font></b></span>x = <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">super</font></b></span>.next<span style="color: #cc7832"><font color="#cc7832">;</font></span><span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;get:&quot;</font></span>+x)<span style="color: #cc7832"><font color="#cc7832">;</font></span>x<br />  }<br />}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">object </font></b></span>Iterator{<br /><br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="color: #808080"><font color="#808080">//Linearization of Iter:<br /></font></span><font color="#808080"><span style="color: #808080">    //[Iter,SyncIterator,LoggedIterator,RichIterator,<br /></span><span style="color: #808080">    // StringIterator,AbsIterator,AnyRef,Any]<br /></span><span style="color: #808080">    </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">class </font></b></span>Iter  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>StringIterator(<span style="color: #6a8759"><font color="#6a8759">&quot;foobar&quot;</font></span>)<br />                <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">with </font></b></span>RichIterator[<span style="color: #cc7832"><font color="#cc7832">Char</font></span>]<br />    <span style="color: #808080"><font color="#808080">//in LoggedIterator.next:<br /></font></span><font color="#808080"><span style="color: #808080">    //super.next is StringIterator.next<br /></span><span style="color: #808080">                </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">with </font></b></span>LoggedIterator[<span style="color: #cc7832"><font color="#cc7832">Char</font></span>]<br />    <span style="color: #808080"><font color="#808080">//in SyncIterator.next:<br /></font></span><font color="#808080"><span style="color: #808080">    //super.next is LoggedIterator.next<br /></span><span style="color: #808080">                </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">with </font></b></span>SyncIterator[<span style="color: #cc7832"><font color="#cc7832">Char</font></span>]<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">val </font></b></span>iter = <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">new </font></b></span>Iter<br />    iter foreach {x=&gt;<span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;access: &quot;</font></span>+x)}<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417423734350" FOLDED="true" ID="ID_325389445" MODIFIED="1417454207829" TEXT="Service-Oriented Component Model">
<node CREATED="1417423757992" ID="ID_633338199" MODIFIED="1417423839293" TEXT="abstraction; component"/>
<node CREATED="1417424175039" FOLDED="true" ID="ID_1073266636" MODIFIED="1417424302619" TEXT="Open/closed principle">
<node CREATED="1417424217340" ID="ID_527714565" MODIFIED="1417424218223" TEXT="Object-Oriented Software Construction"/>
<node CREATED="1417424237187" ID="ID_1024368563" MODIFIED="1417424238747" TEXT="software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification"/>
</node>
<node CREATED="1417424303261" FOLDED="true" ID="ID_1922997878" MODIFIED="1417424472562" TEXT="software components">
<node CREATED="1417424326074" ID="ID_1239140331" MODIFIED="1417424378146" TEXT="units of computation that provide well-defined set of services"/>
<node CREATED="1417424378678" ID="ID_1152712979" MODIFIED="1417424456058" TEXT="Typically, a software component is not self-contained; i.e., its service implementations rely on a set of required services provided by other cooperating components"/>
</node>
<node CREATED="1417424472979" ID="ID_1396094548" MODIFIED="1417424485279" TEXT="provided services">
<node CREATED="1417424493761" ID="ID_727067698" MODIFIED="1417424506932" TEXT="concrete members of class or traits"/>
</node>
<node CREATED="1417424485985" FOLDED="true" ID="ID_662480352" MODIFIED="1417424550409" TEXT="required services">
<node CREATED="1417424508242" ID="ID_537524536" MODIFIED="1417424530204" TEXT="deferred members"/>
</node>
<node CREATED="1417424553474" ID="ID_477242620" MODIFIED="1417424558446" TEXT="composition">
<node CREATED="1417424559686" ID="ID_915484829" MODIFIED="1417424610553" TEXT="based on mixins, which allow programmers to create bigger components from small ones"/>
</node>
<node CREATED="1417424611740" ID="ID_410208038" MODIFIED="1417424738773" TEXT="smooth incremental software evolution process"/>
</node>
</node>
<node CREATED="1417185240106" FOLDED="true" ID="ID_292746567" MODIFIED="1417292875048" TEXT="Everything Is an Object">
<node CREATED="1417176737262" FOLDED="true" ID="ID_22434113" MODIFIED="1417195782856" TEXT="Operations Are Methods">
<node CREATED="1417185585491" ID="ID_1132312685" MODIFIED="1417185645997" TEXT="operations are method per se">
<node CREATED="1417176744434" FOLDED="true" ID="ID_316435437" MODIFIED="1417185738342" TEXT="every operation is a message send, ditto, the invocation of a method.">
<node CREATED="1417176811323" ID="ID_1255162307" MODIFIED="1417176837128" TEXT="x + y interpreted as x.+(y)"/>
<node CREATED="1417176884895" ID="ID_1295806891" MODIFIED="1417176895479" TEXT="originate from Smalltalk"/>
</node>
<node CREATED="1417176953589" FOLDED="true" ID="ID_1029578384" MODIFIED="1417185747570" TEXT="scala treats operator names as ordinary identifiers.">
<node CREATED="1417177006160" ID="ID_540818170" MODIFIED="1417177017668" TEXT="identifiers">
<node CREATED="1417177018733" ID="ID_1954308595" MODIFIED="1417177284403" TEXT="\w[\d\w]*"/>
<node CREATED="1417177286150" ID="ID_30685616" MODIFIED="1417177325220" TEXT="sequence of operators characters  -- used as method name"/>
</node>
</node>
</node>
<node CREATED="1417185665051" ID="ID_457512058" MODIFIED="1417185776936" TEXT="infix operators are syntactic sugar ">
<node CREATED="1417184099660" ID="ID_177494545" MODIFIED="1417185805585" TEXT="infix operator">
<node CREATED="1417177328547" ID="ID_533389141" MODIFIED="1417184106490" TEXT="syntactic sugar: ( arg.startWith(&quot;-&quot;) ) can be used in operator syntax ( arg startWith &quot;-&quot; )"/>
<node CREATED="1417182307358" ID="ID_1518849827" MODIFIED="1417185809951" TEXT="associativities and precedences of infix operator">
<node CREATED="1417182365421" FOLDED="true" ID="ID_1708436602" MODIFIED="1417183100802" TEXT="precedences determined by its first char">
<node CREATED="1417182682522" ID="ID_1517606373" MODIFIED="1417182682522">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New">(all letters)<br />|<br />^<br />&amp;<br />&lt; &gt;<br />= !<br />:<br />+ -<br />* / %<br />(all other special characters)</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417182700193" FOLDED="true" ID="ID_1370394624" MODIFIED="1417183099535" TEXT="associativity ">
<node CREATED="1417182954661" ID="ID_640979573" MODIFIED="1417182961998" TEXT="operators are usually left-associative "/>
<node CREATED="1417182963455" ID="ID_1829743087" MODIFIED="1417182977022" TEXT="operators ending in colon(:) is right-associative">
<node CREATED="1417182993605" ID="ID_1379022202" MODIFIED="1417183031638" TEXT="right-associative operators take their right operand as receiver."/>
<node CREATED="1417183032090" ID="ID_420681320" MODIFIED="1417183061680" TEXT="x::y::zs means zx.::(y).::(x)  "/>
</node>
</node>
</node>
</node>
<node CREATED="1417184257689" FOLDED="true" ID="ID_589531110" MODIFIED="1417185804242" TEXT="dereferencing and assignment are operations">
<node CREATED="1417185150931" MODIFIED="1417185150931">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Foobar[<font color="#4e807d"><span style="color: #4e807d">T</span></font>](init:<font color="#4e807d"><span style="color: #4e807d">T</span></font>) {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">x</span></font></i>:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=init<br />  <font color="#808080"><span style="color: #808080">// Scala auto-gen setter and getter method as fellows<br /></span><span style="color: #808080">  // def x:T // getter<br /></span><span style="color: #808080">  // def x_=(newval:T):Unit // setter<br /></span></font>}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Celsius{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">private var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">d</span></font></i>: <font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">degree</span></font>:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">d<br /></span><span style="color: #9876aa; font-style: italic">  </span></font></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">degree_=</span></font>(x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>= <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(x &gt;= -<font color="#6897bb"><span style="color: #6897bb">273</span></font>) <i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">d</span></font></i>=x<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>Foobar{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fb: Foobar[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foobar[<font color="#4e807d"><span style="color: #4e807d">String</span></font>](<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font>)<br />    <i><span style="font-style: italic">println</span></i>(fb.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">x</span></font></i>)<font color="#808080"><span style="color: #808080">// print: &quot;foobar&quot;<br /></span><span style="color: #808080">    </span></font>fb.x_=(<font color="#6a8759"><span style="color: #6a8759">&quot;deadbeef&quot;</span></font>)<font color="#808080"><span style="color: #808080">// ditto: fb.x=&quot;deadbeef&quot;<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fb.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">x</span></font></i>) <font color="#808080"><span style="color: #808080">// print: &quot;deadbeef&quot;<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>C:Celsius=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Celsius<br />    C.degree=<font color="#6897bb"><span style="color: #6897bb">10 </span></font><font color="#808080"><span style="color: #808080">//ditto: C.degree_=(10)<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(C.degree) <font color="#808080"><span style="color: #808080">// print: 10<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417185261727" ID="ID_1738360551" MODIFIED="1417198369427" TEXT="Methods Are Function Values">
<node CREATED="1417177556059" FOLDED="true" ID="ID_1036116631" MODIFIED="1417185781273" TEXT="parameterless methods vs. empty parameter list () method ">
<node CREATED="1417178065249" MODIFIED="1417178065249">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>ParameterlessMethod {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">foobar</span></font>:<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <i><span style="font-style: italic">print </span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;Parameterless Method is called with no argument list passed</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">deadbeef</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <i><span style="font-style: italic">print </span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;Method is called with no argument passed or with '()'</span></font><font color="#cc7832"><span style="color: #cc7832">\n</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font>)<br />  }<br />}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>ParameterlessMethod{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b>a:ParameterlessMethod  = <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>ParameterlessMethod<br />    a.foobar<br />    <font color="#808080"><span style="color: #808080">//a.foobar()//WRONT<br /></span><span style="color: #808080">    </span></font>a.deadbeef()<br />    a.deadbeef <br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417183102075" ID="ID_1948637485" MODIFIED="1417198372094" TEXT="pass argu by name/reference or by value">
<node CREATED="1417183136817" ID="ID_385692416" MODIFIED="1417183964967" TEXT="by value"/>
<node CREATED="1417183142568" ID="ID_1782348069" MODIFIED="1417185846033" TEXT="by name &apos;=&gt;&apos;">
<node CREATED="1417185843901" FOLDED="true" ID="ID_749286006" MODIFIED="1417185849994" TEXT="demo">
<node CREATED="1417183951305" ID="ID_955240890" MODIFIED="1417185847547">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">// short-circuit operators &amp;&amp; ||<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">abstract class </span></font></b>SCBool {<br />  <font color="#808080"><span style="color: #808080">// '=&gt;' means arg passed by name/reference<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">&amp;&amp; </span></font>(x: =&gt; SCBool):SCBool<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">|| </span></font>(x: =&gt; SCBool):SCBool<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>SCFalse <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>SCBool{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">&amp;&amp; </span></font>(x: =&gt; SCBool):SCBool=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this<br /></span><span style="color: #cc7832; font-weight: bold">  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">|| </span></font>(x: =&gt; SCBool):SCBool=x<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String </span></font>= <font color="#6a8759"><span style="color: #6a8759">&quot;False&quot;<br /></span></font>}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>SCTrue <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">extends </span></font></b>SCBool{<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">&amp;&amp; </span></font>(x: =&gt; SCBool):SCBool=x<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">|| </span></font>(x: =&gt; SCBool):SCBool=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this<br /></span><span style="color: #cc7832; font-weight: bold">  override  def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">toString</span></font>:<font color="#4e807d"><span style="color: #4e807d">String </span></font>= <font color="#6a8759"><span style="color: #6a8759">&quot;True&quot;<br /></span></font>}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>Bool {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">&amp;&amp;</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">&amp;&amp;</span></i>SCTrue)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">&amp;&amp;</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">&amp;&amp;</span></i>SCTrue)<br /><br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">||</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCFalse<i><span style="font-style: italic">||</span></i>SCTrue)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">||</span></i>SCFalse)<br />    <i><span style="font-style: italic">println</span></i>(SCTrue<i><span style="font-style: italic">||</span></i>SCTrue)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417185851238" ID="ID_285748116" MODIFIED="1417186003983" TEXT="x: =&gt;T  ">
<node CREATED="1417185916328" ID="ID_1993976387" MODIFIED="1417185935854" TEXT="x: _=&gt;T"/>
<node CREATED="1417185929096" ID="ID_311087571" MODIFIED="1417185998639" TEXT="x:: \_-&gt;T     -- in haskell"/>
</node>
</node>
</node>
<node CREATED="1417286301833" ID="ID_1171289340" MODIFIED="1417286315884" TEXT="what&apos;s the type of the class/instance method, does a method take is method receiver in an account?">
<icon BUILTIN="help"/>
<node CREATED="1417286339728" ID="ID_240515149" MODIFIED="1417286372596" TEXT="singleton object &apos;s method is function"/>
<node CREATED="1417286377010" ID="ID_1433370358" MODIFIED="1417286451551" TEXT="but How the instance method ? e.g. String.startsWith(String):Boolean">
<node CREATED="1417286453355" ID="ID_1679101220" MODIFIED="1417286472320" TEXT="(String,String)=&gt;Boolean"/>
<node CREATED="1417286472742" ID="ID_556102337" MODIFIED="1417286489870" TEXT="String=&gt;Boolean"/>
</node>
</node>
</node>
<node CREATED="1417185275821" ID="ID_1700731342" MODIFIED="1417185357881" TEXT="Funtions Are Objects">
<node CREATED="1417286332711" ID="ID_1354801812" MODIFIED="1417286743657" TEXT="anonymous functions are objects">
<node CREATED="1417286745491" ID="ID_1745247823" MODIFIED="1417286766861" TEXT="(x:Int)=&gt;x+1"/>
</node>
<node CREATED="1417287033479" ID="ID_1895667071" MODIFIED="1417287391106" TEXT="Array[T] extends Function2[int,T]  -- WRONG in &quot;scala over view&quot;">
<node CREATED="1417287065790" ID="ID_697003428" MODIFIED="1417287471480" TEXT="Array is mutable, T is type of its element, so is both input and output parameter"/>
<node CREATED="1417287480080" ID="ID_799177440" MODIFIED="1417287554843" TEXT="Array.apply(i: Int):T">
<node CREATED="1417287591497" ID="ID_855886856" MODIFIED="1417287610700" TEXT="val elem:T=array(i)"/>
</node>
<node CREATED="1417287498278" ID="ID_1062542945" MODIFIED="1417287567588" TEXT="Array.apply(i:Int, x:T):Unit">
<node CREATED="1417287621403" ID="ID_449773000" MODIFIED="1417287648347" TEXT="array(i)=value"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1417317072305" FOLDED="true" ID="ID_1189806649" MODIFIED="1417361995167" TEXT="abstract type(family polymorphism) [vObj calculus]">
<node CREATED="1417320381952" FOLDED="true" ID="ID_1195899347" MODIFIED="1417322132381" TEXT="demo">
<node CREATED="1417321901156" ID="ID_76271161" MODIFIED="1417321901156">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #808080"><font color="#808080">//in Scala<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>AbsCell {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">T </font></span><span style="color: #808080"><font color="#808080">//abstract type member,type declaration<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>init:<span style="color: #4e807d"><font color="#4e807d">T<br /></font></span><font color="#4e807d"><span style="color: #4e807d">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>protected var </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>value</i></font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=init<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">get</font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>value<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">  </span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">set</font></span>(x:<span style="color: #4e807d"><font color="#4e807d">T</font></span>):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>value</i></font></span>=x}<br />}<br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>AbsCell {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="color: #808080"><font color="#808080">//Just like anonymous class in Java<br /></font></span><font color="#808080"><span style="color: #808080">    //But Scala supports abstract type member<br /></span><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>cell1=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>AbsCell{<br />      <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>=<span style="color: #cc7832"><font color="#cc7832">Int </font></span><span style="color: #808080"><font color="#808080">//type alias/ type definition<br /></font></span><font color="#808080"><span style="color: #808080">      </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>init</i></font></span>=<span style="color: #6897bb"><font color="#6897bb">10<br /></font></span><font color="#6897bb"><span style="color: #6897bb">    </span></font>}<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>cell2=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>AbsCell{<br />      <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>=<span style="color: #4e807d"><font color="#4e807d">String</font></span><span style="color: #cc7832"><font color="#cc7832">;<br /></font></span><font color="#cc7832"><span style="color: #cc7832">      </span><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>init</i></font></span>=<span style="color: #6a8759"><font color="#6a8759">&quot;null&quot;<br /></font></span><font color="#6a8759"><span style="color: #6a8759">      </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>override def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">get</font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=<span style="color: #6a8759"><font color="#6a8759">&quot;string:&quot;</font></span>+<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>value<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">    </span></i></font>}<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>cells=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>List</i></font></span>(cell1<span style="color: #cc7832"><font color="#cc7832">,</font></span>cell2)<br />    <span style="color: #808080"><font color="#808080">//intuitively,<br /></font></span><font color="#808080"><span style="color: #808080">    //the type of cell1.get: ()=&gt;Int<br /></span><span style="color: #808080">    //the type of cell2.get: ()=&gt;String<br /></span><span style="color: #808080">    //but their types match c.get<br /></span><span style="color: #808080">    //here use 'path dependent type' concept<br /></span><span style="color: #808080">    //actually,for all of them<br /></span><span style="color: #808080">    //get:()=&gt;c.T or ()=&gt;this.type#T<br /></span><span style="color: #808080">    //set:c.T=&gt;Unit  this.type#T=&gt;Unit<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>for</b></font></span>(c&lt;-cells)<span style="font-style: italic"><i>println</i></span>(c.get)<br />    cell1.set(<span style="color: #6897bb"><font color="#6897bb">10</font></span>)<br />    cell2.set(<span style="color: #6a8759"><font color="#6a8759">&quot;string&quot;</font></span>)<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>for</b></font></span>(c&lt;-cells)<span style="font-style: italic"><i>println</i></span>(c.get)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417320401014" ID="ID_1547547794" MODIFIED="1417323446709" TEXT="path dependent type [vObj calculus] x.y.z.T">
<node CREATED="1417323393924" FOLDED="true" ID="ID_847590605" MODIFIED="1417323415355" TEXT="demo">
<node CREATED="1417323385291" ID="ID_105317111" MODIFIED="1417323397095">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>X{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">T<br /></font></span><font color="#4e807d"><span style="color: #4e807d">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>x:<span style="color: #4e807d"><font color="#4e807d">T<br /></font></span>}<br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>PathDependentType {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>= {<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>x = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>X {<br />      <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">T </font></span>= X<br />      <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>: <span style="color: #4e807d"><font color="#4e807d">T </font></span>= <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>X {<br />        <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">T </font></span>= <span style="color: #cc7832"><font color="#cc7832">Int<br /></font></span><font color="#cc7832"><span style="color: #cc7832">        </span><span style="color: #cc7832; font-weight: bold"><b>val </b></span></font><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>: <span style="color: #4e807d"><font color="#4e807d">T </font></span>= <span style="color: #6897bb"><font color="#6897bb">10<br /></font></span><font color="#6897bb"><span style="color: #6897bb">      </span></font>}<br />    }<br />    <span style="font-style: italic"><i>println</i></span>(x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>.x)<br />    <span style="color: #808080"><font color="#808080">//path dependent type<br /></font></span><font color="#808080"><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>y1:x.<span style="color: #4e807d"><font color="#4e807d">T</font></span>=x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">    </span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>y2:x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>.<span style="color: #4e807d"><font color="#4e807d">T</font></span>=x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>.x<br />    <span style="color: #808080"><font color="#808080">//ditto,type selection &amp; singleton type<br /></font></span><font color="#808080"><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>z1:x.<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type</b></font></span>#<span style="color: #4e807d"><font color="#4e807d">T</font></span>=x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">    </span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>z2:x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>.<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type</b></font></span>#<span style="color: #4e807d"><font color="#4e807d">T</font></span>=x.<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>x</i></font></span>.x<br />    <span style="font-style: italic"><i>println</i></span>(y1)<br />    <span style="font-style: italic"><i>println</i></span>(y2)<br />    <span style="font-style: italic"><i>println</i></span>(z1)<br />    <span style="font-style: italic"><i>println</i></span>(z2)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417323534803" ID="ID_1963979725" MODIFIED="1417323565148" TEXT="PDT depends on immutable prefix path"/>
</node>
<node CREATED="1417322011222" ID="ID_1225539619" MODIFIED="1417323497063" TEXT="type selection and singleton type [Kim Bruce&apos;s mytype]  x.y.z.type#T"/>
<node CREATED="1417337509683" ID="ID_1708947448" MODIFIED="1417352337936" TEXT="self type">
<node CREATED="1417337521376" FOLDED="true" ID="ID_883376300" MODIFIED="1417353831769" TEXT="demo">
<node CREATED="1417353831024" MODIFIED="1417353831024">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>SubjectObserver {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">S </font></span>&lt;: Subject<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">O </font></span>&lt;: Observer<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>Subject {<br />    <span style="color: #808080"><font color="#808080">// through Subject.this.type should be S<br /></font></span><font color="#808080"><span style="color: #808080">    // (Actually,refining of abstract class will do this),<br /></span><span style="color: #808080">    // however, in abstract class's view, it known Nothing.<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    // self is identical to this<br /></span><span style="color: #808080">    // this/self:S,'self:S=&gt;' takes effect<br /></span><span style="color: #808080">    // this:Subject.this.type, if 'self:S=&gt;' absent<br /></span><span style="color: #808080">    </span></font>self: <span style="color: #4e807d"><font color="#4e807d">S </font></span>=&gt; <span style="color: #808080"><font color="#808080">//'this:S=&gt;' ditto <br /></font></span><font color="#808080"><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private var </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>observers</i></font></span>: <span style="color: #4e807d"><font color="#4e807d">List</font></span>[<span style="color: #4e807d"><font color="#4e807d">O</font></span>] = <span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>List</i></font></span>()<br /><br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">subscribe</font></span>(obs: <span style="color: #4e807d"><font color="#4e807d">O</font></span>) =<br />      <span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>observers </i></font></span>= obs :: <span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>observers<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic"><br /></span><span style="color: #9876aa; font-style: italic">    </span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">publish </font></span>=<br />    <span style="color: #808080"><font color="#808080">//ditto: obs.notify(self)<br /></font></span><font color="#808080"><span style="color: #808080">      </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>for </b></font></span>(obs &lt;- <span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>observers</i></font></span>) obs.notify(<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>this</b></font></span>)<br /><br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">fetch</font></span>: <span style="color: #4e807d"><font color="#4e807d">String </font></span>= <span style="font-style: italic"><i>???<br /></i></span><i><span style="font-style: italic">  </span></i>}<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>trait </b></font></span>Observer {<br />    <span style="color: #808080"><font color="#808080">//SubjectObserver.this#S<br /></font></span><font color="#808080"><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">notify</font></span>(sub: <span style="color: #4e807d"><font color="#4e807d">S</font></span>): <span style="color: #cc7832"><font color="#cc7832">Unit<br /></font></span><font color="#cc7832"><span style="color: #cc7832">  </span></font>}<br /><br />}<br /><br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>NewsPaperSubjectObserver <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>SubjectObserver {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">S </font></span>= NewsPaperSubject<br />  <span style="color: #808080"><font color="#808080">//refining<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">O </font></span>= NewsPaperObserver<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>NewsPaperSubject <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>Subject {<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>override def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">fetch</font></span>: <span style="color: #4e807d"><font color="#4e807d">String </font></span>= <span style="color: #6a8759"><font color="#6a8759">&quot;Self type is useful&quot;<br /></font></span><font color="#6a8759"><span style="color: #6a8759">  </span></font>}<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>NewsPaperObserver <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>Observer {<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">notify</font></span>(sub: <span style="color: #4e807d"><font color="#4e807d">S</font></span>): <span style="color: #cc7832"><font color="#cc7832">Unit </font></span>= {<br />      <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;News:&quot; </font></span>+ sub.fetch)<br />    }<br />  }<br />}<br /><br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>SelfType {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args: Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]): <span style="color: #cc7832"><font color="#cc7832">Unit </font></span>= {<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>subpub = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>NewsPaperSubjectObserver<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>sub = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>subpub.NewsPaperSubject<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>pub = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>subpub.NewsPaperObserver<br />    sub.subscribe(pub)<br />    sub.publish<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417354116571" FOLDED="true" ID="ID_343926487" MODIFIED="1417355140276" TEXT="scala specification">
<node CREATED="1417355123373" ID="ID_993052614" MODIFIED="1417355123373">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #808080; font-style: italic"><font color="#808080"><i>/*<br /></i></font></span><font color="#808080"><i><span style="color: #808080; font-style: italic">The sequence of template statements may be prefixed with a formal<br /></span><span style="color: #808080; font-style: italic">parameter definition and an arrow, e.g. x =&gt;, or x:T =&gt;. If a formal<br /></span><span style="color: #808080; font-style: italic">parameter is given, it can be used as an alias for the reference<br /></span><span style="color: #808080; font-style: italic">this throughout the body of the template. <br /></span><span style="color: #808080; font-style: italic">  If the formal parameter comes with a type T , this definition<br /></span><span style="color: #808080; font-style: italic">affects the self type S of the underlying class or object as follows:<br /></span><span style="color: #808080; font-style: italic">Let C be the type of the class or trait or object defining the template.<br /></span><span style="color: #808080; font-style: italic">  If a type T is given for the formal self parameter, S is the greatest<br /></span><span style="color: #808080; font-style: italic">lower bound of T and C. If no type T is given, S is just C. Inside the<br /></span><span style="color: #808080; font-style: italic">template, the type of this is assumed to be S.  The self type of<br /></span><span style="color: #808080; font-style: italic">a class or object must conform to the self types of all classes<br /></span><span style="color: #808080; font-style: italic">which are inherited by the template t .<br /></span><span style="color: #808080; font-style: italic">  A second form of self type annotation reads just this: S =&gt;. It<br /></span><span style="color: #808080; font-style: italic">prescribes the type S for this without introducing an alias name for it.<br /></span><span style="color: #808080; font-style: italic">*/</span></i></font></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417352358169" ID="ID_412679518" MODIFIED="1417355143770" TEXT="Self-type mismatch in Scala">
<node CREATED="1417352517240" ID="ID_1481789665" MODIFIED="1417352525775" TEXT="http://stackoverflow.com/questions/2810859/self-type-mismatch-in-scala"/>
<node CREATED="1417352509661" FOLDED="true" ID="ID_947630448" MODIFIED="1417353645086" TEXT="question">
<node CREATED="1417353644059" MODIFIED="1417353644059">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>ViewPresenterPair {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">V </font></span>&lt;: View<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">P </font></span>&lt;: Presenter<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>trait </b></font></span>View {self: <span style="color: #4e807d"><font color="#4e807d">V </font></span>=&gt;<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>presenter: <span style="color: #4e807d"><font color="#4e807d">P<br /></font></span><font color="#4e807d"><span style="color: #4e807d">  </span></font>}<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>trait </b></font></span>Presenter {self: <span style="color: #4e807d"><font color="#4e807d">P </font></span>=&gt;<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span>view: <span style="color: #4e807d"><font color="#4e807d">V<br /></font></span><font color="#4e807d"><span style="color: #4e807d">  </span></font>}<br />}<br /><br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>case class </b></font></span>SensorViewPresenter[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>ViewPresenterPair {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">V </font></span>= SensorView[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="color: #808080"><font color="#808080">// SensorView[T] is template specialization<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">P </font></span>= SensorPresenter[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]<br />  <span style="color: #808080"><font color="#808080">// SensorView[T] is template definition<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>trait </b></font></span>SensorView[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>View {<br />  }<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>SensorViewImpl[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>presenter: <span style="color: #4e807d"><font color="#4e807d">P</font></span>) <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>SensorView[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {<br />    presenter.view = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>this<br /></b></font></span><font color="#cc7832"><b><span style="color: #cc7832; font-weight: bold">  </span></b></font>}<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>SensorPresenter[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>Presenter {<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span>view: V<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417352551230" FOLDED="true" ID="ID_848537369" MODIFIED="1417352582511" TEXT="answer">
<node CREATED="1417352581888" MODIFIED="1417352581888">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>case class </b></font></span>SensorViewPresenter[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>ViewPresenterPair {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">V </font></span>= SensorView<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>type </b></font></span><span style="color: #4e807d"><font color="#4e807d">P </font></span>= SensorPresenter<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>trait </b></font></span>SensorView <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>View {<br />  }<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>SensorViewImpl(<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>presenter: <span style="color: #4e807d"><font color="#4e807d">P</font></span>) <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>SensorView {<br />    presenter.view = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>this<br /></b></font></span><font color="#cc7832"><b><span style="color: #cc7832; font-weight: bold">  </span></b></font>}<br /><br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>SensorPresenter <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>Presenter {<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span>view: <span style="color: #4e807d"><font color="#4e807d">V<br /></font></span><font color="#4e807d"><span style="color: #4e807d">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417337534145" FOLDED="true" ID="ID_1952813118" MODIFIED="1417354112373" TEXT="self type annotation">
<node CREATED="1417337941994" ID="ID_1750247728" MODIFIED="1417337941994">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #808080"><font color="#808080">//nowadays<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>C{self:D=&gt;<br />  ...<br />}<br /><span style="color: #808080"><font color="#808080">//ancient(deprecated)<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>C requires D{<br />  ...<br />}<br /><span style="color: #808080"><font color="#808080">//prehistoric(deprecated)<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>C:D{<br />  ...<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417359724249" ID="ID_1015292237" MODIFIED="1417359775917" TEXT="two guarantee [from scala overview]">
<node CREATED="1417359699577" ID="ID_1980146938" MODIFIED="1417359722150" TEXT="(1) the self-type of a class must be a subtype of the self-types of all its base classes,"/>
<node CREATED="1417359709132" ID="ID_1838722504" MODIFIED="1417359718255" TEXT="(2) when instantiating a class in a new expression, it is checked that the self type of the class is a supertype of the type of the object being created."/>
</node>
</node>
</node>
<node CREATED="1417237384318" FOLDED="true" ID="ID_1389343601" MODIFIED="1417362000471" TEXT="generic">
<node CREATED="1417237448714" FOLDED="true" ID="ID_640228668" MODIFIED="1417361834035" TEXT="type parameters (C++)">
<icon BUILTIN="full-1"/>
<node CREATED="1417316106501" ID="ID_1859239578" MODIFIED="1417316135369" TEXT="type type parameter"/>
<node CREATED="1417316176585" ID="ID_450552115" MODIFIED="1417316258181" TEXT="template type parameter/ higher order type"/>
<node CREATED="1417316135972" ID="ID_1646687957" MODIFIED="1417316311682" TEXT="non-type type parameter">
<node CREATED="1417316285370" ID="ID_2336420" MODIFIED="1417316344533" TEXT=" scala supported? unknown">
<icon BUILTIN="help"/>
</node>
</node>
</node>
<node CREATED="1417237469318" FOLDED="true" ID="ID_1416523677" MODIFIED="1417361831279" TEXT="bound type parameters (Java, Haskell)  [F-bounded polymorphism / System F]">
<icon BUILTIN="full-2"/>
<node CREATED="1417294358082" ID="ID_678488691" MODIFIED="1417294364058" TEXT="upper bound">
<node CREATED="1417294375915" ID="ID_98985417" MODIFIED="1417294604384" TEXT="class Java &lt;T extends U&gt;"/>
<node CREATED="1417294586028" ID="ID_1967616690" MODIFIED="1417294648824" TEXT="class Scala [T &lt;: U]"/>
<node CREATED="1417294627877" ID="ID_703067820" MODIFIED="1417294710098" TEXT="class (T u)=&gt;Haskell u where"/>
</node>
<node CREATED="1417294364478" ID="ID_208269097" MODIFIED="1417294368071" TEXT="lower bound">
<node CREATED="1417294716366" ID="ID_699207991" MODIFIED="1417294725941" TEXT="class Java &lt;T super U&gt;"/>
<node CREATED="1417294726497" ID="ID_1890947831" MODIFIED="1417294737761" TEXT="class Scala[T&gt;:U]"/>
</node>
</node>
<node CREATED="1417237400414" FOLDED="true" ID="ID_1176296046" MODIFIED="1417361832561" TEXT="type variance (scala, C#) [ Igarashi and Viroli&apos;s variant parametric types]">
<icon BUILTIN="full-3"/>
<node CREATED="1417237840792" ID="ID_555479915" MODIFIED="1417260357874" TEXT="Cat &lt;: Animal  =&gt; List[Cat] &lt;:  List[Animal] ?"/>
<node CREATED="1417238130162" ID="ID_1717549427" MODIFIED="1417238836693" TEXT="S is supertype of T, what&apos;s the relationship between C[T] and C[S] ?"/>
<node CREATED="1417238838912" ID="ID_492863145" MODIFIED="1417256809213" TEXT="{ co, contro, in } -variance">
<node CREATED="1417256815027" ID="ID_1200751044" MODIFIED="1417260367215" TEXT="T &lt;: S =&gt; C[T] &lt;: C[S]   covariance (Scala &apos;+&apos;, C# &apos;out&apos;) ">
<node CREATED="1417257143077" ID="ID_1668706843" MODIFIED="1417282866629" TEXT="if T is output/readonly type, then C[T] is covariant with T">
<node CREATED="1417282902211" FOLDED="true" ID="ID_53103149" MODIFIED="1417283129307" TEXT="T may not be covariant if T is mutable ">
<node CREATED="1417282821068" ID="ID_1770495652" MODIFIED="1417282821068">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>PetKeeper[<span style="color: #4e807d"><font color="#4e807d">+T </font></span>&lt;: Pet]{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private</b></font></span>[<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>this</b></font></span>] <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet </i></font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=_<br />  <span style="color: #808080"><font color="#808080">//Actually,It's Wrong because of T in contravariant pos<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">set</font></span>(p:<span style="color: #4e807d"><font color="#4e807d">T</font></span>):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet</i></font></span>=p}<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">get</font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet<br /></i></font></span>}<br /><br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>PetKeeper{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span>Thomas = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>PetKeeper[Cat]<br />    Thomas.set(<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Cat)<br />    <span style="color: #808080"><font color="#808080">//Tom and Thomas are identical<br /></font></span><font color="#808080"><span style="color: #808080">    //Tom is just nickname of Thomas<br /></span><span style="color: #808080">    </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>var </b></font></span>Tom:PetKeeper[Pet] = Thomas<br />    Tom.set(<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Dog)<br />    <span style="color: #808080"><font color="#808080">//So Tom and Thomas reference to identical object<br /></font></span><font color="#808080"><span style="color: #808080">    //But from Thomas view,his pet is a Cat<br /></span><span style="color: #808080">    //But from Tom's, it's a Dog<br /></span><span style="color: #808080">    //It's weired<br /></span><span style="color: #808080">    </span></font><span style="font-style: italic"><i>println</i></span>(Thomas.get.say())<br />    <span style="font-style: italic"><i>println</i></span>(Tom.get.say())<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417282873900" FOLDED="true" ID="ID_172628899" MODIFIED="1417283199509" TEXT="only immutable type can be a covariant">
<node CREATED="1417282869596" ID="ID_1312723663" MODIFIED="1417282869596">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #808080"><font color="#808080">//in Scala<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>GenList[<span style="color: #4e807d"><font color="#4e807d">+T</font></span>] {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">isNull</font></span>:<span style="color: #cc7832"><font color="#cc7832">Boolean<br /></font></span><font color="#cc7832"><span style="color: #cc7832">  </span><span style="color: #cc7832; font-weight: bold"><b>def </b></span></font><span style="color: #ffc66d"><font color="#ffc66d">head</font></span>:<span style="color: #4e807d"><font color="#4e807d">T<br /></font></span><font color="#4e807d"><span style="color: #4e807d">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">tail</font></span>:GenList[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">::</font></span>[<span style="color: #4e807d"><font color="#4e807d">S</font></span>&gt;:<span style="color: #4e807d"><font color="#4e807d">T</font></span>](x:<span style="color: #4e807d"><font color="#4e807d">S</font></span>):GenList[<span style="color: #4e807d"><font color="#4e807d">S</font></span>]={<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>return new </b></font></span>Cons(x<span style="color: #cc7832"><font color="#cc7832">,</font></span><font color="#cc7832"><span style="color: #cc7832; font-weight: bold"><b>this</b></span></font>)<br />  }<br />}<br /><br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>Cons[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](h:<span style="color: #4e807d"><font color="#4e807d">T</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span>t:GenList[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]) <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>GenList[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private val </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>car</i></font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=h<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private val </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>cdr</i></font></span>:GenList[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]=t<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">isNull</font></span>=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>false<br /></b></font></span><font color="#cc7832"><b><span style="color: #cc7832; font-weight: bold">  def </span></b></font><span style="color: #ffc66d"><font color="#ffc66d">head</font></span>=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>car<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">  </span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">tail</font></span>=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>cdr<br /></i></font></span><font color="#9876aa"><i><span style="color: #9876aa; font-style: italic">  </span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>override def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">toString</font></span>():<span style="color: #4e807d"><font color="#4e807d">String</font></span>=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>car</i></font></span>+<span style="color: #6a8759"><font color="#6a8759">&quot;::&quot;</font></span>+<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>cdr</i></font></span>.toString()<br />}<br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>Nil <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>GenList[Nothing]{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">isNull</font></span>=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>true<br /></b></font></span><font color="#cc7832"><b><span style="color: #cc7832; font-weight: bold">  def </span></b></font><span style="color: #ffc66d"><font color="#ffc66d">head</font></span>:Nothing=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>throw new </b></font></span>Error(<span style="color: #6a8759"><font color="#6a8759">&quot;Nil.head&quot;</font></span>)<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">tail</font></span>:GenList[Nothing]=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>throw new </b></font></span>Error(<span style="color: #6a8759"><font color="#6a8759">&quot;Nil.tail&quot;</font></span>)<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>override def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">toString</font></span>():<span style="color: #4e807d"><font color="#4e807d">String</font></span>=<span style="color: #6a8759"><font color="#6a8759">&quot;[]&quot;<br /></font></span>}<br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>GenList {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>kitties=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Kitty()::Nil<br />    <span style="font-style: italic"><i>println</i></span>(kitties)<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>cats = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Cat()::kitties<br />    <span style="font-style: italic"><i>println</i></span>(cats)<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>pets :GenList[Pet] = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Dog()::cats<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>pets1 = <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Puppy()::pets<br />    <span style="font-style: italic"><i>println</i></span>(pets1)<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417256841770" ID="ID_1930167453" MODIFIED="1417260386304" TEXT="T  &lt;: S =&gt; C[T] &gt;: C[S]  contravariance (Scala &apos;-&apos;, C# &apos;in&apos;) ">
<node CREATED="1417257257856" ID="ID_665342932" MODIFIED="1417257280900" TEXT="if T is input/writeonly type, then C[T] is contravariant with T"/>
</node>
<node CREATED="1417256874396" ID="ID_403102136" MODIFIED="1417261042778" TEXT="T &lt;: S =&gt;  C[T] &lt;&gt;: C[S]   invariance (Scala default, C#  default) ">
<node CREATED="1417257287255" FOLDED="true" ID="ID_1742145115" MODIFIED="1417283225615" TEXT="if T is both input and output type, then C[T] is contravariant with T">
<node CREATED="1417261045004" MODIFIED="1417261045004">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #629755; font-style: italic"><font color="#629755"><i>/**<br /></i></font></span><font color="#629755"><i><span style="color: #629755; font-style: italic"> * Created by satanson on 2014/11/29.<br /></span><span style="color: #629755; font-style: italic"> */<br /></span></i></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>abstract class </b></font></span>Pet{ <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">say</font></span>():<span style="color: #cc7832"><font color="#cc7832">Unit </font></span>}<br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>Kitty <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>Pet{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">say</font></span>():<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={ <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;The little kitty say: 'm-e-o-w...meow...'&quot;</font></span>)}<br />}<br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>Puppy <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>extends </b></font></span>Pet{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">say</font></span>():<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={ <span style="font-style: italic"><i>println</i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;The little puppy say: 'y-a-p...yap...'&quot;</font></span>)}<br />}<br /><span style="color: #808080"><font color="#808080">// PetKeeper[T] invariance on T<br /></font></span><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>class </b></font></span>PetKeeper[<span style="color: #4e807d"><font color="#4e807d">T </font></span>&lt;: Pet](p:<span style="color: #4e807d"><font color="#4e807d">T</font></span>) {<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>private var </b></font></span><span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet</i></font></span>:<span style="color: #4e807d"><font color="#4e807d">T</font></span>=p <span style="color: #808080"><font color="#808080">// T in invariant position<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">petSay</font></span>():<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={ <span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet</i></font></span>.say()} <span style="color: #808080"><font color="#808080">// T in<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">setPet</font></span>(p:<span style="color: #4e807d"><font color="#4e807d">T</font></span>):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet</i></font></span>=p}<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">getPet</font></span>():Pet=<span style="color: #9876aa; font-style: italic"><font color="#9876aa"><i>pet<br /></i></font></span>}<br /><br /><span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>object </b></font></span>PetKeeper{<br />  <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>def </b></font></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>val </b></font></span>John=<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>PetKeeper[Kitty](<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>new </b></font></span>Kitty())<br />    John.getPet().say()<br /><span style="color: #808080"><font color="#808080">//PetKeeper[Pet] is not superclass of PetKeeper[Cat],<br /></font></span><font color="#808080"><span style="color: #808080">//although Cat &lt;: Pet.<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//If  PetKeeper[Cat] was superclass of  PetKeeper[Cat],<br /></span><span style="color: #808080">//the code as fellow would be weired<br /></span><span style="color: #808080">//    val Tom:PetKeeper[Pet]=john<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">//    Tom.setPet(new Puppy())<br /></span><span style="color: #808080">//Tom's pet(Pet ref) referenced to an object of Puppy<br /></span><span style="color: #808080">//John's pet(Kitty ref) reference to an object of Puppy<br /></span><span style="color: #808080">//    Tom.getPet().say()<br /></span><span style="color: #808080">//    John.getPet().say()<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1417362003215" ID="ID_1073974531" MODIFIED="1417454264225" TEXT="abstract type MORE POWERFUL than generic"/>
<node CREATED="1417438343750" ID="ID_273041054" MODIFIED="1417454413984" TEXT="adapter/view; implicit; ">
<node CREATED="1417438396375" FOLDED="true" ID="ID_1783617187" MODIFIED="1417627615739" TEXT="external extensibility problem">
<node CREATED="1417439272717" MODIFIED="1417439272717">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-family: Courier New; color: #a9b7c6; font-size: 17pt; background-color: #2b2b2b"><span style="font-style: italic; color: #629755"><i><font color="#629755">/**<br /></font></i></span><i><font color="#629755"><span style="font-style: italic; color: #629755"> * Created by satanson on 2014/12/1.<br /></span><span style="font-style: italic; color: #629755"> */<br /></span></font></i><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">trait </font></b></span>SemiGroup[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]{<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">add</font></span>(x:<span style="color: #4e807d"><font color="#4e807d">T</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span>y:<span style="color: #4e807d"><font color="#4e807d">T</font></span>):<span style="color: #4e807d"><font color="#4e807d">T<br /></font></span>}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">trait </font></b></span>Monoid[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>SemiGroup[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">unit</font></span>:<span style="color: #4e807d"><font color="#4e807d">T<br /></font></span>}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">object </font></b></span>Monoids{<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">object </font></b></span>StringMonoid <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>Monoid[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]{<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">unit</font></span>=<span style="color: #6a8759"><font color="#6a8759">&quot;&quot;<br /></font></span><font color="#6a8759"><span style="color: #6a8759">    </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">add</font></span>(x:<span style="color: #4e807d"><font color="#4e807d">String</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span>y:<span style="color: #4e807d"><font color="#4e807d">String</font></span>):<span style="color: #4e807d"><font color="#4e807d">String</font></span>=x concat y<br />  }<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">object </font></b></span>IntMonoid <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>Monoid[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]{<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">unit</font></span>=<span style="color: #6897bb"><font color="#6897bb">0<br /></font></span><font color="#6897bb"><span style="color: #6897bb">    </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">add</font></span>(x:<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>y:<span style="color: #cc7832"><font color="#cc7832">Int</font></span>):<span style="color: #cc7832"><font color="#cc7832">Int</font></span>=x+y<br />  }<br /><br />  <span style="color: #808080"><font color="#808080">//curried functions<br /></font></span><font color="#808080"><span style="color: #808080">  </span></font><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">sum</font></span>[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](xs:<span style="color: #4e807d"><font color="#4e807d">List</font></span>[<span style="color: #4e807d"><font color="#4e807d">T</font></span>])(m:Monoid[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]):<span style="color: #4e807d"><font color="#4e807d">T</font></span>={<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">if </font></b></span>(xs.isEmpty)m.unit<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">else </font></b></span>m.add(xs.head<span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>sum</i></span>(xs.tail)(m))<br />  }<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="color: #808080"><font color="#808080">//just 'println(sum(List(&quot;a&quot;,&quot;b&quot;,&quot;z&quot;))' is desired!<br /></font></span><font color="#808080"><span style="color: #808080">    //if StringMonoid/IntMonoid can be a default argument<br /></span><span style="color: #808080">    //to m:Monoid[T]<br /></span><span style="color: #808080">    </span></font><span style="font-style: italic"><i>println</i></span>(<span style="font-style: italic"><i>sum</i></span>(<span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>(<span style="color: #6a8759"><font color="#6a8759">&quot;a&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;b&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;z&quot;</font></span>))(StringMonoid))<br />    <span style="font-style: italic"><i>println</i></span>(<span style="font-style: italic"><i>sum</i></span>(<span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>(<span style="color: #6897bb"><font color="#6897bb">1</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #6897bb"><font color="#6897bb">2</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #6897bb"><font color="#6897bb">3</font></span>))(IntMonoid))<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417443824906" ID="ID_1034364956" MODIFIED="1417443831860" TEXT="implicit object"/>
<node CREATED="1417439275547" ID="ID_185147672" MODIFIED="1417443824131" TEXT="implicit methods"/>
<node CREATED="1417443833385" FOLDED="true" ID="ID_1288079689" MODIFIED="1417627612555" TEXT="infinite recursion">
<node CREATED="1417443853910" ID="ID_1911013594" MODIFIED="1417443886866" TEXT="(a)(implict a=&gt;Ordered[a]):Ordered[a]"/>
</node>
<node CREATED="1417444897864" FOLDED="true" ID="ID_1777278403" MODIFIED="1417631171422" TEXT="view">
<node CREATED="1417444915058" ID="ID_1062273076" MODIFIED="1417627598820" TEXT="implicit conversions between types">
<node CREATED="1417444944258" ID="ID_911388646" MODIFIED="1417444963577" TEXT="single parameter constructor"/>
<node CREATED="1417444964986" ID="ID_617382249" MODIFIED="1417444976704" TEXT="operator T()"/>
</node>
</node>
<node CREATED="1417444984195" FOLDED="true" ID="ID_1370587236" MODIFIED="1417631158558" TEXT="view bounds  (&lt;%)">
<node CREATED="1417444991589" ID="ID_24502286" MODIFIED="1417445037968" TEXT="def maximum[T &lt;% Ordered[T]] (xs:List[T]):T"/>
<node CREATED="1417445042912" ID="ID_964481724" MODIFIED="1417445042912" TEXT=""/>
</node>
</node>
</node>
<node CREATED="1417189783992" FOLDED="true" ID="ID_1235766344" MODIFIED="1417627583527" POSITION="right" TEXT="functional">
<node CREATED="1417186627502" FOLDED="true" ID="ID_462155348" MODIFIED="1417438332025" TEXT="function literals">
<node CREATED="1417186793314" FOLDED="true" ID="ID_293061068" MODIFIED="1417189825981" TEXT="nested functions">
<node CREATED="1417189641275" MODIFIED="1417189641275">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//nested function<br /></span><span style="color: #808080">//closure: nested function that can access upvalues<br /></span><span style="color: #808080">//upvalues(originate from lua) means local variables of enclosing functions<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fibonacci</span></font>:(()=&gt;<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)={<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a:Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>]=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>](<font color="#6897bb"><span style="color: #6897bb">2</span></font>)<br />  a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">  </span></font>a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fib</span></font>():<font color="#cc7832"><span style="color: #cc7832">Int</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>t=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<br />    a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)+t<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>fib<br />}<br /><br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_fibonacci</span></font>(n:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fib=<i><span style="font-style: italic">fibonacci<br /></span><span style="font-style: italic">  </span></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">for </span></font></b>(x &lt;- <font color="#6897bb"><span style="color: #6897bb">1 </span></font>to n){<br />    <i><span style="font-style: italic">println</span></i>(fib())<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417186802222" FOLDED="true" ID="ID_530406229" MODIFIED="1417436311007" TEXT="anonymous functions">
<node CREATED="1417189427487" MODIFIED="1417189427487">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//anonymous function/lambda expression<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_add</span></font>(x:<font color="#cc7832"><span style="color: #cc7832">Int,</span></font>y:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />  <font color="#808080"><span style="color: #808080">// -- in Haskell<br /></span><span style="color: #808080">  // let add = \x y-&gt;x+y in putStrLn $ show $ add 10 10<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; background-color: #344134; font-weight: bold">val</span><span style="color: #cc7832; font-weight: bold"> </span></font></b>add = <span style="background-color: #344134">(x:Int</span><font color="#cc7832"><span style="color: #cc7832; background-color: #344134">,</span></font><span style="background-color: #344134">y:Int)=&gt;x+y</span><br />  <i><span style="font-style: italic">println</span></i>(add(x<font color="#cc7832"><span style="color: #cc7832">,</span></font>y))<br />}</pre>
  </body>
</html></richcontent>
</node>
<node CREATED="1417436209567" MODIFIED="1417436209567">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-family: Courier New; color: #a9b7c6; font-size: 17pt; background-color: #2b2b2b"><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">for </font></b></span>(x&lt;-<span style="color: #6897bb"><font color="#6897bb">1</font></span>.to(<span style="color: #6897bb"><font color="#6897bb">10</font></span>).map(_=&gt;<span style="color: #6897bb"><font color="#6897bb">10</font></span>))<span style="font-style: italic"><i>println</i></span>(x)</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417436296664" FOLDED="true" ID="ID_1918022370" MODIFIED="1417436636161" TEXT="placeholder syntax">
<node CREATED="1417436634497" MODIFIED="1417436634497">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-family: Courier New; color: #a9b7c6; font-size: 17pt; background-color: #2b2b2b">_ + <span style="color: #6897bb"><font color="#6897bb">1  </font></span><span style="color: #808080"><font color="#808080">//x =&gt; x + 1<br /></font></span>_ * _  <span style="color: #808080"><font color="#808080">//(x1, x2) =&gt; x1 * x2<br /></font></span>(_: <span style="color: #cc7832"><font color="#cc7832">Int</font></span>) * <span style="color: #6897bb"><font color="#6897bb">2 </font></span><span style="color: #808080"><font color="#808080">//(x: Int) =&gt; (x: Int) * 2<br /></font></span><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">if </font></b></span>(_) x <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">else </font></b></span>y <span style="color: #808080"><font color="#808080">//z =&gt; if (z) x else y<br /></font></span>_.map(f) <span style="color: #808080"><font color="#808080">//x =&gt; x.map(f)<br /></font></span>_.map(_ + <span style="color: #6897bb"><font color="#6897bb">1</font></span>) <span style="color: #808080"><font color="#808080">//x =&gt; x.map(y =&gt; y + 1)</font></span></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417186884868" FOLDED="true" ID="ID_1562311934" MODIFIED="1417292919283" TEXT="sections">
<node CREATED="1417187033782" ID="ID_290346197" MODIFIED="1417187252638" TEXT="0 ==   --  x: Int =&gt; 0 == x ">
<node CREATED="1417187254026" ID="ID_197748690" MODIFIED="1417187312305" TEXT="(0==)  -- \x-&gt;0==x  (in Haskell)"/>
</node>
<node CREATED="1417187285211" ID="ID_1503490724" MODIFIED="1417187338582" TEXT="==0 -- invalid !!!">
<node CREATED="1417187316683" ID="ID_1995986433" MODIFIED="1417187344724" TEXT="valid in Haskell"/>
</node>
</node>
<node CREATED="1417292920397" FOLDED="true" ID="ID_1519222877" MODIFIED="1417436323271" TEXT="block (just like ruby)">
<node CREATED="1417293054664" ID="ID_773831969" MODIFIED="1417293054664">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #6897bb"><font color="#6897bb">1</font></span>.to(<span style="color: #6897bb"><font color="#6897bb">3</font></span>).foreach{<span style="color: #cc7832; font-weight: bold"><font color="#cc7832"><b>case </b></font></span>x=&gt;<span style="font-style: italic"><i>println</i></span>(x)}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417292967076" FOLDED="true" ID="ID_1556512000" MODIFIED="1417436321805" TEXT="concise lambda expr based on type inference">
<node CREATED="1417293015265" MODIFIED="1417293015265">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="color: #6897bb"><font color="#6897bb">1</font></span>.to(<span style="color: #6897bb"><font color="#6897bb">3</font></span>).foreach(x=&gt;<span style="font-style: italic"><i>println</i></span>(x))</pre>
  </body>
</html></richcontent>
</node>
<node CREATED="1417293622892" MODIFIED="1417293622892">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="color: #a9b7c6; background-color: #2b2b2b; font-size: 17pt; font-family: Courier New"><span style="background-color: #344134">println</span>(<span style="color: #6897bb"><font color="#6897bb">1</font></span>.to(<span style="color: #6897bb"><font color="#6897bb">3</font></span>).map(x=&gt;x*x).foldRight(<span style="color: #6a8759"><font color="#6a8759">&quot;&quot;</font></span>)((t<span style="color: #cc7832"><font color="#cc7832">,</font></span>s)=&gt;<span style="color: #6a8759"><font color="#6a8759">&quot;&quot;</font></span>+t+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>+s))</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417186513808" FOLDED="true" ID="ID_1390747999" MODIFIED="1417438333051" TEXT="Higher-order Functions (Functions are values)">
<node CREATED="1417186578759" FOLDED="true" ID="ID_21460836" MODIFIED="1417198365706" TEXT="function as paremeters/arguments">
<node CREATED="1417195756197" MODIFIED="1417195756197">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>HigherOrderScala {<br /><br />  <font color="#808080"><span style="color: #808080">//nested function<br /></span><span style="color: #808080">  //closure: nested function that can access upvalues<br /></span><span style="color: #808080">  //upvalues(originate from lua) means local variables of enclosing functions<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fibonacci</span></font>:(()=&gt;<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a:Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>]=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Array[<font color="#cc7832"><span style="color: #cc7832">Int</span></font>](<font color="#6897bb"><span style="color: #6897bb">2</span></font>)<br />    a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">    </span></font>a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=<font color="#6897bb"><span style="color: #6897bb">1<br /></span><span style="color: #6897bb">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">fib</span></font>():<font color="#cc7832"><span style="color: #cc7832">Int</span></font>={<br />      <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>t=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />      a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<br />      a(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)=a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)+t<br />      <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>a(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    }<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>fib<br />  }<br /><br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_fibonacci</span></font>(n:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fib=<i><span style="font-style: italic">fibonacci<br /></span><span style="font-style: italic">    </span></i><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">for </span></font></b>(x &lt;- <font color="#6897bb"><span style="color: #6897bb">1 </span></font>to n){<br />      <i><span style="font-style: italic">println</span></i>(fib())<br />    }<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">foldr</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#4e807d"><span style="color: #4e807d">S</span></font>](f:(<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#4e807d"><span style="color: #4e807d">S</span></font>)=&gt;<font color="#4e807d"><span style="color: #4e807d">S</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>z:<font color="#4e807d"><span style="color: #4e807d">S</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#4e807d"><span style="color: #4e807d">S</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(xs.length == <font color="#6897bb"><span style="color: #6897bb">0</span></font>) <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>z<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else return </span></font></b>f(xs.head<font color="#cc7832"><span style="color: #cc7832">,</span></font><i><span style="font-style: italic">foldr</span></i>(f<font color="#cc7832"><span style="color: #cc7832">,</span></font>z<font color="#cc7832"><span style="color: #cc7832">,</span></font>xs.tail))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">any</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (p:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#cc7832"><span style="color: #cc7832">Boolean,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>f = (x:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>ok:<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>)=&gt;ok || p(x)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>(f<font color="#cc7832"><span style="color: #cc7832">,</span><b><span style="color: #cc7832; font-weight: bold">false</span></b><span style="color: #cc7832">,</span></font>xs)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">all</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (p:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#cc7832"><span style="color: #cc7832">Boolean,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b>!<i><span style="font-style: italic">any</span></i>((x:<font color="#4e807d"><span style="color: #4e807d">T</span></font>) =&gt; !p(x)<font color="#cc7832"><span style="color: #cc7832">,</span></font>xs)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">map</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><font color="#4e807d"><span style="color: #4e807d">S</span></font>] (f:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#4e807d"><span style="color: #4e807d">S</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">S</span></font>]={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>((y:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>ys:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">S</span></font>])=&gt;f(y)::ys<font color="#cc7832"><span style="color: #cc7832">,</span></font><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">Nil</span></font></i><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs)<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">grep</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (p:<font color="#4e807d"><span style="color: #4e807d">T</span></font>=&gt;<font color="#cc7832"><span style="color: #cc7832">Boolean,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]): <font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] ={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>((y:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>ys:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>])=&gt;<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(p(y)) y::ys <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else </span></font></b>ys<font color="#cc7832"><span style="color: #cc7832">,</span></font><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">Nil</span></font></i><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs)<br />  }<br /><br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">join</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>] (sep:<font color="#4e807d"><span style="color: #4e807d">String</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>xs:<font color="#4e807d"><span style="color: #4e807d">List</span></font>[<font color="#4e807d"><span style="color: #4e807d">T</span></font>]):<font color="#4e807d"><span style="color: #4e807d">String </span></font>= {<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return </span></font></b><i><span style="font-style: italic">foldr</span></i>((x:<font color="#4e807d"><span style="color: #4e807d">T</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>s:<font color="#4e807d"><span style="color: #4e807d">String</span></font>)=&gt;<font color="#6a8759"><span style="color: #6a8759">&quot;&quot;</span></font>+x+sep+s<font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;&quot;</span></font>+xs.last<font color="#cc7832"><span style="color: #cc7832">,</span></font>xs.init)<br />  }<br /><br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_any</span></font>(): <font color="#cc7832"><span style="color: #cc7832">Unit </span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>days = <i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">List</span></font></i>[<font color="#4e807d"><span style="color: #4e807d">String</span></font>](<font color="#6a8759"><span style="color: #6a8759">&quot;scala&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;is&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;an&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;programming&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">, </span></font><font color="#6a8759"><span style="color: #6a8759">&quot;language&quot;</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>p = (x:<font color="#4e807d"><span style="color: #4e807d">String</span></font>)=&gt;x.startsWith(<font color="#6a8759"><span style="color: #6a8759">&quot;a&quot;</span></font>)<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">any</span></i>(p<font color="#cc7832"><span style="color: #cc7832">,</span></font>days))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_all</span></font>(): <font color="#cc7832"><span style="color: #cc7832">Unit </span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a=<font color="#6897bb"><span style="color: #6897bb">1 </span></font>to <font color="#6897bb"><span style="color: #6897bb">10<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">all</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;<font color="#6897bb"><span style="color: #6897bb">0</span></font>&lt;x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br /><br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_map</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a=<font color="#6897bb"><span style="color: #6897bb">1 </span></font>to <font color="#6897bb"><span style="color: #6897bb">10<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><i><span style="font-style: italic">map</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;x*x<font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList)))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_grep</span></font>():<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a=<font color="#6897bb"><span style="color: #6897bb">1 </span></font>to <font color="#6897bb"><span style="color: #6897bb">10<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList))<br />    <i><span style="font-style: italic">println</span></i>(<i><span style="font-style: italic">join</span></i>(<font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">\t</span></font><font color="#6a8759"><span style="color: #6a8759">&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font><i><span style="font-style: italic">grep</span></i>((x:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;x%<font color="#6897bb"><span style="color: #6897bb">3</span></font>==<font color="#6897bb"><span style="color: #6897bb">0</span></font><font color="#cc7832"><span style="color: #cc7832">,</span></font>a.toList)))<br />  }<br /><br />  <font color="#808080"><span style="color: #808080">//anonymous function/lambda expression<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">test_add</span></font>(x:<font color="#cc7832"><span style="color: #cc7832">Int,</span></font>y:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <font color="#808080"><span style="color: #808080">// -- in Haskell<br /></span><span style="color: #808080">    // let add = \x y-&gt;x+y in putStrLn $ show $ add 10 10<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>add = (x:<font color="#cc7832"><span style="color: #cc7832">Int,</span></font>y:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>)=&gt;x+y<br />    <i><span style="font-style: italic">println</span></i>(add(x<font color="#cc7832"><span style="color: #cc7832">,</span></font>y))<br />  }<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]): <font color="#cc7832"><span style="color: #cc7832">Unit </span></font>={<br />    <font color="#808080"><span style="color: #808080">//test_add(1,2)<br /></span><span style="color: #808080">    //test_fibonacci(10)<br /></span><span style="color: #808080">    //test_any<br /></span><span style="color: #808080">    //test_all()<br /></span><span style="color: #808080">    //test_map()<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">test_grep</span></i>()<br />  }<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417186621365" ID="ID_1326059735" MODIFIED="1417186626737" TEXT="functions as return value"/>
<node CREATED="1417186898166" ID="ID_1963294364" MODIFIED="1417187018881" TEXT="functions can be binded to variable"/>
<node CREATED="1417198961500" ID="ID_1328390593" MODIFIED="1417292892580" TEXT="&apos;x:Int =&gt; Int&apos;  vs. &apos;(x:Int)=&gt;x+1&apos;">
<node CREATED="1417199097250" ID="ID_646366187" MODIFIED="1417199179438" TEXT="function type, use param-list =&gt; returnType"/>
<node CREATED="1417199180185" ID="ID_67598249" MODIFIED="1417199277516" TEXT="anonymous func: parenthesize param-list "/>
</node>
</node>
<node CREATED="1417429688026" ID="ID_422723963" MODIFIED="1417625968555" TEXT="Algebraic Datetypes &amp; Pattern Matching">
<node CREATED="1417429791713" ID="ID_528665913" MODIFIED="1417625970486" TEXT="case class/object  match{case=&gt;}">
<node CREATED="1417434324857" ID="ID_1477689022" MODIFIED="1417434324857">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-family: Courier New; color: #a9b7c6; font-size: 17pt; background-color: #2b2b2b"><span style="font-style: italic; color: #629755"><i><font color="#629755">/**<br /></font></i></span><i><font color="#629755"><span style="font-style: italic; color: #629755"> * Created by satanson on 2014/12/1.<br /></span><span style="font-style: italic; color: #629755"> */<br /></span></font></i><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">class </font></b></span>BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>] {}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case class </font></b></span>Leaf[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](v:<span style="color: #4e807d"><font color="#4e807d">T</font></span>)<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]{}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case class </font></b></span>Branch[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](v:<span style="color: #4e807d"><font color="#4e807d">T</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span>left:BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]<span style="color: #cc7832"><font color="#cc7832">,</font></span>right:BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]) <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]{}<br /><br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">class </font></b></span>Maybe[<span style="color: #4e807d"><font color="#4e807d">+T</font></span>]<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case class </font></b></span>Just[<span style="color: #4e807d"><font color="#4e807d">+T</font></span>](x:<span style="color: #4e807d"><font color="#4e807d">T</font></span>) <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>Maybe[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case object </font></b></span>None <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">extends </font></b></span>Maybe[Nothing]<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">object </font></b></span>Maybe{<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">Just</font></span>[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](x:<span style="color: #4e807d"><font color="#4e807d">T</font></span>)=<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">new </font></b></span>Just(x)<br />}<br /><span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">object </font></b></span>BTree{<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">preorder</font></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T </font></span>&gt;: BTree[<span style="color: #4e807d"><font color="#4e807d">E</font></span>] &lt;: BTree[<span style="color: #4e807d"><font color="#4e807d">E</font></span>] ](root :Maybe[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]):<span style="color: #4e807d"><font color="#4e807d">List</font></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span>]= root <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">match </font></b></span>{<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span>None =&gt;<span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>()<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Just</i></span>(r) =&gt; r <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">match </font></b></span>{<br />      <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Leaf</i></span>(x) =&gt; <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>(x)<br />      <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Branch</i></span>(x<span style="color: #cc7832"><font color="#cc7832">, </font></span>l<span style="color: #cc7832"><font color="#cc7832">, </font></span>r) =&gt;<br />        <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span>](x) ++ <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>](Maybe.<span style="font-style: italic"><i>Just</i></span>(l)) ++ <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>] (Maybe.<span style="font-style: italic"><i>Just</i></span>(r))<br />    }<br />  }<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">inorder</font></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T </font></span>&gt;: BTree[<span style="color: #4e807d"><font color="#4e807d">E</font></span>] &lt;: BTree[<span style="color: #4e807d"><font color="#4e807d">E</font></span>] ](root :Maybe[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]):<span style="color: #4e807d"><font color="#4e807d">List</font></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span>]= root <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">match </font></b></span>{<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span>None =&gt;<span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>()<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Just</i></span>(r) =&gt; r <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">match </font></b></span>{<br />      <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Leaf</i></span>(x) =&gt; <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>(x)<br />      <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Branch</i></span>(x<span style="color: #cc7832"><font color="#cc7832">, </font></span>l<span style="color: #cc7832"><font color="#cc7832">, </font></span>r) =&gt;<br />        <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>] (Maybe.<span style="font-style: italic"><i>Just</i></span>(l)) ++ <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span>](x) ++ <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>] (Maybe.<span style="font-style: italic"><i>Just</i></span>(r))<br />    }<br />  }<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">postorder</font></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T </font></span>&gt;: BTree[<span style="color: #4e807d"><font color="#4e807d">E</font></span>] &lt;: BTree[<span style="color: #4e807d"><font color="#4e807d">E</font></span>] ](root :Maybe[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]):<span style="color: #4e807d"><font color="#4e807d">List</font></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span>]= root <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">match </font></b></span>{<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span>None =&gt;<span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>()<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Just</i></span>(r) =&gt; r <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">match </font></b></span>{<br />      <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Leaf</i></span>(x) =&gt; <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>(x)<br />      <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">case </font></b></span><span style="font-style: italic"><i>Branch</i></span>(x<span style="color: #cc7832"><font color="#cc7832">, </font></span>l<span style="color: #cc7832"><font color="#cc7832">, </font></span>r) =&gt;<br />        <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>] (Maybe.<span style="font-style: italic"><i>Just</i></span>(l)) ++ <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="color: #4e807d"><font color="#4e807d">T</font></span>] (Maybe.<span style="font-style: italic"><i>Just</i></span>(r)) ++ <span style="font-style: italic; color: #9876aa"><i><font color="#9876aa">List</font></i></span>[<span style="color: #4e807d"><font color="#4e807d">E</font></span>](x)<br />    }<br />  }<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">Leaf</font></span>[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](x:<span style="color: #4e807d"><font color="#4e807d">T</font></span>)=<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">new </font></b></span>Leaf(x)<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">Branch</font></span>[<span style="color: #4e807d"><font color="#4e807d">T</font></span>](x:<span style="color: #4e807d"><font color="#4e807d">T</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span>l:BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>]<span style="color: #cc7832"><font color="#cc7832">,</font></span>r:BTree[<span style="color: #4e807d"><font color="#4e807d">T</font></span>])=<span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">new </font></b></span>Branch(x<span style="color: #cc7832"><font color="#cc7832">,</font></span>l<span style="color: #cc7832"><font color="#cc7832">,</font></span>r)<br />  <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">def </font></b></span><span style="color: #ffc66d"><font color="#ffc66d">main</font></span>(args:Array[<span style="color: #4e807d"><font color="#4e807d">String</font></span>]):<span style="color: #cc7832"><font color="#cc7832">Unit</font></span>={<br />    <span style="font-weight: bold; color: #cc7832"><b><font color="#cc7832">val </font></b></span>root=<br />      <span style="font-style: italic"><i>Branch</i></span>(<span style="color: #6897bb"><font color="#6897bb">0</font></span><span style="color: #cc7832"><font color="#cc7832">,<br /></font></span><font color="#cc7832"><span style="color: #cc7832">        </span></font><span style="font-style: italic"><i>Branch</i></span>(<span style="color: #6897bb"><font color="#6897bb">1</font></span><span style="color: #cc7832"><font color="#cc7832">,<br /></font></span><font color="#cc7832"><span style="color: #cc7832">          </span></font><span style="font-style: italic"><i>Branch</i></span>(<span style="color: #6897bb"><font color="#6897bb">2</font></span><span style="color: #cc7832"><font color="#cc7832">,<br /></font></span><font color="#cc7832"><span style="color: #cc7832">            </span></font><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">3</font></span>)<span style="color: #cc7832"><font color="#cc7832">,<br /></font></span><font color="#cc7832"><span style="color: #cc7832">            </span></font><span style="font-style: italic"><i>Branch</i></span>(<span style="color: #6897bb"><font color="#6897bb">4</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">5</font></span>)<span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">6</font></span>)))<span style="color: #cc7832"><font color="#cc7832">,<br /></font></span><font color="#cc7832"><span style="color: #cc7832">          </span></font><span style="font-style: italic"><i>Branch</i></span>(<span style="color: #6897bb"><font color="#6897bb">7</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">8</font></span>)<span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">9</font></span>)))<span style="color: #cc7832"><font color="#cc7832">,<br /></font></span><font color="#cc7832"><span style="color: #cc7832">        </span></font><span style="font-style: italic"><i>Branch</i></span>(<span style="color: #6897bb"><font color="#6897bb">10</font></span><span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">11</font></span>)<span style="color: #cc7832"><font color="#cc7832">,</font></span><span style="font-style: italic"><i>Leaf</i></span>(<span style="color: #6897bb"><font color="#6897bb">12</font></span>)))<span style="color: #cc7832"><font color="#cc7832">;<br /></font></span><font color="#cc7832"><span style="color: #cc7832">    </span></font><span style="font-style: italic"><i>preorder</i></span>[<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>BTree[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]](None) foreach {x=&gt;<span style="font-style: italic"><i>print</i></span>(x+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>)}<br />    <span style="font-style: italic"><i>println<br /></i></span><i><span style="font-style: italic">    inorder</span></i>[<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>BTree[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]](None) foreach {x=&gt;<span style="font-style: italic"><i>print</i></span>(x+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>)}<br />    <span style="font-style: italic"><i>println<br /></i></span><i><span style="font-style: italic">    postorder</span></i>[<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>BTree[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]](None) foreach {x=&gt;<span style="font-style: italic"><i>print</i></span>(x+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>)}<br />    <span style="font-style: italic"><i>preorder</i></span>[<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>BTree[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]](None) foreach {x=&gt;<span style="font-style: italic"><i>print</i></span>(x+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>)}<br />    <span style="font-style: italic"><i>println<br /></i></span><i><span style="font-style: italic">    inorder</span></i>[<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>BTree[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]](Maybe.<span style="font-style: italic"><i>Just</i></span>(root)) foreach {x=&gt;<span style="font-style: italic"><i>print</i></span>(x+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>)}<br />    <span style="font-style: italic"><i>println<br /></i></span><i><span style="font-style: italic">    postorder</span></i>[<span style="color: #cc7832"><font color="#cc7832">Int,</font></span>BTree[<span style="color: #cc7832"><font color="#cc7832">Int</font></span>]](Maybe.<span style="font-style: italic"><i>Just</i></span>(root)) foreach {x=&gt;<span style="font-style: italic"><i>print</i></span>(x+<span style="color: #6a8759"><font color="#6a8759">&quot;</font></span><span style="color: #cc7832"><font color="#cc7832">\t</font></span><span style="color: #6a8759"><font color="#6a8759">&quot;</font></span>)}<br />    <span style="font-style: italic"><i>println<br /></i></span><i><span style="font-style: italic">  </span></i>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1417437809607" FOLDED="true" ID="ID_307467538" MODIFIED="1417438329454" TEXT="Curried Functions">
<node CREATED="1417438273401" ID="ID_159882149" MODIFIED="1417438311847" TEXT="demos">
<node CREATED="1417438246024" ID="ID_466546810" MODIFIED="1417438277387">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-family: Courier New; color: #a9b7c6; font-size: 17pt; background-color: #2b2b2b"><span style="font-style: italic; color: #808080"><i><font color="#808080">scala&gt; def add(x:Int,y:Int)=x+y<br /></font></i></span><i><font color="#808080"><span style="font-style: italic; color: #808080">add: (x: Int, y: Int)Int<br /></span><span style="font-style: italic; color: #808080"><br /></span><span style="font-style: italic; color: #808080">scala&gt; def add1(x:Int)(y:Int)=x+y<br /></span><span style="font-style: italic; color: #808080">add1: (x: Int)(y: Int)Int<br /></span><span style="font-style: italic; color: #808080"><br /></span><span style="font-style: italic; color: #808080">scala&gt; def add2(x:Int)=(y:Int)=&gt;x+y<br /></span><span style="font-style: italic; color: #808080">add2: (x: Int)Int =&gt; Int<br /></span><span style="font-style: italic; color: #808080"><br /></span><span style="font-style: italic; color: #808080">scala&gt; add _<br /></span><span style="font-style: italic; color: #808080">res13: (Int, Int) =&gt; Int = &lt;function2&gt;<br /></span><span style="font-style: italic; color: #808080"><br /></span><span style="font-style: italic; color: #808080">scala&gt; add1 _<br /></span><span style="font-style: italic; color: #808080">res14: Int =&gt; (Int =&gt; Int) = &lt;function1&gt;<br /></span><span style="font-style: italic; color: #808080"><br /></span><span style="font-style: italic; color: #808080">scala&gt; add2 _<br /></span><span style="font-style: italic; color: #808080">res15: Int =&gt; (Int =&gt; Int) = &lt;function1&gt;<br /></span><span style="font-style: italic; color: #808080"><br /></span><span style="font-style: italic; color: #808080">scala&gt;</span></font></i></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1417445084678" ID="ID_1548316007" MODIFIED="1417445085784" POSITION="right" TEXT="xml">
<node CREATED="1417445526312" ID="ID_1445815074" MODIFIED="1417445553172" TEXT="XML syntax can be used directly in a scala program"/>
<node CREATED="1417445553527" ID="ID_376265777" MODIFIED="1417445562961" TEXT="XPath operators">
<node CREATED="1417445563817" ID="ID_572676149" MODIFIED="1417445567125" TEXT="child \"/>
<node CREATED="1417445570694" ID="ID_83921151" MODIFIED="1417445588998" TEXT="descentant-or-self  \\"/>
</node>
<node CREATED="1417445625540" ID="ID_903885870" MODIFIED="1417445642505" TEXT="Schema Validation">
<node CREATED="1417445643677" ID="ID_1307096123" MODIFIED="1417445652354" TEXT="dtd2scala"/>
</node>
<node CREATED="1417445659186" ID="ID_446366579" MODIFIED="1417445676332" TEXT="sequence matching">
<node CREATED="1417445679707" ID="ID_128521639" MODIFIED="1417445698700" TEXT="XML nodes can be decomposed using pattern matching"/>
</node>
<node CREATED="1417445723132" ID="ID_382275330" MODIFIED="1417445749171" TEXT="XML Queries  through For comprehension"/>
</node>
<node CREATED="1417161555757" FOLDED="true" ID="ID_1331900498" MODIFIED="1417189797426" POSITION="right" TEXT="type">
<node CREATED="1417173633029" FOLDED="true" ID="ID_696968813" MODIFIED="1417176545097" TEXT="type hierarchy">
<node CREATED="1417161559016" ID="ID_1993474055" MODIFIED="1417173646263" TEXT="scala.Any       -- root">
<node CREATED="1417161581926" ID="ID_993305904" MODIFIED="1417161589874" TEXT="scala.AnyVal">
<node CREATED="1417161626491" ID="ID_1406226748" MODIFIED="1417161677564" TEXT="scala.{Unit, Boolean, Char, Byte, Short, Int, Long, Float, Double}"/>
</node>
<node CREATED="1417161595944" ID="ID_707113591" MODIFIED="1417161603447" TEXT="scala.AnyRef">
<node CREATED="1417161689734" ID="ID_458595210" MODIFIED="1417161709850" TEXT="scala.{Iterable, Seq, List} "/>
<node CREATED="1417161710311" ID="ID_1339246368" MODIFIED="1417161735090" TEXT="java.lang.String"/>
<node CREATED="1417161735320" ID="ID_747948306" MODIFIED="1417161745008" TEXT="other java classes"/>
<node CREATED="1417161758893" ID="ID_420730064" MODIFIED="1417161764602" TEXT="scala.Null"/>
</node>
<node CREATED="1417161750977" ID="ID_1343419640" MODIFIED="1417161758676" TEXT="scala.Nothing"/>
<node CREATED="1417164377911" ID="ID_1858385944" MODIFIED="1417164419230" TEXT="Nothing vs. Null">
<node CREATED="1417164420190" ID="ID_1615783725" MODIFIED="1417164423176" TEXT="Null">
<node CREATED="1417164427854" ID="ID_473657518" MODIFIED="1417164458626" TEXT="Null is a subtype of all references types"/>
<node CREATED="1417164466397" ID="ID_1010238349" MODIFIED="1417164515654" TEXT="Null is not a subtype of any value types"/>
<node CREATED="1417164515994" ID="ID_1100696038" MODIFIED="1417164548142" TEXT="null is  the only instance of Null "/>
<node CREATED="1417164555878" ID="ID_179153009" MODIFIED="1417164592717" TEXT="It&apos;s impossible to assign null to variable of value types "/>
</node>
<node CREATED="1417164423653" ID="ID_431524806" MODIFIED="1417164426298" TEXT="Nothing">
<node CREATED="1417164594496" ID="ID_1650251887" MODIFIED="1417164660996" TEXT="Nothing is a subtype of all other type  but Nothing itself "/>
<node CREATED="1417164663239" ID="ID_1044598342" MODIFIED="1417164686500" TEXT="no instance of Nothing"/>
<node CREATED="1417164687070" ID="ID_848151908" MODIFIED="1417164778324" TEXT="Nil =List[Nothing], Nil is an instance of List[T], because lists are convariant in Scala"/>
</node>
</node>
</node>
</node>
<node CREATED="1417173652831" FOLDED="true" ID="ID_1470577340" MODIFIED="1417176546199" TEXT="eq equals  ==">
<node CREATED="1417173677314" FOLDED="true" ID="ID_1713582867" MODIFIED="1417173715325" TEXT="Java">
<node CREATED="1417173688483" MODIFIED="1417173688483">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">// in Java<br /></span></font><font color="#cc7832"><span style="color: #cc7832">class </span></font>Foo{<br />    <font color="#cc7832"><span style="color: #cc7832">private int </span></font><font color="#9876aa"><span style="color: #9876aa">i</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    public </span></font>Foo(<font color="#cc7832"><span style="color: #cc7832">int </span></font>i){<font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">i</span></font>=i<font color="#cc7832"><span style="color: #cc7832">;</span></font>}<br />    <i><font color="#808080"><span style="color: #808080; font-style: italic">/*by default, '==' and 'equals' of User-defined class<br /></span><span style="color: #808080; font-style: italic">      inherit from Object. 'equals' has the SAME behavior as '=='<br /></span><span style="color: #808080; font-style: italic">     */<br /></span><span style="color: #808080; font-style: italic"><br /></span></font></i>}<br /><br /><font color="#cc7832"><span style="color: #cc7832">class </span></font>Bar{<br />    <font color="#cc7832"><span style="color: #cc7832">private int </span></font><font color="#9876aa"><span style="color: #9876aa">i</span></font><font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">    public </span></font>Bar(<font color="#cc7832"><span style="color: #cc7832">int </span></font>i){<font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">i</span></font>=i<font color="#cc7832"><span style="color: #cc7832">;</span></font>}<br />    <font color="#808080"><span style="color: #808080">// modify default behavior of 'equal'<br /></span><span style="color: #808080">    </span></font><font color="#cc7832"><span style="color: #cc7832">public boolean </span></font><font color="#ffc66d"><span style="color: #ffc66d">equals</span></font>(Object rhs){<br />        <font color="#cc7832"><span style="color: #cc7832">if </span></font>(rhs!=<font color="#cc7832"><span style="color: #cc7832">null </span></font>&amp;&amp; (rhs <font color="#cc7832"><span style="color: #cc7832">instanceof </span></font>Bar)){<br />            Bar r=(Bar)rhs<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">            if </span></font>(r.<font color="#9876aa"><span style="color: #9876aa">i</span></font>==<font color="#cc7832"><span style="color: #cc7832">this</span></font>.<font color="#9876aa"><span style="color: #9876aa">i</span></font>)<font color="#cc7832"><span style="color: #cc7832">return true;<br /></span><span style="color: #cc7832">            else return false;<br /></span><span style="color: #cc7832">        </span></font>}<br />        <font color="#cc7832"><span style="color: #cc7832">else</span></font>{<br />            <font color="#cc7832"><span style="color: #cc7832">return false;<br /></span><span style="color: #cc7832">        </span></font>}<br />    }<br />}<br /><br /><font color="#cc7832"><span style="color: #cc7832">public class </span></font>EqualTest {<br />    <font color="#cc7832"><span style="color: #cc7832">public static void </span></font><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(String args[]){<br />        String a=<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// values of a and b in constant pool<br /></span><span style="color: #808080">        </span></font>String b=<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font><font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// a and b reference to  the IDENTICAL object<br /></span><span style="color: #808080">        </span></font>Integer ia=<font color="#6897bb"><span style="color: #6897bb">10</span></font><font color="#cc7832"><span style="color: #cc7832">;  </span></font><font color="#808080"><span style="color: #808080">// values of ia and ib in constant pool<br /></span><span style="color: #808080">        </span></font>Integer ib=<font color="#6897bb"><span style="color: #6897bb">10</span></font><font color="#cc7832"><span style="color: #cc7832">;  </span></font><font color="#808080"><span style="color: #808080">// ia and ib reference to the IDENTICAL object<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(a==b)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(ia==ib)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>String a1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>String(<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// values of a and b in heap<br /></span><span style="color: #808080">        </span></font>String b1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>String(<font color="#6a8759"><span style="color: #6a8759">&quot;foobar&quot;</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// a and b reference to the DIFFERENT objects<br /></span><span style="color: #808080">        </span></font>Integer ia1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Integer(<font color="#6897bb"><span style="color: #6897bb">10</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// values of ia1 and ib1 in heap<br /></span><span style="color: #808080">        </span></font>Integer ib1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Integer(<font color="#6897bb"><span style="color: #6897bb">10</span></font>)<font color="#cc7832"><span style="color: #cc7832">; </span></font><font color="#808080"><span style="color: #808080">// ia1 and ib1 reference to the DIFFERENT objects<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(a1==b1)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(ia1==ib1)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        // '==' always means reference equal<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        // for objects of String and Wrappers of primitive types<br /></span><span style="color: #808080">        // 'equals' is different from '=='<br /></span><span style="color: #808080">        // 'equals' value/content equal<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        // for objects of user-defined class<br /></span><span style="color: #808080">        // 'equal' means '==' if the class just inherit 'equal' of Object<br /></span><span style="color: #808080">        // 'equal' is user-defined if user override 'equal' in subclass<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(a1.equals(b1))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">// true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(ia1.equals(ib1))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">// true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>Foo f1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Foo(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Foo f2=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Foo(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Foo f3=f1<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1==f2)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1.equals(f2))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1==f3)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(f1.equals(f3))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>Bar bar1=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Bar(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Bar bar2=<font color="#cc7832"><span style="color: #cc7832">new </span></font>Bar(<font color="#6897bb"><span style="color: #6897bb">1</span></font>)<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>Bar bar3=bar1<font color="#cc7832"><span style="color: #cc7832">;<br /></span><span style="color: #cc7832">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1==bar2)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1.equals(bar2))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1==bar3)<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">        </span></font>System.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">out</span></font></i>.println(bar1.equals(bar3))<font color="#cc7832"><span style="color: #cc7832">;</span></font><font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font>}<br />}<br /></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417176239705" FOLDED="true" ID="ID_369755319" MODIFIED="1417176250175" TEXT="Scala">
<node CREATED="1417176243279" MODIFIED="1417176243279">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre style="font-size: 16pt; color: #a9b7c6; background-color: #2b2b2b; font-family: Courier New"><font color="#808080"><span style="color: #808080">//in Scala<br /></span><span style="color: #808080">// eq in scala.AnyRef: reference equality,just like '==' Java<br /></span><span style="color: #808080">// == : value equality,just like 'equals' in java<br /></span><span style="color: #808080">// eq is final,you can't override<br /></span><span style="color: #808080">// == : can be user-defined by override 'equals'<br /></span><span style="color: #808080">// eq is NOT a member of  subtypes of scala.AnyVal<br /></span><span style="color: #808080">// so for primitives and String,'==' always means natural(content) equality <br /></span><span style="color: #808080">// for subtypes of scala.AnyRef, default '==' means 'eq'<br /></span><span style="color: #808080"><br /></span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Foo(init:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>){<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>=init<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">class </span></font></b>Bar(init:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>){<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">var </span></font></b><i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>=init<br />  <font color="#808080"><span style="color: #808080">// you must override 'equals', if you want customize '=='<br /></span><span style="color: #808080">  </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">override def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">equals</span></font>(rhs:Any):<font color="#cc7832"><span style="color: #cc7832">Boolean</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if</span></font></b>(rhs!=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">null </span></font></b>&amp;&amp; rhs.isInstanceOf[Bar]){ <font color="#808080"><span style="color: #808080">// instanceOf in Java<br /></span><span style="color: #808080">      </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>r:Bar=asInstanceOf[Bar] <font color="#808080"><span style="color: #808080">// downward cast in Java<br /></span><span style="color: #808080">      </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">if </span></font></b>(r.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>==<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">this</span></font></b>.<i><font color="#9876aa"><span style="color: #9876aa; font-style: italic">i</span></font></i>)<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return true<br /></span><span style="color: #cc7832; font-weight: bold">      else return false<br /></span><span style="color: #cc7832; font-weight: bold">    </span></font></b>}<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">else</span></font></b>{<br />      <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">return false<br /></span><span style="color: #cc7832; font-weight: bold">    </span></font></b>}<br />  }<br />}<br /><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">object </span></font></b>TestEqual {<br />  <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">def </span></font></b><font color="#ffc66d"><span style="color: #ffc66d">main</span></font>(args:Array[<font color="#4e807d"><span style="color: #4e807d">String</span></font>]):<font color="#cc7832"><span style="color: #cc7832">Unit</span></font>={<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>a:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>b:<font color="#cc7832"><span style="color: #cc7832">Int</span></font>=<font color="#6897bb"><span style="color: #6897bb">0<br /></span><span style="color: #6897bb">    </span></font><i><span style="font-style: italic">println</span></i>(a==b)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sa:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;<br /></span><span style="color: #6a8759">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sb:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;<br /></span><span style="color: #6a8759">    </span></font><i><span style="font-style: italic">println</span></i>(sa==sb)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(sa eq sb)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sa1:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>String(<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>sb1:<font color="#4e807d"><span style="color: #4e807d">String</span></font>=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>String(<font color="#6a8759"><span style="color: #6a8759">&quot;ranpanf&quot;</span></font>)<br /><br />    <i><span style="font-style: italic">println</span></i>(sa1==sb1)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(sa1 eq sb1)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fa:Foo=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fb:Foo=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Foo(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>fc:Foo=fa<br />    <br />    <i><span style="font-style: italic">println</span></i>(fa==fb)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fa eq fb)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fa==fc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(fa eq fc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080"><br /></span><span style="color: #808080">    </span></font><b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>ba:Bar=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>bb:Bar=<b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">new </span></font></b>Bar(<font color="#6897bb"><span style="color: #6897bb">0</span></font>)<br />    <b><font color="#cc7832"><span style="color: #cc7832; font-weight: bold">val </span></font></b>bc:Bar=ba<br />    <i><span style="font-style: italic">println</span></i>(ba==bb)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(ba eq bb)<font color="#808080"><span style="color: #808080">//false<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(ba==bc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">    </span></font><i><span style="font-style: italic">println</span></i>(ba eq bc)<font color="#808080"><span style="color: #808080">//true<br /></span><span style="color: #808080">  </span></font>}<br />}</pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1417176253443" ID="ID_1425826556" MODIFIED="1417176310169" TEXT="reference equality :  ==(Java) eq (Scala)"/>
<node CREATED="1417176269242" ID="ID_240517830" MODIFIED="1417176368620" TEXT="value equality : equals(Java) == (Scala)"/>
</node>
<node CREATED="1417176479326" ID="ID_1566184364" MODIFIED="1417176515744" TEXT="isInstanceOf[T]     --- instanceOf"/>
<node CREATED="1417176516940" ID="ID_1924227003" MODIFIED="1417176538464" TEXT="asInstanceOf[T]    --- downward cast"/>
<node CREATED="1417176547585" ID="ID_1964855677" MODIFIED="1417176605760" TEXT="view(implicit conversion)  --- ">
<node CREATED="1417176694661" ID="ID_545766543" MODIFIED="1417176704796" TEXT="primitive type cast"/>
</node>
</node>
<node CREATED="1409472118000" FOLDED="true" ID="ID_295975344" MODIFIED="1417359916559" POSITION="right" TEXT="scala.collection">
<node CREATED="1409472122709" FOLDED="true" ID="ID_1237860577" MODIFIED="1417287709228" TEXT="Array[T] -- immutable">
<node CREATED="1409472171393" ID="ID_1233597494" MODIFIED="1409472419390" TEXT="val week= new Array[String](7)"/>
<node CREATED="1409472488459" ID="ID_1815736155" MODIFIED="1409472546479" TEXT="val mon=week(1)  //String mon=week[1]">
<node CREATED="1409472547564" ID="ID_982284484" MODIFIED="1409472557706" TEXT="week.apply(1)"/>
</node>
<node CREATED="1409472420329" ID="ID_1978941606" MODIFIED="1409472463968" TEXT="week(0)=&quot;Sunday&quot; //week[0]=&quot;Sunday&quot;">
<node CREATED="1409472465905" ID="ID_1613690204" MODIFIED="1409472485493" TEXT="week.update(0,&quot;Sunday&quot;)"/>
</node>
<node CREATED="1409472574061" ID="ID_1929678241" MODIFIED="1409472629303" TEXT="val week=Array(&quot;sun.&quot;,&quot;mon&quot;,&quot;tue&quot;,&quot;wed&quot;,&quot;thu&quot;,&quot;fri&quot;,&quot;sat&quot;)">
<node CREATED="1409472631742" ID="ID_1072465346" MODIFIED="1409472676992" TEXT="companion object"/>
<node CREATED="1409472677638" ID="ID_851390130" MODIFIED="1409472687071" TEXT="Array.apply(&quot;sun&quot;,...)"/>
</node>
</node>
<node CREATED="1409472145056" FOLDED="true" ID="ID_1559914646" MODIFIED="1417337499034" TEXT="List[T] -- mutable">
<node CREATED="1409475923928" FOLDED="true" ID="ID_151495946" MODIFIED="1409477277437" TEXT=":::  -- ++ in haskell">
<node CREATED="1409477266657" ID="ID_1475658670" MODIFIED="1409477273648">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      def qsort(lst:List[Int]):List[Int]=lst match{
    </p>
    <p>
      &#160;&#160;&#160;&#160;case Nil=&gt; Nil
    </p>
    <p>
      &#160;&#160;&#160;&#160;case x::xs=&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;val llst=qsort(xs.filter(x&gt;))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;val rlst=qsort(xs.filter(x&lt;=))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;llst:::List(x):::rlst
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;}
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1409475933029" ID="ID_1942723276" MODIFIED="1409475958157" TEXT="::  -- : in haskell"/>
<node CREATED="1409475971331" ID="ID_222456920" MODIFIED="1409475979171" TEXT="List()/ Nil"/>
<node CREATED="1409475998708" ID="ID_1215546406" MODIFIED="1409476003027" TEXT="list(idx)"/>
<node CREATED="1409476019270" ID="ID_889135617" MODIFIED="1409476038711" TEXT="List.count(T=&gt;Boolean)"/>
<node CREATED="1409476053205" ID="ID_260795708" MODIFIED="1409476061225" TEXT="drop/dropRight"/>
<node CREATED="1409476061968" ID="ID_594096323" MODIFIED="1409476254030" TEXT="{exists,forall}(T=&gt;Boolean)"/>
<node CREATED="1409476081878" ID="ID_898392814" MODIFIED="1409476249247" TEXT="{filter,map}"/>
<node CREATED="1409476130031" ID="ID_354963845" MODIFIED="1409476244841" TEXT="foreach(T=&gt;Unit)"/>
<node CREATED="1409476214776" ID="ID_1818479154" MODIFIED="1409476240156" TEXT="isEmpty"/>
<node CREATED="1409476221085" ID="ID_143939762" MODIFIED="1409476235821" TEXT="length"/>
<node CREATED="1409476228513" ID="ID_1345139562" MODIFIED="1409476324759" TEXT="{head,tail,init,last}"/>
<node CREATED="1409476335728" ID="ID_909335227" MODIFIED="1409476338827" TEXT="remove"/>
<node CREATED="1409476339058" ID="ID_1765856301" MODIFIED="1409476341301" TEXT="mkString"/>
<node CREATED="1409476341559" ID="ID_1605522963" MODIFIED="1409476350200" TEXT="{reverse,sort}"/>
</node>
<node CREATED="1417287805571" ID="ID_832795235" MODIFIED="1417287808783" TEXT="Seq">
<node CREATED="1417287809957" ID="ID_958543992" MODIFIED="1417287812187" TEXT="List"/>
<node CREATED="1417287812426" ID="ID_1547839224" MODIFIED="1417287815911" TEXT="Array"/>
<node CREATED="1417287816127" ID="ID_6122848" MODIFIED="1417287821409" TEXT="Stream"/>
<node CREATED="1417287824227" ID="ID_1516020079" MODIFIED="1417287826816" TEXT="Iterator"/>
</node>
<node CREATED="1409472150388" FOLDED="true" ID="ID_540192773" MODIFIED="1409477890034" TEXT="Tuple -- immutable, distinct type">
<node CREATED="1409477426126" ID="ID_809401584" MODIFIED="1409477457641" TEXT="val pair=(&quot;String&quot;,0)"/>
<node CREATED="1409477459640" ID="ID_624465347" MODIFIED="1409477463006" TEXT="pair._1"/>
<node CREATED="1409477463446" ID="ID_1886492910" MODIFIED="1409477465505" TEXT="pair._n"/>
</node>
<node CREATED="1409472157139" FOLDED="true" ID="ID_575294016" MODIFIED="1417176686919" TEXT="Set/Map --immutable,mutable">
<node CREATED="1409477939775" ID="ID_461588781" MODIFIED="1409477959146" TEXT="scala.collection.Set/Map"/>
<node CREATED="1409477959571" ID="ID_844672005" MODIFIED="1409478019061" TEXT="scala.collection.{immutable,mutable}.{Hash,Tree,List,Sorted}{Set,Map}"/>
</node>
</node>
</node>
</map>
