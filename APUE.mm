<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1338637055049" ID="ID_143495120" MODIFIED="1366129770921" TEXT="APUE">
<node CREATED="1338637081000" FOLDED="true" ID="ID_640748604" MODIFIED="1363223776775" POSITION="right" TEXT="unbuffered IO (POSIX)">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1338638811768" ID="ID_1420511453" MODIFIED="1338638947315" TEXT="header">
<node CREATED="1338637134048" ID="ID_418835484" MODIFIED="1341892737423" TEXT="&lt;unistd.h&gt;">
<node CREATED="1338637168938" ID="ID_425199589" MODIFIED="1338637168938" TEXT="standard symbolic constants and types"/>
<node CREATED="1338637228910" ID="ID_259807824" MODIFIED="1338637249355" TEXT="STDIN_FILENO"/>
<node CREATED="1338637233896" ID="ID_1142684653" MODIFIED="1338637244861" TEXT="STDOUT_FILENO"/>
<node CREATED="1338637215866" ID="ID_1465760884" MODIFIED="1338637225714" TEXT="STDERR_FILENO"/>
</node>
<node CREATED="1338637479192" ID="ID_1989948994" MODIFIED="1341892739605" TEXT="&lt;limits.h&gt;">
<node CREATED="1338637506041" ID="ID_661969641" MODIFIED="1338637506041" TEXT="implementation-defined constants"/>
<node CREATED="1338637562000" ID="ID_671543073" MODIFIED="1338637567436" TEXT="OPEN_MAX">
<node CREATED="1338637571626" ID="ID_582298855" MODIFIED="1338637672588" TEXT="process can open OPEN_MAX+1 files at most"/>
<node CREATED="1338637684700" ID="ID_1710478800" MODIFIED="1338637716267" TEXT="file descriptors range from 0 through OPEN_MAX"/>
</node>
</node>
<node CREATED="1338639047051" ID="ID_1905888153" MODIFIED="1338639074970" TEXT="&lt;sys/types.h&gt;"/>
<node CREATED="1338639045242" ID="ID_1113121751" MODIFIED="1338639060783" TEXT="&lt;sys/stat.h&gt;"/>
<node CREATED="1338637857080" ID="ID_1644592417" MODIFIED="1338728798373" TEXT="&lt;fcntl.h&gt; ">
<node CREATED="1338637878256" ID="ID_1204748916" MODIFIED="1338637878256" TEXT="file control options"/>
<node CREATED="1338638247435" ID="ID_1816578570" MODIFIED="1338638269319" TEXT="file open flags">
<node CREATED="1338638362753" ID="ID_1192687196" MODIFIED="1341884928259" TEXT="essential">
<node CREATED="1338638271436" ID="ID_1758951476" MODIFIED="1338638283364" TEXT="O_RDONLY"/>
<node CREATED="1338638290583" ID="ID_624769379" MODIFIED="1338638299982" TEXT="O_WRONLY"/>
<node CREATED="1338638303687" ID="ID_886016896" MODIFIED="1338638307838" TEXT="O_RDWR"/>
</node>
<node CREATED="1338638403470" ID="ID_963865183" MODIFIED="1363191123468" TEXT="optional">
<node CREATED="1338638419932" ID="ID_487678898" MODIFIED="1338638435166" TEXT="O_APPEND"/>
<node CREATED="1338638435587" ID="ID_179847820" MODIFIED="1338638438939" TEXT="O_CREAT"/>
<node CREATED="1338638467715" ID="ID_86886944" MODIFIED="1338638475884" TEXT="O_TRUNC"/>
<node CREATED="1338638439286" ID="ID_1400112512" MODIFIED="1338638456591" TEXT="O_EXCL"/>
<node CREATED="1338638486970" FOLDED="true" ID="ID_1683581176" MODIFIED="1363191126468" TEXT="O_SYNC">
<node CREATED="1363190287716" ID="ID_1660992136" MODIFIED="1363190733761" TEXT="Have each write wait for physical I/O to complete. "/>
<node CREATED="1363190735982" ID="ID_1449205080" MODIFIED="1363190853591" TEXT="This causes  each write to wait for the data fo be written to disk before returning. "/>
<node CREATED="1363190858636" ID="ID_1201951453" MODIFIED="1363190955830" TEXT="in other case,copy new data into buffer cache."/>
</node>
<node CREATED="1363190552665" FOLDED="true" ID="ID_734397012" MODIFIED="1363191127475" TEXT="O_ASYNC">
<node CREATED="1363190991507" ID="ID_1975900493" MODIFIED="1363191005931" TEXT="asynchronized IO"/>
</node>
<node CREATED="1338638504692" FOLDED="true" ID="ID_1454998514" MODIFIED="1363191128529" TEXT="O_NOCTTY">
<node CREATED="1363190248943" ID="ID_1119359052" MODIFIED="1363190272312" TEXT="not controling terminal"/>
</node>
<node CREATED="1338638510975" FOLDED="true" ID="ID_614933203" MODIFIED="1363191129428" TEXT="O_NONBLOCK">
<node CREATED="1363190278028" ID="ID_100154832" MODIFIED="1363190285709" TEXT="nonblocking"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1338638791151" ID="ID_971797200" MODIFIED="1341892754681" TEXT="function">
<node CREATED="1338638914732" ID="ID_981656375" MODIFIED="1341892647265" TEXT="int open(const char *pathname, int oflag .... /* , mode t mode */ );">
<node CREATED="1338640176854" ID="ID_1988766910" MODIFIED="1338640602942" TEXT="open(pathname,O_RDONLY);">
<node CREATED="1338639578699" ID="ID_739055899" MODIFIED="1338640457885" TEXT="open a file for read, generate error if file does not exist"/>
</node>
<node CREATED="1338640268378" ID="ID_41727674" MODIFIED="1341892655663" TEXT="open(pathname,O_WRONLY|O_CREAT,mode);">
<node CREATED="1338639746878" ID="ID_735675190" MODIFIED="1338640363633" TEXT="open a file for write,create it if file does not exists,&#xa;otherwise just open file already existing"/>
</node>
<node CREATED="1338640370964" ID="ID_1147658715" MODIFIED="1338640502696" TEXT="open(pathname,O_WRONLY|O_CREAT|O_TRUNC,mode);">
<node CREATED="1338639897696" ID="ID_1864418119" MODIFIED="1338640446342" TEXT="open a file for write,if the file exists,open it and&#xa;truncate its size to 0,otherwise create a new file"/>
</node>
<node CREATED="1338640461788" ID="ID_1011631307" MODIFIED="1338640496258" TEXT="open(pathname,O_WRONLY|O_CREAT|O_APPEND,mode);">
<node CREATED="1338639987512" ID="ID_614475156" MODIFIED="1338640546670" TEXT="open a file for write,if the file exists,open it and seek its &#xa;pointor to the end of file,otherwise create a new file"/>
</node>
<node CREATED="1338640549227" ID="ID_1284992251" MODIFIED="1338640622725" TEXT="open(pahtname,O_WRONLY|O_CREAT|O_EXCL,mode);">
<node CREATED="1338640095721" ID="ID_362903588" MODIFIED="1338640599120" TEXT="create a file for write,if the file exists already,&#xa;generate error, otherwise create a new file"/>
</node>
</node>
<node CREATED="1338639300549" ID="ID_1890730798" MODIFIED="1341892660681" TEXT="int creat(const char *pathname, mode_t mode);">
<node CREATED="1338639485162" ID="ID_1945980091" MODIFIED="1338639564652" TEXT="equivalent to  open(pathname,O_WRONLY|O_CREAT|O_TRUNC,mode);"/>
</node>
<node CREATED="1338640698458" ID="ID_1797736224" MODIFIED="1338640721145" TEXT="int close (int filedes) ;  "/>
<node CREATED="1338640801792" ID="ID_382643923" MODIFIED="1341892665658" TEXT="off_t lseek (int filedes, off_t offset,  int whence) ;  ">
<node CREATED="1338640856498" ID="ID_1469930942" MODIFIED="1338640861923" TEXT="whence">
<node CREATED="1338640876730" ID="ID_1878498146" MODIFIED="1338640880554" TEXT="SEEK_SET">
<node CREATED="1338640912836" ID="ID_672688724" MODIFIED="1338640923261" TEXT="begin of file"/>
</node>
<node CREATED="1338640880920" ID="ID_1242541559" MODIFIED="1338640885834" TEXT="SEEK_CUR">
<node CREATED="1338640927548" ID="ID_1411132779" MODIFIED="1338640935945" TEXT="current position of file"/>
</node>
<node CREATED="1338640886168" ID="ID_679418835" MODIFIED="1338640894350" TEXT="SEEK_END">
<node CREATED="1338640937553" ID="ID_1703838887" MODIFIED="1338640941082" TEXT="end of file"/>
</node>
</node>
</node>
<node CREATED="1338641226270" ID="ID_407834183" MODIFIED="1338641526487" TEXT="int read(int filedes, char *buff, unsigned nbytes);  "/>
<node CREATED="1338641740516" ID="ID_1145365765" MODIFIED="1338641795629" TEXT="ssize_t write(int filedes, const void *buff, size_t nbytes);"/>
<node CREATED="1338639315897" ID="ID_431999587" MODIFIED="1338641803979" TEXT="open,create,close,read,write return -1 on error"/>
<node CREATED="1338796847993" ID="ID_807362399" MODIFIED="1338796891891" TEXT="&lt;unistd. h&gt;void sync (void) ;">
<node CREATED="1338796956481" ID="ID_1207894114" MODIFIED="1338797026668" TEXT="write dirty block in buffer cache to disk"/>
</node>
<node CREATED="1338796847993" ID="ID_205764871" MODIFIED="1338796895604" TEXT="&lt;unistd. h&gt;int fsync (int filedes) ;"/>
</node>
<node CREATED="1338642434921" ID="ID_1556299629" MODIFIED="1341892623420" TEXT="file I/O implement">
<node CREATED="1338642498913" ID="ID_1020971923" MODIFIED="1363191425411" TEXT="file descriptor table (u area)">
<icon BUILTIN="full-1"/>
<node CREATED="1338642538633" ID="ID_1126099437" MODIFIED="1363191429040" TEXT="file table">
<icon BUILTIN="full-2"/>
<node CREATED="1338642549384" ID="ID_1672547298" MODIFIED="1363191438724" TEXT="v-node(i-node) list">
<icon BUILTIN="full-3"/>
<node CREATED="1338642567802" ID="ID_1347448214" MODIFIED="1363191445079" TEXT="disk blocks">
<icon BUILTIN="full-4"/>
</node>
</node>
</node>
</node>
<node CREATED="1338642640976" ID="ID_1458417004" MODIFIED="1338642650290" TEXT="file sharing">
<node CREATED="1338642776765" ID="ID_842730631" MODIFIED="1338643150086" TEXT="different file descriptors,same file table entries">
<node CREATED="1338643173252" ID="ID_1900414900" MODIFIED="1338643196471" TEXT="int dup (int filedes) ;  ">
<node CREATED="1338643470514" ID="ID_775245686" MODIFIED="1338643564606" TEXT="copy filedes&apos;s file table entry pointer to lowest available file descritor"/>
</node>
<node CREATED="1338643198815" ID="ID_626762706" MODIFIED="1338643220065" TEXT="int dup2(int filedes,int filedes2);">
<node CREATED="1338643573349" ID="ID_915453463" MODIFIED="1338643682135" TEXT="close filedes2,then copy filedes&apos;s file table entry &#xa;pointer to lowest available file descritor"/>
</node>
<node CREATED="1363191522843" ID="ID_85134465" MODIFIED="1363191524244" TEXT="Both return: new file descriptor if OK, -1 on error  "/>
</node>
<node CREATED="1338642712002" ID="ID_1968267083" MODIFIED="1338643151957" TEXT="different file table entres ,same v-node"/>
<node CREATED="1338642680807" ID="ID_1085869172" MODIFIED="1339172881850" TEXT="different pathname(directory entry) ,same inode index"/>
</node>
<node CREATED="1338645252555" ID="ID_127324154" MODIFIED="1338645424627" TEXT="int fcntl(int filedes, int cmd , .../* int arg&#x7f; */ ); ">
<node CREATED="1338645426685" ID="ID_1044661340" MODIFIED="1338645442711" TEXT="duplicate file descriptor">
<node CREATED="1338645820045" ID="ID_847237458" MODIFIED="1338645869205" TEXT="fcntl(fd,F_DUPFD,n)">
<node CREATED="1338645872561" ID="ID_775041607" MODIFIED="1338645926024" TEXT="dup fd to descriptor equal or greater than n"/>
</node>
</node>
<node CREATED="1338645444242" ID="ID_262634947" MODIFIED="1338645699976" TEXT="get/set file descriptor flags">
<node CREATED="1338646023094" ID="ID_648315932" MODIFIED="1338646042220" TEXT="cmd=F_GETFD/F_SETFD"/>
<node CREATED="1338646042720" ID="ID_86506659" MODIFIED="1338646092767" TEXT="only FD_CLOEXEC is defined"/>
</node>
<node CREATED="1338645459027" ID="ID_1405213530" MODIFIED="1338645705629" TEXT="get/set file status flags">
<node CREATED="1338646109988" ID="ID_1179143799" MODIFIED="1363192170122" TEXT="cmd=F_GETFL">
<node CREATED="1338646136931" ID="ID_956846081" MODIFIED="1338646294147" TEXT="O_ACCMODE used to  obtain the access mode bit &#xa;O_RDONLY,O_WRONLY,ON_RDWR">
<node CREATED="1363192172462" ID="ID_1072696469" MODIFIED="1363192176556" TEXT="Unfortunately, the three access mode flags (O_RDONLY, O_WRONLY, and  O_RDWR) are not separate bits that can be tested. (As we mentioned ear-  lier, these three often have the values 0, 1, and 2, respectively, for historical  reasons; also these three values are mutually exclusive--a file can have  only one of the three enabled.) Therefore we must first use the  O_ACCMODE mask fo obtain the access mode bits and then compare the  result against any of the three values.  "/>
</node>
</node>
<node CREATED="1363192179689" ID="ID_281324774" MODIFIED="1363192190647" TEXT="cmd=F_SETFL">
<node CREATED="1363192191910" ID="ID_871909494" MODIFIED="1363192225678" TEXT="The only flags that can be changed are">
<node CREATED="1363192227556" ID="ID_278981556" MODIFIED="1363192239420" TEXT="O_APPEND"/>
<node CREATED="1363192239832" ID="ID_47134998" MODIFIED="1363192247454" TEXT="O_NONBLOCK"/>
<node CREATED="1363192247794" ID="ID_1884407164" MODIFIED="1363192258864" TEXT="O_SYNC"/>
<node CREATED="1363192259102" ID="ID_1215711035" MODIFIED="1363192264044" TEXT="O_ASYNC"/>
</node>
</node>
</node>
<node CREATED="1338645690417" ID="ID_1069714640" MODIFIED="1338645731081" TEXT="get/set asynchronous IO ownership">
<node CREATED="1363192336033" ID="ID_1284658543" MODIFIED="1363192361822" TEXT="F_GETOWN">
<node CREATED="1363192362810" ID="ID_1767444576" MODIFIED="1363192363916" TEXT="Get the process ID or process group ID currently receiving the SIGIO and  SIGURG signals. "/>
</node>
<node CREATED="1363192382120" ID="ID_213730015" MODIFIED="1363192387348" TEXT="F_SETOWN">
<node CREATED="1363192388337" ID="ID_422492941" MODIFIED="1363192389633" TEXT="Set the process ID or process group ID to receive the SIGIO and SIGURG  signals. A positive arg specifies a process ID. A negative arg implies a  process group ID equal to the absolute value of arg.  "/>
</node>
</node>
<node CREATED="1338645737354" ID="ID_1332558625" MODIFIED="1338645745473" TEXT="get/set record lock"/>
</node>
</node>
<node CREATED="1338639150708" ID="ID_8920670" MODIFIED="1341892631891" TEXT="misc">
<node CREATED="1338639177305" ID="ID_1756867882" MODIFIED="1338639189245" TEXT="PATH_MAX"/>
<node CREATED="1338639189525" ID="ID_1960610422" MODIFIED="1338639192312" TEXT="NAME_MAX"/>
<node CREATED="1338639192621" ID="ID_1102485188" MODIFIED="1338639227518" TEXT="_POSIX_NO_TRUNC"/>
<node CREATED="1338639237969" ID="ID_905980349" MODIFIED="1338639244430" TEXT="ENAMETOOLONG"/>
</node>
<node CREATED="1338642869205" ID="ID_1199434635" MODIFIED="1341892630700" TEXT="utility">
<node CREATED="1338642890664" ID="ID_12674521" MODIFIED="1338642892244" TEXT="od">
<node CREATED="1338642925061" ID="ID_288719590" MODIFIED="1338642925061" TEXT="dump files in octal and other formats"/>
</node>
</node>
</node>
<node CREATED="1338637081998" FOLDED="true" ID="ID_1029354476" MODIFIED="1363223771965" POSITION="right" TEXT="buffered IO (C Standard Libary)">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1338800410580" ID="ID_1589389692" MODIFIED="1363190004097" TEXT="buffering">
<node CREATED="1338801092372" ID="ID_1515962288" MODIFIED="1338801264575" TEXT="#include &lt;stdio.h&gt;  "/>
<node CREATED="1338801254667" ID="ID_1615250955" MODIFIED="1338801254667" TEXT="void setbuf(FILE *&#x7f;fp, char *buff);">
<node CREATED="1338801366184" ID="ID_505816062" MODIFIED="1338801369946" TEXT="buff">
<node CREATED="1338801373274" ID="ID_40240280" MODIFIED="1338801395350" TEXT="NULL">
<node CREATED="1338801398070" ID="ID_337204880" MODIFIED="1338801408275" TEXT="unbuffered"/>
</node>
<node CREATED="1338801409685" ID="ID_791193892" MODIFIED="1338801431527" TEXT="buff[BUFSIZ]">
<node CREATED="1338801438630" ID="ID_469011435" MODIFIED="1338801474731" TEXT="fully buffered or line buffered"/>
</node>
</node>
</node>
<node CREATED="1338801266874" FOLDED="true" ID="ID_402093280" MODIFIED="1363190056396" TEXT="int   setvbuf(FILE *fp&#x7f;, char *buff, int mode,  size_t size);  ">
<node CREATED="1338800420618" ID="ID_1323079286" MODIFIED="1338801505588" TEXT="fully buffered">
<node CREATED="1338800487940" ID="ID_34018836" MODIFIED="1338801060355" TEXT="default"/>
<node CREATED="1338801516794" ID="ID_302342715" MODIFIED="1338801561756" TEXT="mode=_IOFBF"/>
</node>
<node CREATED="1338800432108" ID="ID_1635687383" MODIFIED="1338801296532" TEXT="line buffered">
<node CREATED="1338800525778" ID="ID_952261751" MODIFIED="1338800565849" TEXT="stdin stdout(interactive)"/>
<node CREATED="1338801520125" ID="ID_676149399" MODIFIED="1338801572473" TEXT="mode=_IOLBF"/>
</node>
<node CREATED="1338800436577" ID="ID_737064901" MODIFIED="1338801286579" TEXT="unbuffered">
<node CREATED="1338800528812" ID="ID_1470931605" MODIFIED="1338800547222" TEXT="stderr(default)"/>
<node CREATED="1338801523830" ID="ID_1865543183" MODIFIED="1338801584185" TEXT="mode=_IONBF"/>
</node>
</node>
<node CREATED="1338801641005" ID="ID_1838798590" MODIFIED="1338801657980" TEXT="int fflush(FILE*fp);">
<node CREATED="1339853417041" ID="ID_1885903720" MODIFIED="1339853450204" TEXT="if fp==NULL, flush all output stream"/>
</node>
</node>
<node CREATED="1338801667892" ID="ID_859923928" MODIFIED="1363223691025" TEXT="open stream">
<node CREATED="1338801675045" ID="ID_1632086452" MODIFIED="1338801745232" TEXT="FILE*fopen(const char*pathname, const char * type);"/>
<node CREATED="1338801745844" ID="ID_165447621" MODIFIED="1338801811898" TEXT="FILE*freopen(const char*pathname, const char*type,FILE*fp);"/>
<node CREATED="1338801812200" ID="ID_81170830" MODIFIED="1338801841359" TEXT="FILE*fdopen(int fd,const char*type);">
<node CREATED="1338817220847" ID="ID_484020520" MODIFIED="1338817239899" TEXT="only r w a+ take effect"/>
</node>
<node CREATED="1338816236320" ID="ID_775836499" MODIFIED="1339403788291" TEXT="type">
<node CREATED="1338816765188" ID="ID_927380296" MODIFIED="1338816777169" TEXT="r">
<node CREATED="1338816805300" ID="ID_568484335" MODIFIED="1338816819230" TEXT="O_RDONLY"/>
</node>
<node CREATED="1338816778052" ID="ID_1229928108" MODIFIED="1338816778955" TEXT="w">
<node CREATED="1338816844150" ID="ID_433867928" MODIFIED="1338816878580" TEXT="O_WRONLY|O_CREAT|O_TRUNC"/>
</node>
<node CREATED="1338816779584" ID="ID_1998771831" MODIFIED="1338816779977" TEXT="a">
<node CREATED="1338816844150" ID="ID_131007715" MODIFIED="1338816895213" TEXT="O_WRONLY|O_CREAT|O_APPEND"/>
</node>
<node CREATED="1338816780317" ID="ID_909198921" MODIFIED="1338816783901" TEXT="r+">
<node CREATED="1338816932943" ID="ID_1870407267" MODIFIED="1338816970005" TEXT="O_RDWR"/>
</node>
<node CREATED="1338816784192" ID="ID_219214369" MODIFIED="1338816785914" TEXT="w+">
<node CREATED="1338816971452" ID="ID_1515836325" MODIFIED="1338816989790" TEXT="O_RDWR|O_CREAT|O_TRUNC"/>
</node>
<node CREATED="1338816786220" ID="ID_1271860717" MODIFIED="1338816789396" TEXT="a+">
<node CREATED="1338816991742" ID="ID_712648646" MODIFIED="1338817008905" TEXT="O_RDWR|O_CREAT|O_APPEND"/>
</node>
<node CREATED="1338816730590" ID="ID_296899652" MODIFIED="1339403794344" TEXT="restrictions">
<node CREATED="1338816333058" ID="ID_902687870" MODIFIED="1338816742242" TEXT="file must already exist">
<node CREATED="1338816532493" ID="ID_130730654" MODIFIED="1338816541001" TEXT="r">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816238409" ID="ID_366819271" MODIFIED="1338816546845" TEXT="w">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816239786" ID="ID_1010317549" MODIFIED="1338816548537" TEXT="a">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816240693" ID="ID_937343286" MODIFIED="1338816544591" TEXT="r+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816242641" ID="ID_1193408112" MODIFIED="1338816550641" TEXT="w+">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816245191" ID="ID_1321205688" MODIFIED="1338816551965" TEXT="a+">
<icon BUILTIN="button_cancel"/>
</node>
</node>
<node CREATED="1338816347962" ID="ID_28720158" MODIFIED="1338816347962" TEXT="previous contents of file discarded">
<node CREATED="1338816597592" ID="ID_670339201" MODIFIED="1338816604141" TEXT="r">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816238409" ID="ID_489414428" MODIFIED="1338816606372" TEXT="w">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816239786" ID="ID_30268881" MODIFIED="1338816608514" TEXT="a">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816240693" ID="ID_1477025101" MODIFIED="1338816615984" TEXT="r+">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816242641" ID="ID_55142609" MODIFIED="1338816621495" TEXT="w+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816245191" ID="ID_1773557124" MODIFIED="1338816638292" TEXT="a+">
<icon BUILTIN="button_cancel"/>
</node>
</node>
<node CREATED="1338816360042" ID="ID_1044485127" MODIFIED="1338816360042" TEXT="stream can be read">
<node CREATED="1338816625637" ID="ID_262534847" MODIFIED="1338816641214" TEXT="r">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816238409" ID="ID_1294774625" MODIFIED="1338816642901" TEXT="w">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816239786" ID="ID_403236003" MODIFIED="1338816644884" TEXT="a">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816240693" ID="ID_1672159718" MODIFIED="1338816646777" TEXT="r+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816242641" ID="ID_101369685" MODIFIED="1338816648448" TEXT="w+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816245191" ID="ID_1160995434" MODIFIED="1338816649962" TEXT="a+">
<icon BUILTIN="button_ok"/>
</node>
</node>
<node CREATED="1338816372684" ID="ID_1354410060" MODIFIED="1338816372684" TEXT="stream can be written">
<node CREATED="1338816653315" ID="ID_1212225865" MODIFIED="1338816658242" TEXT="r">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816238409" ID="ID_657335877" MODIFIED="1338816660976" TEXT="w">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816239786" ID="ID_298967103" MODIFIED="1338816663216" TEXT="a">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816240693" ID="ID_90103546" MODIFIED="1338816664789" TEXT="r+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816242641" ID="ID_691772861" MODIFIED="1338816666737" TEXT="w+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816245191" ID="ID_687770414" MODIFIED="1338816668078" TEXT="a+">
<icon BUILTIN="button_ok"/>
</node>
</node>
<node CREATED="1338816372685" ID="ID_1623899439" MODIFIED="1338816372685" TEXT="stream can be written only at end">
<node CREATED="1338816674652" ID="ID_1346587256" MODIFIED="1338816682907" TEXT="r">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816239786" ID="ID_1171068379" MODIFIED="1338816685163" TEXT="a">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816240693" ID="ID_1388275871" MODIFIED="1338816687449" TEXT="r+">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1338816238409" ID="ID_1035866914" MODIFIED="1338816698875" TEXT="w">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816242641" ID="ID_995247555" MODIFIED="1358933286248" TEXT="w+">
<icon BUILTIN="button_cancel"/>
</node>
<node CREATED="1338816245191" ID="ID_294824434" MODIFIED="1338816693346" TEXT="a+">
<icon BUILTIN="button_ok"/>
</node>
</node>
</node>
</node>
<node CREATED="1338817312409" ID="ID_1881272569" MODIFIED="1339403787152" TEXT="access permissions">
<node CREATED="1338817326449" ID="ID_1621545788" MODIFIED="1338817365941" TEXT="S_IRUSR |S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH"/>
</node>
</node>
<node CREATED="1338817376079" FOLDED="true" ID="ID_1351150672" MODIFIED="1338817408462" TEXT="close stream">
<node CREATED="1338817388364" ID="ID_1465316213" MODIFIED="1338817406690" TEXT="int fclose(FILE*fp);"/>
</node>
<node CREATED="1338817421641" ID="ID_792612529" MODIFIED="1339224240892" TEXT="read&amp;write stream">
<node CREATED="1338817436072" FOLDED="true" ID="ID_496230140" MODIFIED="1338818546974" TEXT="char-by-char">
<node CREATED="1338817507893" ID="ID_1065408924" MODIFIED="1338818459327" TEXT="input">
<node CREATED="1338817525498" ID="ID_1570209922" MODIFIED="1338817525498" TEXT="#include &lt;stdio.h&gt;"/>
<node CREATED="1338817525500" ID="ID_1231732612" MODIFIED="1338817535879" TEXT="int getc(FILE *&#x7f;fp);">
<node CREATED="1338817615038" ID="ID_760566269" MODIFIED="1338817623998" TEXT="can be macro"/>
<node CREATED="1338817939869" ID="ID_386399926" MODIFIED="1338817945355" TEXT="more efficient"/>
</node>
<node CREATED="1338817525501" ID="ID_463542191" MODIFIED="1338817540943" TEXT="int fgetc(FILE *fp&#x7f;);">
<node CREATED="1338817625986" ID="ID_1975437954" MODIFIED="1338817632633" TEXT="can&apos;t be macro"/>
</node>
<node CREATED="1338817525502" FOLDED="true" ID="ID_1756453454" MODIFIED="1338818545506" TEXT="int getchar(void);">
<node CREATED="1338818469826" ID="ID_133139280" MODIFIED="1338818486372" TEXT="getc(stdin);"/>
<node COLOR="#ff0000" CREATED="1338818120788" ID="ID_392087104" MODIFIED="1338818309530">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      All three return:next character if OK, EOF on end of file or error&#160;&#160;
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="messagebox_warning"/>
<node CREATED="1338818230649" ID="ID_260039046" MODIFIED="1338818230649" TEXT="#include &lt;stdio.h&gt;"/>
<node CREATED="1338818230649" ID="ID_766293909" MODIFIED="1338818230649" TEXT="int ferror(FILE *&#x7f;);"/>
<node CREATED="1338818230650" ID="ID_381370431" MODIFIED="1338818230650" TEXT="int feof(FILE *&#x7f;);">
<node CREATED="1338818230650" ID="ID_563340191" MODIFIED="1338818268648" TEXT="Both return:nonzero(true) if condition is true&#x7f; 0(&#x7f;false) otherwise"/>
</node>
<node CREATED="1338818230651" ID="ID_940508061" MODIFIED="1338818230651" TEXT="void clearerr(FILE *&#x7f;);"/>
</node>
</node>
<node CREATED="1338818319123" ID="ID_350793846" MODIFIED="1338818357748" TEXT="int ungetc(int c, FILE*&#x7f;);">
<node CREATED="1338818319125" ID="ID_1751951712" MODIFIED="1338818350740" TEXT="returns: c if OK, EOF on error"/>
</node>
</node>
<node CREATED="1338818391828" ID="ID_493282689" MODIFIED="1338818393668" TEXT="output">
<node CREATED="1338818404597" ID="ID_425584068" MODIFIED="1338818404597" TEXT="#include &lt;stdio.h&gt;"/>
<node CREATED="1338818404598" ID="ID_1201227349" MODIFIED="1338818404598" TEXT="int putc(int c, FILE *&#x7f;);">
<node CREATED="1338818447266" ID="ID_153890777" MODIFIED="1338818451140" TEXT="can be macro"/>
</node>
<node CREATED="1338818404599" ID="ID_576036826" MODIFIED="1338818404599" TEXT="int fputc(int c, FILE *&#x7f;);">
<node CREATED="1338818437972" ID="ID_1271068301" MODIFIED="1338818445071" TEXT="can&apos;t be macro"/>
</node>
<node CREATED="1338818404600" ID="ID_1640237903" MODIFIED="1338818404600" TEXT="int putchar (int c) ;">
<node CREATED="1338818404601" ID="ID_1552931066" MODIFIED="1338818456375" TEXT="all three return: c if OK, EOF on error"/>
<node CREATED="1338818490126" ID="ID_1233196553" MODIFIED="1338818503393" TEXT="putc(c,stdout);"/>
</node>
</node>
</node>
<node CREATED="1338817461990" FOLDED="true" ID="ID_148562358" MODIFIED="1338819924343" TEXT="line-by-line">
<node CREATED="1338818550476" FOLDED="true" ID="ID_849712951" MODIFIED="1338819077814" TEXT="input">
<node CREATED="1338818553756" ID="ID_883555174" MODIFIED="1338818553756" TEXT="#include &lt;stdio. h&gt;"/>
<node CREATED="1338818553757" ID="ID_785329250" MODIFIED="1338818574393" TEXT="char *fgets(char *buf,int n, FILE *&#x7f;);">
<node CREATED="1338818788680" ID="ID_1359076312" MODIFIED="1338818856389" TEXT="get no more than n-1 chars"/>
<node CREATED="1338818856722" ID="ID_933598447" MODIFIED="1338818890716" TEXT="terminated with null byte(&apos;\0&apos;)"/>
<node CREATED="1338818892323" ID="ID_1902185397" MODIFIED="1338818940383" TEXT="store newline"/>
</node>
<node CREATED="1338818553758" ID="ID_1199266836" MODIFIED="1338818553758" TEXT="char *gets (char *buf) ;">
<node CREATED="1338818553759" ID="ID_291024604" MODIFIED="1338818615497" TEXT="both return: buf if OK, NULL on end of file or error"/>
<node CREATED="1338818942716" ID="ID_53492501" MODIFIED="1338818948915" TEXT="deprecated"/>
<node CREATED="1338818949595" ID="ID_1573173220" MODIFIED="1338819027069" TEXT="get a line,can cause buffer overflow"/>
<node CREATED="1338819029098" ID="ID_1251207102" MODIFIED="1338819038825" TEXT="remove newline"/>
</node>
</node>
<node CREATED="1338819079021" ID="ID_373094498" MODIFIED="1338819081596" TEXT="output">
<node CREATED="1338819096666" ID="ID_1829467538" MODIFIED="1338819096666" TEXT="#include &lt;stdio. h&gt;"/>
<node CREATED="1338819096667" ID="ID_1656791849" MODIFIED="1338819108092" TEXT="int fputs(const char *str,FILE *&#x7f;);"/>
<node CREATED="1338819096667" ID="ID_1641358389" MODIFIED="1338819096667" TEXT="int puts (const char *str);">
<node CREATED="1338819096668" ID="ID_1354955650" MODIFIED="1338819124092" TEXT="both return: nonnegative value if OK, EOF on error"/>
</node>
</node>
</node>
<node CREATED="1338817466269" ID="ID_1881549682" MODIFIED="1339224244713" TEXT="block-by-block">
<node CREATED="1338819857475" ID="ID_1335569747" MODIFIED="1338819865414" TEXT="input">
<node CREATED="1338819857476" ID="ID_1389188275" MODIFIED="1338819904976" TEXT="size_t fread(void *ptr, size_t size, size_t nobj, FILE *&#x7f;);"/>
</node>
<node CREATED="1338819870587" ID="ID_684907402" MODIFIED="1338819873105" TEXT="output">
<node CREATED="1338819857478" ID="ID_1643610050" MODIFIED="1338819919839" TEXT="size_t fwrite(const void *ptr, size_t size, size_t nobj, FILE *&#x7f;);">
<node CREATED="1338819857478" ID="ID_841873777" MODIFIED="1339224252791" TEXT="both return: number of objects read or written">
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1338819938257" ID="ID_900543614" MODIFIED="1340466217658" TEXT="position stream">
<node CREATED="1338820091735" ID="ID_1858213938" MODIFIED="1338820099596" TEXT="long">
<node CREATED="1338820130865" ID="ID_224287580" MODIFIED="1338820130865" TEXT="#include &lt;stdio. h&gt;"/>
<node CREATED="1338820130867" ID="ID_1095382383" MODIFIED="1338820130867" TEXT="long ftell (FILE *&#x7f;) ;">
<node CREATED="1338820130867" ID="ID_1604833369" MODIFIED="1338820143489" TEXT="returns: current file position indicator if OK, -1L on error"/>
</node>
<node CREATED="1338820130868" ID="ID_712146296" MODIFIED="1338820130868" TEXT="int fseek(FILE *&#x7f;, long offset, int whence);">
<node CREATED="1338820130869" ID="ID_1711569111" MODIFIED="1338820130869" TEXT="Returns: 0 if OK, nonzero on error"/>
<node CREATED="1338820177253" ID="ID_187737526" MODIFIED="1338820263389" TEXT="whence">
<node CREATED="1338820269467" ID="ID_1656326635" MODIFIED="1338820278357" TEXT="SEEK_SET"/>
<node CREATED="1338820278877" ID="ID_533502281" MODIFIED="1338820283215" TEXT="SEEK_CUR"/>
<node CREATED="1338820283551" ID="ID_814250487" MODIFIED="1338820286223" TEXT="SEEK_END"/>
</node>
</node>
<node CREATED="1338820130870" ID="ID_1263288342" MODIFIED="1338820130870" TEXT="void rewind (FILE *&#x7f;) ;"/>
</node>
<node CREATED="1338820092506" ID="ID_1172715283" MODIFIED="1338820114175" TEXT="fpos_t">
<node CREATED="1338820351626" ID="ID_673686864" MODIFIED="1338820351626" TEXT="#include &lt;stdio.h&gt;"/>
<node CREATED="1338820351627" ID="ID_1239795956" MODIFIED="1338820363391" TEXT="int fgetpos(FILE *&#x7f;,fpos_t *pos) ;"/>
<node CREATED="1338820351628" ID="ID_1466617170" MODIFIED="1338820377291" TEXT="int fsetpos(FILE *&#x7f;,const fpos_t *pos);">
<node CREATED="1338820351630" ID="ID_1767912310" MODIFIED="1338820392855" TEXT="both return: 0 if OK, nonzero on error"/>
</node>
</node>
</node>
<node CREATED="1338820413858" FOLDED="true" ID="ID_1092024099" MODIFIED="1339853396456" TEXT="formatted IO">
<node CREATED="1338820435478" ID="ID_1684300203" MODIFIED="1338820438601" TEXT="input">
<node CREATED="1338820552060" ID="ID_569910942" MODIFIED="1338820552060" TEXT="#include &lt;stdio.h&gt;">
<node CREATED="1338820552061" ID="ID_208371087" MODIFIED="1338820552061" TEXT="int printf(const char *format, ...);"/>
<node CREATED="1338820552062" ID="ID_1258360863" MODIFIED="1338820552062" TEXT="int fprintf(FILE *stream, const char *format, ...);"/>
<node CREATED="1338820552062" ID="ID_603466027" MODIFIED="1338820552062" TEXT="int sprintf(char *str, const char *format, ...);"/>
<node CREATED="1338820552063" ID="ID_1091821177" MODIFIED="1338820552063" TEXT="int snprintf(char *str, size_t size, const char *format, ...);"/>
</node>
<node CREATED="1338820552064" ID="ID_16208512" MODIFIED="1338820552064" TEXT="#include &lt;stdarg.h&gt;">
<node CREATED="1338820552065" ID="ID_769529621" MODIFIED="1338820578025" TEXT="int vprintf(const char *format, va_list ap);"/>
<node CREATED="1338820552066" ID="ID_1489389107" MODIFIED="1338820578024" TEXT="int vfprintf(FILE *stream, const char *format, va_list ap);"/>
<node CREATED="1338820552066" ID="ID_1834654679" MODIFIED="1338820578023" TEXT="int vsprintf(char *str, const char *format, va_list ap);"/>
<node CREATED="1338820552067" ID="ID_752974167" MODIFIED="1338820578022" TEXT="int vsnprintf(char *str, size_t size, const char *format, va_list ap);"/>
</node>
</node>
<node CREATED="1338820438859" ID="ID_736451510" MODIFIED="1338820441091" TEXT="output">
<node CREATED="1338820744497" ID="ID_269448548" MODIFIED="1338820744497" TEXT="#include &lt;stdio.h&gt;">
<node CREATED="1338820744498" ID="ID_565068543" MODIFIED="1338820744498" TEXT="int scanf(const char *format, ...);"/>
<node CREATED="1338820744499" ID="ID_39576912" MODIFIED="1338820744499" TEXT="int fscanf(FILE *stream, const char *format, ...);"/>
<node CREATED="1338820744500" ID="ID_916205632" MODIFIED="1338820744500" TEXT="int sscanf(const char *str, const char *format, ...);"/>
</node>
<node CREATED="1338820744500" ID="ID_746888925" MODIFIED="1338820744500" TEXT="#include &lt;stdarg.h&gt;">
<node CREATED="1338820744501" ID="ID_1919514439" MODIFIED="1338820744501" TEXT="int vscanf(const char *format, va_list ap);"/>
<node CREATED="1338820744502" ID="ID_1371609697" MODIFIED="1338820744502" TEXT="int vsscanf(const char *str, const char *format, va_list ap);"/>
<node CREATED="1338820744503" ID="ID_1783127301" MODIFIED="1338820744503" TEXT="int vfscanf(FILE *stream, const char *format, va_list ap);"/>
</node>
</node>
</node>
<node CREATED="1338820896265" FOLDED="true" ID="ID_1677705107" MODIFIED="1339853393112" TEXT="fileno">
<node CREATED="1338820916798" ID="ID_1159023612" MODIFIED="1338820916798" TEXT="int fileno(FILE *&#x7f;);"/>
</node>
<node CREATED="1338821181726" FOLDED="true" ID="ID_889499206" MODIFIED="1339853391342" TEXT="temp file">
<node CREATED="1338821225233" ID="ID_482994248" MODIFIED="1338821225233" TEXT="char *tempnam(const char *dir, const char *pfx);"/>
<node CREATED="1338821246051" ID="ID_444252212" MODIFIED="1338821246051" TEXT="char *tmpnam(char *s);"/>
<node CREATED="1338821261635" ID="ID_474254587" MODIFIED="1338821261635" TEXT="FILE *tmpfile(void);"/>
</node>
<node CREATED="1338821680335" FOLDED="true" ID="ID_1007390824" MODIFIED="1339853389677" TEXT="alternatives to standard IO">
<node CREATED="1338821696927" ID="ID_1518971894" MODIFIED="1338821717243" TEXT="fio"/>
<node CREATED="1338821717607" ID="ID_362939942" MODIFIED="1338821724184" TEXT="sfio"/>
<node CREATED="1338821724813" ID="ID_601843360" MODIFIED="1338821751041" TEXT="ASI(mmap)">
<node CREATED="1338821767172" ID="ID_127271931" MODIFIED="1338821782847" TEXT="Alloc Stream Interface"/>
</node>
</node>
</node>
<node CREATED="1341233738980" FOLDED="true" ID="ID_1592264497" MODIFIED="1366266670602" POSITION="right" TEXT="Advanced  IO">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1363183972035" ID="ID_1877880927" MODIFIED="1363183978609" TEXT="IO mode">
<node CREATED="1363184032875" FOLDED="true" ID="ID_1181800838" MODIFIED="1363184192659" TEXT="busy-wait">
<icon BUILTIN="full-1"/>
<node CREATED="1341233893050" ID="ID_1682300774" MODIFIED="1363184055393" TEXT="monoprogramming"/>
<node CREATED="1363184058925" ID="ID_347234273" MODIFIED="1363184113620" TEXT="IO and computing serialized"/>
</node>
<node CREATED="1363184117289" ID="ID_864814042" MODIFIED="1363184136495" TEXT="blocking">
<icon BUILTIN="full-2"/>
</node>
<node CREATED="1363184139639" ID="ID_1561552708" MODIFIED="1363184150999" TEXT="nonblocking">
<icon BUILTIN="full-3"/>
</node>
<node CREATED="1363184155195" ID="ID_1540465569" MODIFIED="1363184171175" TEXT="asynchronous">
<icon BUILTIN="full-4"/>
</node>
</node>
<node CREATED="1341237063338" ID="ID_1977167150" MODIFIED="1363192472122" TEXT="record locking">
<node CREATED="1341238164101" ID="ID_226880162" MODIFIED="1357729409409" TEXT="fcntl">
<node CREATED="1341237086018" ID="ID_478362268" MODIFIED="1341238197524" TEXT="#include&lt;sys/types.h&gt;"/>
<node CREATED="1341237113328" ID="ID_976998802" MODIFIED="1341238197514" TEXT="#include&lt;unistd.h&gt;"/>
<node CREATED="1341237120418" ID="ID_425834071" MODIFIED="1341238197514" TEXT="#include&lt;fcntl.h&gt;"/>
<node CREATED="1341237145798" ID="ID_1525845596" MODIFIED="1341238197514" TEXT="int fcntl (int filedes, int cmd .... /* struct flock *flockptr */ );  ">
<node CREATED="1341237177068" ID="ID_1001218871" MODIFIED="1341237180860" TEXT="cmd">
<node CREATED="1341237182978" ID="ID_1510825903" MODIFIED="1341237322181" TEXT="F_GETLK">
<node CREATED="1341237349419" ID="ID_793402554" MODIFIED="1341237441191" TEXT="Determine if the lock described by flockptr is blocked by some other lock.  "/>
<node CREATED="1341237479449" ID="ID_1129974988" MODIFIED="1341237505991" TEXT="if some other lock exists">
<node CREATED="1341237515930" ID="ID_1245707702" MODIFIED="1341237625592" TEXT=" flockptr is overwrited"/>
</node>
<node CREATED="1341237490859" ID="ID_1143214622" MODIFIED="1341237513912" TEXT="otherwise">
<node CREATED="1341237581970" ID="ID_1736869510" MODIFIED="1341237656452" TEXT="flockptr-&gt;l_type set to F_UNLCK,others unchanged"/>
</node>
</node>
<node CREATED="1341237322530" ID="ID_1328945968" MODIFIED="1341237328671" TEXT="F_SETLK">
<node CREATED="1341237659900" ID="ID_168468619" MODIFIED="1341237890482" TEXT="obtain lock , returns immediately with errno set to either EACCES or EAGAIN if some other lock prevents from obtaining lock."/>
</node>
<node CREATED="1341237328909" ID="ID_525218682" MODIFIED="1341237336531" TEXT="F_SETLKW">
<node CREATED="1341237874440" ID="ID_678499269" MODIFIED="1341237920902" TEXT="obtain lock, goes to sleep if some other lock prevent from obtaining lock"/>
</node>
</node>
<node CREATED="1341237208558" ID="ID_1881895460" MODIFIED="1357729448819" TEXT="flockptr">
<node CREATED="1341237216108" ID="ID_1888920116" MODIFIED="1363192749006">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct flock {
    </p>
    <p>
      &#160;&#160;&#160;&#160;short l_type; /* F_RDLCK, F_WRLCK, or F_UNLCK */
    </p>
    <p>
      &#160;&#160;&#160;&#160;off_t l_start; /* offset in bytes, relative to 1_whence */
    </p>
    <p>
      &#160;&#160;&#160;&#160;short l_whence; /* SEEK_SET, SEEK_CUR, or SEEK_END */
    </p>
    <p>
      &#160;&#160;&#160;&#160;off_t l_len; /* length, in bytes; 0 means lock to EOF */
    </p>
    <p>
      &#160;&#160;&#160;&#160;pid_t l_pid; /* returned with F_GETLK */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1341237161518" ID="ID_890983105" MODIFIED="1341238197503" TEXT="Returns: depends on cmd if OK,-1 on error  "/>
</node>
<node CREATED="1341238202932" ID="ID_1681894481" MODIFIED="1357729755918" TEXT="Locks are associated with a process and a file. This has two implications. The  first is obvious: when a process terminates all its locks are released. The second  is far from obvious: whenever a descriptor is closed, any locks on the file referenced by that descriptor for that process are released. "/>
<node CREATED="1341238280012" ID="ID_148901281" MODIFIED="1341238282154" TEXT="Locks are never inherited by the child across a fork. "/>
<node CREATED="1341238292542" ID="ID_1693962238" MODIFIED="1341238294344" TEXT="Locks may be inherited by a new program across an exec. "/>
</node>
<node CREATED="1363184228958" FOLDED="true" ID="ID_914696221" MODIFIED="1363192768864" TEXT="IO multiplexing">
<node CREATED="1363184240446" ID="ID_1819502289" MODIFIED="1363184243574" TEXT="select">
<node CREATED="1363184267740" ID="ID_1042354335" MODIFIED="1363184366376" TEXT="#include &lt;sys/types.h&gt; /* fd_set data type */ &#xa;#include &lt;sys/time.h&gt; /* struct timeval */ &#xa;#include &lt;unistd.h&gt;  /* function prototype might be here */ &#xa;&#x1f;int select(int maxfdpl, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *tvptr); &#xa;&#x1f;Returns: count of ready descriptors, 0 on timeout, -1 on error &#xa;">
<node CREATED="1363184303749" ID="ID_1724210638" MODIFIED="1363184376229" TEXT="tvptr">
<node CREATED="1363184377403" ID="ID_1434006835" MODIFIED="1363184393471" TEXT="tvptr==NULL">
<node CREATED="1363184394903" ID="ID_912774625" MODIFIED="1363184415452" TEXT="Wait forever. "/>
<node CREATED="1363184418102" ID="ID_1060693959" MODIFIED="1363184477080" TEXT="can be interrupted&#xff0c;then return -1 with errno set to EINTR"/>
</node>
<node CREATED="1363184480416" ID="ID_1107766968" MODIFIED="1363184521131" TEXT="tvptr-&gt;tv_sec==0 &amp;&amp; tvptr-&gt;tv.usec==0">
<node CREATED="1363184523255" ID="ID_1003360748" MODIFIED="1363184567282" TEXT="nonblocking,return immediately if no IO operations are ready"/>
</node>
<node CREATED="1363184601240" ID="ID_1704861950" MODIFIED="1363184622397" TEXT="tvptr-&gt;tv_sec!==0 || tvptr-&gt;tv.usec!=0">
<node CREATED="1363184623472" ID="ID_704635246" MODIFIED="1363184653345" TEXT="timeout"/>
<node CREATED="1363184694719" ID="ID_67198936" MODIFIED="1363184714892" TEXT="Return is made when  one of the specified descriptors is ready or when the rime-out value expires. "/>
<node CREATED="1363184715648" ID="ID_1051164853" MODIFIED="1363184741485" TEXT="0 on time-out value expires"/>
<node CREATED="1363184742313" ID="ID_1074396031" MODIFIED="1363184773598" TEXT="-1 on interruption"/>
</node>
</node>
<node CREATED="1363184889921" FOLDED="true" ID="ID_307735917" MODIFIED="1363185503835" TEXT="fd_set">
<node CREATED="1363184895461" ID="ID_509721850" MODIFIED="1363184978470" TEXT="FD_ZERO(fd_set*fdset)">
<node CREATED="1363185050816" ID="ID_1184306002" MODIFIED="1363185079686" TEXT="clear all bits in fdset(init)"/>
</node>
<node CREATED="1363184979130" ID="ID_854709311" MODIFIED="1363185021749" TEXT="FD_SET(int fd,fd_set *fdset)">
<node CREATED="1363185080978" ID="ID_1465329682" MODIFIED="1363185159602" TEXT="turn on bit for fd in fd_set"/>
</node>
<node CREATED="1363184992721" ID="ID_1271504391" MODIFIED="1363185039266" TEXT="FD_CLR(int fd,fd_set *fdset)">
<node CREATED="1363185087408" ID="ID_1656211882" MODIFIED="1363185180246" TEXT="turn off bit for fd in fd_set"/>
</node>
<node CREATED="1363184997974" ID="ID_604752929" MODIFIED="1363185048557" TEXT="FD_ISSET(int fd,fd_set*fdset)">
<node CREATED="1363185094491" ID="ID_1497366803" MODIFIED="1363185217737" TEXT="test bit  for fd in fd_set"/>
</node>
</node>
<node CREATED="1363185333928" ID="ID_365664696" MODIFIED="1363185350115" TEXT="readfds,writefds,exceptfds">
<node CREATED="1363185354861" FOLDED="true" ID="ID_764004916" MODIFIED="1363185362158" TEXT="usleep">
<node CREATED="1363185351305" ID="ID_1450656227" MODIFIED="1363185359502" TEXT="Any (or ail) of the middle three arguments to select (the pointers to the descriptor  sets) can be null pointers, if we&apos;re not interested in that condition. If all three pointers  are NULL, then we have a higher precision timer than provided by sleep. "/>
</node>
</node>
<node CREATED="1363185505791" FOLDED="true" ID="ID_1296494721" MODIFIED="1363185733450" TEXT="maxfdpl">
<node CREATED="1363185518399" ID="ID_848095732" MODIFIED="1363185539577" TEXT="The first argument to select, maxfdpl, stands for &quot;&apos;max fd plus I.&quot; We calculate  the highest descriptor that we&apos;re interested in, in any of the three descriptor sets, add 1,  and that&apos;s the first argument. We could just set the first argument to FD_SETSIZE, a  constant in &lt;sys/types. h&gt; that specifies the maximum number of descriptors (often  I/O Multiplexing 399  &#x1f;256 or 1024), but this value is too large for most applications. Indeed, most applications  probably use between 3 and 10 descriptors. (There are applications that need many  more descriptors, but these aren&apos;t the typical Unix program.) By specifying the highest  descriptor that we&apos;re interested in, the kernel can avoid going through hundreds of  unused bits in the three descriptor sets, looking for bits that are turned on.  "/>
<node CREATED="1363185583548" ID="ID_1171404557" MODIFIED="1363185584737" TEXT="The reason we have to add 1 to the maximum descriptor number is because descriptors  start at 0, and the first argument is really a count of the number of descriptors to check  (starting with descriptor 0).  "/>
</node>
<node CREATED="1363185734457" ID="ID_848915727" MODIFIED="1363185735659" TEXT="&quot;ready&quot; means. ">
<node CREATED="1363185747834" ID="ID_261087257" MODIFIED="1363185762028" TEXT="1. A descriptor in the read set (readfds) is considered ready if a read from that  descriptor won&apos;t block.  "/>
<node CREATED="1363185776631" ID="ID_1826673171" MODIFIED="1363185777868" TEXT="2. A descriptor in the write set (writefds) is considered ready if a write to that  descriptor won&apos;t block.  "/>
<node CREATED="1363185789991" ID="ID_1825419702" MODIFIED="1363185798628" TEXT="3. A descriptor in the exception set (exceptfds) is considered ready if there is an  exception condition pending on that descriptor. Currently an exception condi-  tion corresponds to (a) the arrival of out-of-band data on a network connection,  or (b) certain conditions occurring on a pseudo terminal that has been placed  into packet mode. (Section 15.10 of Stevens [1990] describes this latter condition.)  "/>
</node>
<node CREATED="1363185957518" FOLDED="true" ID="ID_360102744" MODIFIED="1363189819487" TEXT="EOF">
<node CREATED="1363185953821" ID="ID_1739882279" MODIFIED="1363185963453" TEXT="If we encounter the end of file on a descriptor, that descriptor is considered readable  by select. We then call read and it returns 0, the normal Unix way to signify end of  file. (Many people incorrectly assume select indicates an exception condition on a  descriptor when the end of file is reached.)  "/>
</node>
</node>
</node>
</node>
<node CREATED="1363189830636" ID="ID_889823763" MODIFIED="1363189935881">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      #include &lt;fcntl.h&gt;
    </p>
    <p>
      #include &quot;ourhdr.h&quot;
    </p>
    <p>
      void set_fl(int fd, int flags)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int val;
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* flags are file status flags to turn on */
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ( (val = fcntl(fd, F_GETFL, 0)) &lt; 0)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err_sys(&quot;fcntl F_GETFL error&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;val I= flags; /* turn on flags */&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (fcntl(fd, F_SETFL, val) &lt; 0)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;err_sys(&quot;fcntl F_SETFL error&quot;);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1341283732120" FOLDED="true" ID="ID_1335444766" MODIFIED="1363164550858" TEXT="memory mapped  IO">
<node CREATED="1341283750539" ID="ID_731699793" MODIFIED="1341886071068" TEXT="mmap">
<node CREATED="1341283908429" ID="ID_190168221" MODIFIED="1341283930412" TEXT="#include&lt;sys/types.h&gt;"/>
<node CREATED="1341283930823" ID="ID_879360502" MODIFIED="1341283955629" TEXT="#include&lt;sys/mman.h&gt;"/>
<node CREATED="1341283956805" ID="ID_917038823" MODIFIED="1341885344077" TEXT="void *mmap(void *start, size_t length, int prot, int flags,  int fd, off_t offset);">
<node CREATED="1341284581178" ID="ID_1994952586" MODIFIED="1341284583457" TEXT="prot">
<node CREATED="1341284591567" ID="ID_97003155" MODIFIED="1341284600383" TEXT="PROT_READ"/>
<node CREATED="1341284600685" ID="ID_1100412528" MODIFIED="1341284606163" TEXT="PROT_WRITE"/>
<node CREATED="1341284622596" ID="ID_205813009" MODIFIED="1341284626685" TEXT="PROT_EXEC"/>
<node CREATED="1341284628438" ID="ID_1950181779" MODIFIED="1341284633822" TEXT="PROT_NONE">
<node CREATED="1341284679863" ID="ID_1789453146" MODIFIED="1341284691331" TEXT="can&apos;t be accessed"/>
</node>
</node>
<node CREATED="1341284583759" ID="ID_1122628258" MODIFIED="1341284586913" TEXT="flags">
<node CREATED="1341284700011" ID="ID_689745019" MODIFIED="1341284705208" TEXT="MAP_FIXED">
<node CREATED="1341284715042" ID="ID_1468049440" MODIFIED="1341284768193" TEXT="user specifies start addr for mapped file"/>
</node>
<node CREATED="1341284769915" ID="ID_596995236" MODIFIED="1341284788403" TEXT="MAP_SHARED">
<node CREATED="1341284797160" ID="ID_1097275380" MODIFIED="1341284884162" TEXT="store operations modify orignal mapped file"/>
</node>
<node CREATED="1341284800896" ID="ID_1985585062" MODIFIED="1341284807216" TEXT="MAP_PRIVATE">
<node CREATED="1341284886601" ID="ID_1128526342" MODIFIED="1341284933559" TEXT="a copy created,store operations just modify the copy of orignal mapped file "/>
</node>
</node>
<node CREATED="1341285035598" ID="ID_819831644" MODIFIED="1341285665369" TEXT="offset">
<node CREATED="1341285667546" ID="ID_103009520" MODIFIED="1341285756478" TEXT="offset must be a multiple of the page size">
<node CREATED="1341285667546" ID="ID_1381466438" MODIFIED="1341285789175" TEXT="(SVR4)  sysconf(_SC_PAGE_SIZE)."/>
<node CREATED="1341285793175" ID="ID_514436832" MODIFIED="1341285839509" TEXT="(4.3+BSD) constant NBPG in the  header &lt;sys/parara. h&gt;"/>
</node>
</node>
</node>
<node CREATED="1341284035858" ID="ID_1085890391" MODIFIED="1341284039963" TEXT="Returns: starting address of mapped region if OK, -1 on error  "/>
<node CREATED="1341286120939" ID="ID_553847674" MODIFIED="1341886085468" TEXT="signal triggered">
<node CREATED="1341286152269" ID="ID_1210505940" MODIFIED="1341286172379" TEXT="SIGSEGV">
<node CREATED="1341286193954" ID="ID_190871733" MODIFIED="1341286193954" TEXT="Attempted write into a region mapped as read-only."/>
</node>
<node CREATED="1341286172697" ID="ID_1667818105" MODIFIED="1341286178268" TEXT="SIGBUS">
<node CREATED="1341286234287" ID="ID_627078458" MODIFIED="1341286345064" TEXT="Attempted access to a portion of the buffer that does not  correspond  to the file  (for  example,  beyond  the end  of  the file, including the case where  another process has truncated the file)."/>
</node>
</node>
<node CREATED="1341286374788" FOLDED="true" ID="ID_343853064" MODIFIED="1341286474164" TEXT="inheritance">
<node CREATED="1341286414815" ID="ID_1505640876" MODIFIED="1341286460845" TEXT="memory mapped region inherited by fork"/>
<node CREATED="1341286461334" ID="ID_1442917312" MODIFIED="1341286470524" TEXT="not inherited by exec"/>
</node>
</node>
<node CREATED="1341283902244" ID="ID_1336146309" MODIFIED="1341283905943" TEXT="munmap">
<node CREATED="1341286503650" ID="ID_1479186748" MODIFIED="1341286503650" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341286503650" ID="ID_170058458" MODIFIED="1341286503650" TEXT="#include &lt;sys/mman.h&gt;"/>
<node CREATED="1341286503650" ID="ID_1583422332" MODIFIED="1341286503650" TEXT="int munmap(caddr_t addr, size_t len);"/>
<node CREATED="1341286518429" ID="ID_1312469547" MODIFIED="1341286520066" TEXT="Returns: 0 if OK, -1 on error  "/>
<node CREATED="1341286530856" ID="ID_920248923" MODIFIED="1341286546843" TEXT="A memory mapped region is automatically unmapped when the process terminates, or by calling munmap directly. Closing the file descriptor filedes does hot unmap  the region.  "/>
<node CREATED="1341292519107" ID="ID_563840572" MODIFIED="1341292562196" TEXT="munmap does not affect the object that was mapped,that is, the call to munmap does  not cause the contents of the mapped region to be written to the disk file. The updating  of the disk file for a MAP_SHARED region happens automatically by the kernel&apos;s virtual  memory algorithm as we store into the memory mapped region.  "/>
</node>
<node CREATED="1341293077169" ID="ID_1720311487" MODIFIED="1341293079433" TEXT="msync">
<node CREATED="1341293096019" ID="ID_284263614" MODIFIED="1341293099056" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341293096019" ID="ID_547716544" MODIFIED="1341293099087" TEXT="#include &lt;sys/mman.h&gt;"/>
<node CREATED="1341293081382" ID="ID_975816871" MODIFIED="1341293081382" TEXT="int msync(void *start, size_t length, int flags);">
<node CREATED="1341293149220" ID="ID_51874461" MODIFIED="1341293154337" TEXT="MS_ASYNC"/>
<node CREATED="1341293155341" ID="ID_518465068" MODIFIED="1341293169945" TEXT="MS_SYNC"/>
<node CREATED="1341293170949" ID="ID_1944948368" MODIFIED="1341293172636" TEXT="MS_INVALIDATE"/>
</node>
<node CREATED="1341293196367" ID="ID_151402877" MODIFIED="1341293199005" TEXT="Returns: 0 if OK, -1 on error   "/>
</node>
</node>
</node>
<node CREATED="1341293673913" ID="ID_1427592362" MODIFIED="1363164521768" POSITION="right" TEXT="IPC(InterProcess Communication)">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1341295949046" FOLDED="true" ID="ID_182899331" MODIFIED="1363164531747" TEXT="System V  IPC">
<node CREATED="1341296010736" FOLDED="true" ID="ID_1227441844" MODIFIED="1358084393839" TEXT="getXXX">
<node CREATED="1341300368793" ID="ID_1217472975" MODIFIED="1341300433666" TEXT="creates a  new IPC structure or obtains a existed IPC structure"/>
<node CREATED="1341300399147" ID="ID_14596799" MODIFIED="1341300568610" TEXT="specifies key to get a IPC structure identifer ">
<node CREATED="1341300708577" ID="ID_872224181" MODIFIED="1341300719479" TEXT="same key,same identifier"/>
<node CREATED="1341300719793" ID="ID_952146000" MODIFIED="1341300818968" TEXT="a  IPC structure has a unique identifier"/>
</node>
<node CREATED="1341300585954" ID="ID_870157002" MODIFIED="1341300588182" TEXT="key">
<node CREATED="1341300614289" ID="ID_1276116549" MODIFIED="1341300614289" TEXT="IPC_PRIVATE">
<node CREATED="1341300626782" ID="ID_102072705" MODIFIED="1341300651360" TEXT="always creates new IPC structure"/>
<node CREATED="1341300657359" ID="ID_61752347" MODIFIED="1341300701815" TEXT="server stores identifer in file system,client fetchs it"/>
</node>
</node>
<node CREATED="1341300588449" ID="ID_315654963" MODIFIED="1341300596208" TEXT="flag">
<node CREATED="1341300861022" ID="ID_818373656" MODIFIED="1341300869272" TEXT="IPC_CREAT"/>
<node CREATED="1341300870026" ID="ID_758367544" MODIFIED="1341300875499" TEXT="IPC_EXCL"/>
</node>
</node>
<node CREATED="1341294978187" ID="ID_1947676420" MODIFIED="1341301682765" TEXT="//#include&lt;sys/ipc.h&gt;&#xa;struct ipc_perm {&#xa;                key_t key;            /* Key supplied to shmget(2) */&#xa;                uid_t uid;            /* Effective UID of owner */&#xa;                gid_t gid;            /* Effective GID of owner */&#xa;                uid_t cuid;           /* Effective UID of creator */&#xa;                gid_t cgid;           /* Effective GID of creator */&#xa;                unsigned short mode;  /* Permissions + SHM_DEST&#xa;                                                       and SHM_LOCKED flags */                &#xa;                unsigned short seq;   /* Sequence number */ &#xa; };">
<node CREATED="1341301689679" ID="ID_1482105925" MODIFIED="1341301693842" TEXT="mode">
<node CREATED="1341301724955" ID="ID_605630701" MODIFIED="1341301732713" TEXT="message queue"/>
<node CREATED="1341301733006" ID="ID_887119230" MODIFIED="1341301749046" TEXT="semaphore"/>
<node CREATED="1341301750279" ID="ID_1009924503" MODIFIED="1341301765414" TEXT="shared memory">
<node CREATED="1341301821998" ID="ID_235064886" MODIFIED="1341301832933" TEXT="user-read">
<node CREATED="1341301862010" ID="ID_1268183027" MODIFIED="1341301867206" TEXT="SHM_R"/>
</node>
<node CREATED="1341301833187" ID="ID_1897624536" MODIFIED="1341301838466" TEXT="user-write">
<node CREATED="1341301873622" ID="ID_1704187216" MODIFIED="1341301876615" TEXT="SHM_W"/>
</node>
<node CREATED="1341301838703" ID="ID_198621206" MODIFIED="1341301843202" TEXT="group-read">
<node CREATED="1341301883565" ID="ID_1901909274" MODIFIED="1341301892624" TEXT="SHM_R&gt;&gt;3"/>
</node>
<node CREATED="1341301843434" ID="ID_421973819" MODIFIED="1341301847757" TEXT="group-write">
<node CREATED="1341301895105" ID="ID_1297924" MODIFIED="1341301903846" TEXT="SHM_W&gt;&gt;3"/>
</node>
<node CREATED="1341301847950" ID="ID_352316684" MODIFIED="1341301850954" TEXT="other-read">
<node CREATED="1341301905998" ID="ID_421370008" MODIFIED="1341301911347" TEXT="SHM_R&gt;&gt;6"/>
</node>
<node CREATED="1341301851187" ID="ID_1713404653" MODIFIED="1341301856594" TEXT="other-write">
<node CREATED="1341301929294" ID="ID_1470757791" MODIFIED="1341301934169" TEXT="SHM_W&gt;&gt;6"/>
</node>
</node>
</node>
</node>
<node CREATED="1341299854336" ID="ID_1310268124" MODIFIED="1341301976004" TEXT="configuration  limits">
<node CREATED="1341302017327" ID="ID_984069510" MODIFIED="1341302025520" TEXT="/etc/conf/cf. d/mtune"/>
</node>
<node CREATED="1341293727522" FOLDED="true" ID="ID_712599293" MODIFIED="1358086884511" TEXT="shared memory">
<icon BUILTIN="full-1"/>
<node CREATED="1341294866748" ID="ID_478450725" MODIFIED="1341295387283" TEXT="//#include&lt;sys/shm.h&gt;&#xa;struct shmid ds {  &#xa;    struct ipc_perm shm_perm; /* see Section 14.6.2 */  &#xa;    struct anon_map *shm_amp; /* pointer in kernel */  &#xa;    int shm_segsz; /* size of segment in bytes */  &#xa;    ushort shm_Ikcnt; /* number of times segment is being locked */  &#xa;    pid_t shm_Ipid; /* pid of last shmop() */  &#xa;    pid_t shm_cpid; /* pid of creator */  &#xa;    ulong shm_nattch; /* number of current attaches */  &#xa;    ulong shm_cnattch; /* used only for shminfo */  &#xa;    time_t shm_atime; /* last-attach time */  &#xa;    time_t shm_dtime; /* last-detach time */  &#xa;    time_t shm_ctime; /* last-change time */ &#xa; };  "/>
<node CREATED="1341295175167" ID="ID_972102095" MODIFIED="1341314867364" TEXT="system limits that affec shared memor&#x7f; ">
<node CREATED="1341302113240" ID="ID_1349606693" MODIFIED="1341302198806" TEXT="SHMALL   System wide maximum of shared memory pages.(Linux /proc/sys/kernel/shmall)"/>
<node CREATED="1341295208607" ID="ID_1788937460" MODIFIED="1341302230164" TEXT="SHMMAX The maximum size in bytes of a shared memory segment. (Linux /proc/sys/kernel/shmmax)"/>
<node CREATED="1341295208607" ID="ID_415212494" MODIFIED="1341302141122" TEXT="SHMMIN The minimum size in bytes of a shared memory segment. 1"/>
<node CREATED="1341295208607" ID="ID_1069350097" MODIFIED="1341302277693" TEXT="SHMMNI The maximum number of shared memory segments, systemwide. (Linux /proc/sys/kernel/shmmni)"/>
<node CREATED="1341295208607" ID="ID_294674934" MODIFIED="1341295239563" TEXT="SHMSEG The maximum number of shared memory segments, per process. 6"/>
</node>
<node CREATED="1341295458763" ID="ID_1819317811" MODIFIED="1341295461573" TEXT="shmget">
<node CREATED="1341295474175" ID="ID_751004884" MODIFIED="1341295474175" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341295474175" ID="ID_176169853" MODIFIED="1341295474175" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341295474175" ID="ID_997293325" MODIFIED="1341295474175" TEXT="#include &lt;sys/shm.h&gt;"/>
<node CREATED="1341295474175" ID="ID_1596773694" MODIFIED="1341295484146" TEXT="int shmget (key_t key, int size,int flag) ;"/>
<node CREATED="1341295474175" ID="ID_449376456" MODIFIED="1341295474175" TEXT="Returns: shared memory ID if OK, -1 on error"/>
</node>
<node CREATED="1341302420834" FOLDED="true" ID="ID_865926474" MODIFIED="1341302735237" TEXT="shmctl">
<node CREATED="1341302434595" ID="ID_345207944" MODIFIED="1341302434595" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341302434596" ID="ID_796659825" MODIFIED="1341302434596" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341302434597" ID="ID_600334220" MODIFIED="1341302434597" TEXT="#include &lt;sys/shm.h&gt;"/>
<node CREATED="1341302434598" ID="ID_1988080660" MODIFIED="1341302434598" TEXT="int shmctl(int shmid, int cmd, struct shmid_ds *buf);">
<node CREATED="1341302440559" ID="ID_493226867" MODIFIED="1341302442657" TEXT="cmd">
<node CREATED="1341302444084" ID="ID_1395501179" MODIFIED="1341302518344" TEXT="IPC_STAT  "/>
<node CREATED="1341302483525" ID="ID_364160896" MODIFIED="1341302521745" TEXT="IPC_SET  "/>
<node CREATED="1341302656781" ID="ID_1330211640" MODIFIED="1341302658745" TEXT="IPC RMID  "/>
<node CREATED="1341302499125" ID="ID_1652170653" MODIFIED="1341302537962" TEXT="SHM_LOCK  "/>
<node CREATED="1341302509497" ID="ID_636642143" MODIFIED="1341302541799" TEXT="SHM_UNLOCK  "/>
</node>
</node>
<node CREATED="1341302434599" ID="ID_1338359720" MODIFIED="1341302434599" TEXT="Returns: 0 if OK, -1 on error"/>
</node>
<node CREATED="1341302729185" ID="ID_1168344942" MODIFIED="1341302732106" TEXT="shmat">
<node CREATED="1341302744923" ID="ID_1688908816" MODIFIED="1341302744923" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341302744924" ID="ID_281880779" MODIFIED="1341302744924" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341302744925" ID="ID_536076557" MODIFIED="1341302744925" TEXT="#include &lt;sys/shm.h&gt;"/>
<node CREATED="1341302744926" ID="ID_1074944540" MODIFIED="1341302744926" TEXT="void *shmat(int shmid, void *addr, int flag);">
<node CREATED="1341302894721" ID="ID_213614112" MODIFIED="1341302898700" TEXT="flags">
<node CREATED="1341302900426" ID="ID_215492179" MODIFIED="1341302904353" TEXT="SHM_RND "/>
<node CREATED="1341302987708" ID="ID_29367939" MODIFIED="1341302989138" TEXT="SHM_RDONLY"/>
</node>
</node>
<node CREATED="1341302744927" ID="ID_1587618842" MODIFIED="1341302744927" TEXT="Returns: pointer to shared memory segment if OK, -1 on error"/>
</node>
<node CREATED="1341303325134" ID="ID_980075898" MODIFIED="1341303327836" TEXT="shmdt">
<node CREATED="1341303340260" ID="ID_340535876" MODIFIED="1341303340260" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341303340260" ID="ID_1505907721" MODIFIED="1341303340260" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341303340262" ID="ID_1326253363" MODIFIED="1341303340262" TEXT="#include &lt;sys/shm.h&gt;"/>
<node CREATED="1341303340262" ID="ID_1253895250" MODIFIED="1341303340262" TEXT="int shmdt(void *addr);"/>
<node CREATED="1341303340263" ID="ID_1251339769" MODIFIED="1341303340263" TEXT="Returns: 0 if OK, -1 on error"/>
</node>
</node>
<node CREATED="1341295960343" ID="ID_713621043" MODIFIED="1341296022321" TEXT="message queue">
<icon BUILTIN="full-2"/>
</node>
<node CREATED="1341295980417" ID="ID_507844474" MODIFIED="1358132593548" TEXT="semaphore set">
<icon BUILTIN="full-3"/>
<node CREATED="1341364975888" ID="ID_57600822" MODIFIED="1341365037658" TEXT="struct semid ds {&#xa;  struct ipc_perm sem&#x7f;erm; /* see Section 14.6.2 */&#xa;  struct sem *sem_base; /* ptr to first semaphore in set */&#xa;  ushort sem_nsems; /* # of semaphores in set */&#xa;  time_t sem_otime; /* last-semop() time */&#xa;  time_t sem_ctime; /* last-change time */&#xa;  };  ">
<node CREATED="1341365075853" ID="ID_870194815" MODIFIED="1341397771103" TEXT="struct sem {&#xa;  ushort semval; /* semaphore value, always &gt;= 0 */&#xa;  pid_t sempid; /* pid for last operation */&#xa;  ushort semncnt; /* # waiting for increase */&#xa;  ushort semzcnt; /* # waiting for zero */&#xa;  };  "/>
</node>
<node CREATED="1341365886675" ID="ID_665304680" MODIFIED="1341366898756" TEXT="system limits">
<node BACKGROUND_COLOR="#ccff66" CREATED="1341365917158" ID="ID_702256113" MODIFIED="1341366977377" TEXT="(Redhat Linux)&#xa;# man 5 proc&#xa;$cat /proc/sys/kernel/sem&#xa;250       32000    32           128&#xa;semmsl semmns semopm semmni&#xa;"/>
<node CREATED="1341366224807" FOLDED="true" ID="ID_604401426" MODIFIED="1341397693851" TEXT="semctl(semid,0, IPC_INFO(or SEM_INFO), struct seminfo*); ">
<node CREATED="1341366653671" ID="ID_479082150" MODIFIED="1341366890239" TEXT=" struct  seminfo {&#xa;       int semmap;  /* # of entries in semaphore map; unused */ &#xa;       int semmni;  /* Max. # of semaphore sets */                         &#xa;       int semmns;  /* Max. # of semaphores in all semaphore sets */ &#xa;       int semmnu;  /* System-wide max. # of undo structures; unused */&#xa;       int semmsl;  /* Max. # of semaphores in a set */                          &#xa;       int semopm;  /* Max. # of operations for semop() */&#xa;       int semume;  /* Max. # of undo entries per process; unused */&#xa;       int semusz;  /* size of struct sem_undo */ &#xa;       int semvmx;  /* Maximum semaphore value */&#xa;       int semaem;  /* Max. value that can be recorded for   &#xa;                               semaphore adjustment (SEM_UNDO) */ &#xa;       }; "/>
</node>
</node>
<node CREATED="1341314994157" ID="ID_1296062728" MODIFIED="1341315141773" TEXT="semget">
<node CREATED="1341364643507" ID="ID_257724758" MODIFIED="1341364686096" TEXT="create a  new semaphore set or obtain a existed semphore set"/>
<node CREATED="1341393800623" ID="ID_797339531" MODIFIED="1341393800623" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341393800623" ID="ID_89102828" MODIFIED="1341393800623" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341393800623" ID="ID_1974005653" MODIFIED="1341393800623" TEXT="#include &lt;sys/sem.h&gt;"/>
<node CREATED="1341393800623" ID="ID_934005739" MODIFIED="1341393866478" TEXT="int semget (key_t key, int nsems,int flag) ;">
<node CREATED="1341393825573" ID="ID_169354451" MODIFIED="1341393881532" TEXT="creates a new semaphore set">
<node CREATED="1341393918900" ID="ID_1492989602" MODIFIED="1341394051502" TEXT="semget(key,nsems,IPC_CREAT| O_EXCL|access_permission)"/>
<node CREATED="1341394053053" ID="ID_1532587862" MODIFIED="1341394165952" TEXT="semget(IPC_PRIVATE,nsems,access_permission)"/>
</node>
<node CREATED="1341393842195" ID="ID_1720735928" MODIFIED="1341393885417" TEXT="obtains a existed semaphore set">
<node CREATED="1341394174054" ID="ID_1026980195" MODIFIED="1341394217892" TEXT="semget(key,0,0)"/>
</node>
</node>
<node CREATED="1341393800623" ID="ID_1553865104" MODIFIED="1341393800623" TEXT="Returns: sernaphore ID if OK, -1 on error"/>
</node>
<node CREATED="1341315009162" ID="ID_1125937381" MODIFIED="1358132624679" TEXT="semctl">
<node CREATED="1341364689128" ID="ID_1932316012" MODIFIED="1341364705073" TEXT="initialize semaphore set"/>
<node CREATED="1341364708620" ID="ID_585435116" MODIFIED="1341364743753" TEXT="creating and initializing is not atomic operation"/>
<node CREATED="1341367010096" ID="ID_23107852" MODIFIED="1341367028317" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341367030907" ID="ID_1843193242" MODIFIED="1341367044106" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341367045466" ID="ID_804977132" MODIFIED="1341367056015" TEXT="#include &lt;sys/sem.h&gt;"/>
<node CREATED="1341367057661" ID="ID_327562845" MODIFIED="1341394231168" TEXT="int semctl(int semid, int semnum, int cmd, union  semun arg&#x7f;);  ">
<node CREATED="1341367148720" ID="ID_1883786859" MODIFIED="1341367281167" TEXT="semnum ">
<node CREATED="1341367283457" ID="ID_763454522" MODIFIED="1341367283457" TEXT="semnum-th semaphore in set (starting at 0)"/>
</node>
<node BACKGROUND_COLOR="#ccff33" CREATED="1341366373249" ID="ID_1597305842" MODIFIED="1341367140930" TEXT="union semun {&#xa;       int              val;    /* Value for SETVAL */&#xa;       struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */&#xa;       unsigned short  *array;  /* Array for GETALL, SETALL */&#xa;       struct seminfo  *__buf;  /* Buffer for IPC_INFO (Linux specific) */&#xa;       }; "/>
<node CREATED="1341367257658" ID="ID_1315716304" MODIFIED="1341367260326" TEXT="cmd">
<node CREATED="1341394273138" ID="ID_777311892" MODIFIED="1341394277898" TEXT="IPC STAT  "/>
<node CREATED="1341394278340" ID="ID_1971383416" MODIFIED="1341394283522" TEXT="IPC_SET"/>
<node CREATED="1341394283824" ID="ID_1002626438" MODIFIED="1341394326835" TEXT="IPC RMID  "/>
<node CREATED="1341394350225" ID="ID_293792970" MODIFIED="1341394351506" TEXT="GETVAL  "/>
<node CREATED="1341394351793" ID="ID_362762063" MODIFIED="1341394365648" TEXT="SETVAL  "/>
<node CREATED="1341394386714" ID="ID_706786597" MODIFIED="1341394387964" TEXT="GETPID  "/>
<node CREATED="1341394403570" ID="ID_1648181234" MODIFIED="1341394405178" TEXT="GETNCNT  "/>
<node CREATED="1341394414763" ID="ID_645828013" MODIFIED="1341394416465" TEXT="GETZCNT  "/>
<node CREATED="1341394427718" ID="ID_1881548970" MODIFIED="1341394428797" TEXT="GETALL  "/>
<node CREATED="1341394429427" ID="ID_503292806" MODIFIED="1341394432361" TEXT="SETALL"/>
</node>
<node CREATED="1341394236805" ID="ID_1039607944" MODIFIED="1341394249911" TEXT="initialize semphore set">
<node CREATED="1341394530993" ID="ID_399566209" MODIFIED="1341394540891" TEXT="semctl(sem_id, n, SETVAL, init_value);"/>
</node>
</node>
</node>
<node CREATED="1341315013343" FOLDED="true" ID="ID_1804069828" MODIFIED="1358132609303" TEXT="semop">
<node CREATED="1341394556436" ID="ID_1082905639" MODIFIED="1341394556436" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1341394556436" ID="ID_1410182787" MODIFIED="1341394556436" TEXT="#include &lt;sys/ipc.h&gt;"/>
<node CREATED="1341394556436" ID="ID_291465343" MODIFIED="1341394556436" TEXT="#include &lt;sys/sem.h&gt;"/>
<node CREATED="1341394556436" ID="ID_1483820110" MODIFIED="1341409259000" TEXT="int semop(int semid, struct sembuf semoparray[], size_t nops);">
<node CREATED="1341394563805" ID="ID_53565289" MODIFIED="1341394575460" TEXT="semoparray[]">
<node CREATED="1341394598008" ID="ID_669043662" MODIFIED="1341394630692" TEXT="struct sembuf {&#xa;  ushort sem_num; /* member # in set (0, 1 ..... nsems-l) */&#xa;  short sem_op; /* operation (negative, 0, or positive) */&#xa;  short sem_flg; /* IPC_NOWAIT, SEM_UNDO */&#xa;  };  ">
<node CREATED="1341397857065" ID="ID_1495944972" MODIFIED="1341397866068" TEXT="sem_op">
<node CREATED="1341397869131" ID="ID_1176180576" MODIFIED="1341408474341" TEXT="+">
<node CREATED="1341397884349" ID="ID_110424824" MODIFIED="1341398158787" TEXT="requires resources"/>
</node>
<node CREATED="1341397874225" ID="ID_1795673582" MODIFIED="1341409021461" TEXT="0">
<node CREATED="1341398088764" ID="ID_572037533" MODIFIED="1341398094366" TEXT="wait-for-zero"/>
</node>
<node CREATED="1341397876073" ID="ID_196491675" MODIFIED="1341409022261" TEXT="-">
<node CREATED="1341398107273" ID="ID_1372654629" MODIFIED="1341398166540" TEXT="release resources"/>
</node>
</node>
<node CREATED="1341398171257" ID="ID_273482510" MODIFIED="1341398176532" TEXT="sem_flg">
<node CREATED="1341398179049" ID="ID_435909430" MODIFIED="1341398185962" TEXT="IPC_NOWAIT">
<node CREATED="1341398188058" ID="ID_881107607" MODIFIED="1341409087398" TEXT="return with error immediately without waiting for resources become available .errno set to EAGAIN."/>
</node>
<node CREATED="1341398242042" ID="ID_89041707" MODIFIED="1341398250265" TEXT="SEM_UNDO"/>
</node>
</node>
</node>
</node>
<node CREATED="1341394556436" ID="ID_1157365318" MODIFIED="1341394556436" TEXT="Returns: 0 if OK, -1 on error"/>
<node CREATED="1341409125232" ID="ID_1431059437" MODIFIED="1342076349336" TEXT="errno">
<node CREATED="1341409135943" ID="ID_223950750" MODIFIED="1341409142119" TEXT="EAGAIN">
<node CREATED="1341409176026" ID="ID_544812252" MODIFIED="1341409289498" TEXT="sembuf.sem_flg set IPC_NOWAIT"/>
</node>
<node CREATED="1341409315974" FOLDED="true" ID="ID_1181048363" MODIFIED="1342076825980" TEXT="ERMID">
<node CREATED="1341409335255" ID="ID_409156259" MODIFIED="1341409398072" TEXT="semctl(semid,0,IPC_RMID,NULL)"/>
</node>
<node CREATED="1341409404457" ID="ID_1431990391" MODIFIED="1341409410769" TEXT="EINTR">
<node CREATED="1341409415546" ID="ID_1543440677" MODIFIED="1341409478182" TEXT="interrupted by signal"/>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1338637081684" FOLDED="true" ID="ID_969287546" MODIFIED="1363164514980" POSITION="right" TEXT="file &amp; directory operations">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1338647378283" ID="ID_1976735025" MODIFIED="1341892782980" TEXT="stat">
<node CREATED="1338647483842" ID="ID_68683273" MODIFIED="1338647519557" TEXT=":retrieve metadata of a file stored in inode"/>
<node CREATED="1338647522391" ID="ID_1982945353" MODIFIED="1338647537586" TEXT="utility">
<node CREATED="1338647539562" ID="ID_1486925285" MODIFIED="1338647541667" TEXT="stat"/>
</node>
<node CREATED="1338647543089" ID="ID_1890475945" MODIFIED="1338647547470" TEXT="function">
<node CREATED="1338647550066" ID="ID_1171455159" MODIFIED="1363164486295" TEXT="stat &lt;sys/stat.h&gt;">
<node CREATED="1338647597710" ID="ID_1694120859" MODIFIED="1338647597710" TEXT="int stat(const char *path, struct stat *buf);"/>
<node CREATED="1338647597711" ID="ID_1741831704" MODIFIED="1338647597711" TEXT="int fstat(int filedes, struct stat *buf);"/>
<node CREATED="1338647597711" ID="ID_1191552396" MODIFIED="1338647597711" TEXT="int lstat(const char *path, struct stat *buf);">
<node CREATED="1338647616133" ID="ID_1337029910" MODIFIED="1338647762177" TEXT="if path is symbol link, retrieve information of the link,&#xa;not the file referenced by link as stat do"/>
</node>
</node>
</node>
<node CREATED="1338647877239" ID="ID_1730061970" MODIFIED="1363164499187">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct stat {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dev_t&#160;&#160;&#160;&#160;&#160;st_dev;&#160;&#160;&#160;&#160;&#160;/* ID of device containing file */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ino_t&#160;&#160;&#160;&#160;&#160;st_ino;&#160;&#160;&#160;&#160;&#160;/* inode number */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mode_t&#160;&#160;&#160;&#160;st_mode;&#160;&#160;&#160;&#160;/* file type &amp; permission&#160; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nlink_t&#160;&#160;&#160;st_nlink;&#160;&#160;&#160;/* number of hard links */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_t&#160;&#160;&#160;&#160;&#160;st_uid;&#160;&#160;&#160;&#160;&#160;/* user ID of owner */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gid_t&#160;&#160;&#160;&#160;&#160;st_gid;&#160;&#160;&#160;&#160;&#160;/* group ID of owner */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dev_t&#160;&#160;&#160;&#160;&#160;st_rdev;&#160;&#160;&#160;&#160;/* device ID (if special file) */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;off_t&#160;&#160;&#160;&#160;&#160;st_size;&#160;&#160;&#160;&#160;/* total size, in bytes */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blksize_t st_blksize; /* blocksize for filesystem I/O */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blkcnt_t&#160;&#160;st_blocks;&#160;&#160;/* number of blocks allocated */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;st_atime;&#160;&#160;&#160;/* time of last access */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;st_mtime;&#160;&#160;&#160;/* time of last modification */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;st_ctime;&#160;&#160;&#160;/* time of last status change */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
<node CREATED="1338648004379" FOLDED="true" ID="ID_572783318" MODIFIED="1338788456750" TEXT="file type (st_mode &amp;S_IFMT)">
<node CREATED="1338648072309" ID="ID_1451777000" MODIFIED="1338648074186" TEXT="-">
<node CREATED="1338648097362" ID="ID_1385724685" MODIFIED="1338648100816" TEXT="regular file"/>
<node CREATED="1338693928567" ID="ID_1610906071" MODIFIED="1338695346300" TEXT="S_ISREG">
<node CREATED="1338694287744" ID="ID_1677127199" MODIFIED="1338695348337" TEXT="&lt;sys/stat.h&gt;">
<node CREATED="1338694302195" ID="ID_1224023554" MODIFIED="1338694487000" TEXT="#define  S_ISREG(mode)  (((mode) &amp; S_IFMT) ==S_IFREG)">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
</node>
</node>
</node>
<node CREATED="1338694494630" FOLDED="true" ID="ID_371947196" MODIFIED="1338694613723" TEXT="-f">
<node CREATED="1338694541427" ID="ID_1870419559" MODIFIED="1338694564519" TEXT="test -f &lt;file&gt; "/>
<node CREATED="1338694565060" ID="ID_1782974277" MODIFIED="1338694584175" TEXT="[ -f file ]  (sh)"/>
<node CREATED="1338694584918" ID="ID_1768522886" MODIFIED="1338694600712" TEXT="[[ -f file ]] (bash/ksh)"/>
<node CREATED="1338694601249" ID="ID_967227923" MODIFIED="1338694611478" TEXT="( -f file )  (csh)"/>
</node>
</node>
<node CREATED="1338648074567" ID="ID_1862612978" MODIFIED="1338648076544" TEXT="d">
<node CREATED="1338648102308" ID="ID_393446642" MODIFIED="1338648107753" TEXT="directory file"/>
<node CREATED="1338694092331" ID="ID_266456986" MODIFIED="1338694100331" TEXT="S_ISDIR"/>
<node CREATED="1338694502100" ID="ID_331025300" MODIFIED="1338694505642" TEXT="-d"/>
</node>
<node CREATED="1338648076811" ID="ID_1717047151" MODIFIED="1338648077839" TEXT="c">
<node CREATED="1338648109060" ID="ID_743322194" MODIFIED="1338648114757" TEXT="character file"/>
<node CREATED="1338694102215" ID="ID_1874045592" MODIFIED="1338694108141" TEXT="S_ISCHR"/>
<node CREATED="1338694507494" ID="ID_977802229" MODIFIED="1338694508764" TEXT="-c"/>
</node>
<node CREATED="1338648078142" ID="ID_1948469538" MODIFIED="1338648078920" TEXT="b">
<node CREATED="1338648116061" ID="ID_1336388306" MODIFIED="1338648118840" TEXT="block file"/>
<node CREATED="1338694109890" ID="ID_1261525786" MODIFIED="1338694115923" TEXT="S_ISBLK"/>
<node CREATED="1338694510134" ID="ID_857930349" MODIFIED="1338694511173" TEXT="-b"/>
</node>
<node CREATED="1338648079353" ID="ID_779755789" MODIFIED="1338648081428" TEXT="p">
<node CREATED="1338648120462" ID="ID_722868310" MODIFIED="1338693899879" TEXT="FIFO named pipe"/>
<node CREATED="1338694117648" ID="ID_678729436" MODIFIED="1338694125130" TEXT="S_ISFIFO"/>
<node CREATED="1338694512733" ID="ID_1135495794" MODIFIED="1338694516239" TEXT="-p"/>
</node>
<node CREATED="1338648081674" ID="ID_867709730" MODIFIED="1338648082885" TEXT="l">
<node CREATED="1338648128865" ID="ID_904368791" MODIFIED="1338648160333" TEXT="symbolic link"/>
<node CREATED="1338694127267" ID="ID_1323272194" MODIFIED="1338694154643" TEXT="S_ISLNK"/>
<node CREATED="1338694519060" ID="ID_1162228294" MODIFIED="1338694525375" TEXT="-L / -h"/>
</node>
<node CREATED="1338648092391" ID="ID_178541472" MODIFIED="1338648093487" TEXT="s">
<node CREATED="1338648193441" ID="ID_131111096" MODIFIED="1338648196397" TEXT="socket"/>
<node CREATED="1338694133201" ID="ID_1582848551" MODIFIED="1338694161027" TEXT="S_ISSOCK"/>
<node CREATED="1338694533025" ID="ID_1632427650" MODIFIED="1338694537336" TEXT="-S"/>
</node>
</node>
<node CREATED="1338695811113" ID="ID_1708337162" MODIFIED="1339172119022" TEXT="file access permission">
<node CREATED="1338695850235" ID="ID_1017367566" MODIFIED="1338695898680" TEXT="owner">
<node CREATED="1338704868382" ID="ID_920235737" MODIFIED="1338704877219" TEXT="st_uid"/>
<node CREATED="1338709596641" ID="ID_711308028" MODIFIED="1338709608869" TEXT="chown"/>
<node CREATED="1338709627929" ID="ID_274401597" MODIFIED="1338709711159" TEXT="setuid seteuid geteuid geteuid"/>
<node CREATED="1338705020439" ID="ID_7210593" MODIFIED="1338705038432" TEXT="[ -O file ]">
<node CREATED="1338705062789" ID="ID_622647306" MODIFIED="1338705138060" TEXT="file exists and is owned by effectvie user ID"/>
</node>
</node>
<node CREATED="1338704602099" ID="ID_1689915102" MODIFIED="1338704604332" TEXT="group">
<node CREATED="1338704878901" ID="ID_63368829" MODIFIED="1338704883881" TEXT="st_gid"/>
<node CREATED="1338709613955" ID="ID_574816093" MODIFIED="1338709617615" TEXT="chgrp"/>
<node CREATED="1338709652756" ID="ID_186758208" MODIFIED="1338709692435" TEXT="setgid getgid setegid setegid"/>
<node CREATED="1338705047224" ID="ID_815399110" MODIFIED="1338705057388" TEXT="[ -G file ]">
<node CREATED="1338705144056" ID="ID_1866464765" MODIFIED="1338705173001" TEXT="file exists and is owned by effective group ID"/>
</node>
</node>
<node CREATED="1338704609288" ID="ID_1466190370" MODIFIED="1338726941643" TEXT="permission bits">
<node CREATED="1338710623889" ID="ID_991993304" MODIFIED="1338710732506" TEXT="S_IRUSR user-read"/>
<node CREATED="1338710623891" ID="ID_1469710169" MODIFIED="1338710736505" TEXT="S_IWUSR user-write"/>
<node CREATED="1338710623891" ID="ID_1361490221" MODIFIED="1338710739547" TEXT="S_IXUSR user-execute"/>
<node CREATED="1338710623892" ID="ID_5008669" MODIFIED="1338710623892" TEXT="S_IRGRP group-read"/>
<node CREATED="1338710623892" ID="ID_1689252817" MODIFIED="1338710623892" TEXT="S_IWGRP group-write"/>
<node CREATED="1338710623893" ID="ID_17036397" MODIFIED="1338710623893" TEXT="S_IXGRP group-execute"/>
<node CREATED="1338710623894" ID="ID_1224671248" MODIFIED="1338710745730" TEXT="S_IROTH other-read"/>
<node CREATED="1338710623894" ID="ID_1756630338" MODIFIED="1338710749183" TEXT="S_IWOTH other-write"/>
<node CREATED="1338710623895" ID="ID_164768476" MODIFIED="1338710751640" TEXT="S_IXOTH other-execute"/>
<node CREATED="1338710804695" FOLDED="true" ID="ID_1341186591" MODIFIED="1338726928697" TEXT="directory access">
<node CREATED="1338710844006" ID="ID_1364962236" MODIFIED="1338710845787" TEXT="R">
<node CREATED="1338710857674" ID="ID_1155021151" MODIFIED="1338710913547" TEXT="read directory file content, e.g.  ls "/>
</node>
<node CREATED="1338710847514" ID="ID_1762595015" MODIFIED="1338711493525" TEXT="X(search bit)">
<node CREATED="1338710874809" ID="ID_1020523149" MODIFIED="1338711091615" TEXT="parse directory  entries"/>
</node>
<node CREATED="1338711096188" ID="ID_586525162" MODIFIED="1338711301457" TEXT="create and delete a file has nothing to do with its&#xa;access permission but its parent&apos;s X and W are set"/>
</node>
<node CREATED="1338726527114" FOLDED="true" ID="ID_867076917" MODIFIED="1338726921201" TEXT="file access test">
<node CREATED="1338726561258" ID="ID_1832595957" MODIFIED="1338726584421" TEXT="superuser">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1338726569730" ID="ID_731061484" MODIFIED="1338726586959" TEXT="user">
<icon BUILTIN="full-2"/>
</node>
<node CREATED="1338726574163" ID="ID_360550878" MODIFIED="1338726629731" TEXT="group">
<icon BUILTIN="full-3"/>
</node>
<node CREATED="1338726617037" ID="ID_1050020122" MODIFIED="1338726639867" TEXT="other">
<icon BUILTIN="full-4"/>
</node>
<node CREATED="1338726663975" ID="ID_1289702775" MODIFIED="1338726916644" TEXT="if superuser access is denied, user ,group and other &#xa;access test shall not be  performed. so as user,group &#xa;and other access test.">
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
<node CREATED="1338726985969" ID="ID_1308080542" MODIFIED="1338726988402" TEXT="chmod"/>
</node>
<node CREATED="1338704644911" ID="ID_619827138" MODIFIED="1338704654817" TEXT="set-user-id">
<node CREATED="1338704710508" ID="ID_50877713" MODIFIED="1338704746263" TEXT="S_ISUID &amp; st_mode"/>
<node CREATED="1338704824037" ID="ID_326387855" MODIFIED="1338704839852" TEXT="[ -u file ]"/>
</node>
<node CREATED="1338704655302" ID="ID_1151325499" MODIFIED="1338704672385" TEXT="set-group-id">
<node CREATED="1338704753637" ID="ID_1687654767" MODIFIED="1338704780232" TEXT="S_ISGID &amp; st_mode"/>
<node CREATED="1338704840997" ID="ID_1414182279" MODIFIED="1338704847528" TEXT="[ -g file ]"/>
</node>
<node CREATED="1338728046488" ID="ID_1226632323" MODIFIED="1339172125962" TEXT="access">
<node CREATED="1338728118573" ID="ID_226814414" MODIFIED="1338728166042" TEXT="&lt;unistd.h&gt; int access(const char*pathname, int mode) ;">
<node CREATED="1338728176018" ID="ID_1905493497" MODIFIED="1338728238415" TEXT="file access test based on real user ID and real group ID"/>
<node CREATED="1338728249904" ID="ID_444546277" MODIFIED="1338728253950" TEXT="mode">
<node CREATED="1338728281140" ID="ID_1750143964" MODIFIED="1338728281140" TEXT="R_OK test for read permission"/>
<node CREATED="1338728281141" ID="ID_273143008" MODIFIED="1338728281141" TEXT="W_OK test for write permission"/>
<node CREATED="1338728281142" ID="ID_1635638393" MODIFIED="1338728287726" TEXT="X_OK test for execute permission"/>
<node CREATED="1338728281143" ID="ID_1928958141" MODIFIED="1338728291773" TEXT="F_OK test for existence of file"/>
</node>
<node CREATED="1338728298046" ID="ID_368604777" MODIFIED="1338728319987" TEXT="return 0 on OK,-1 on error"/>
</node>
</node>
<node CREATED="1338728521523" ID="ID_1845296362" MODIFIED="1338731496483" TEXT="umask">
<node CREATED="1338728548696" FOLDED="true" ID="ID_732920657" MODIFIED="1338731500241" TEXT="&lt;sys/types.h&gt;&lt;sys/stat.h&gt;mode_t umask(mode_t cmask);">
<node CREATED="1338728589364" ID="ID_1216271260" MODIFIED="1338728644079" TEXT="the bits set in cmask shall be turn off in mode of open or creat file"/>
<node CREATED="1338728649876" ID="ID_1009621537" MODIFIED="1338728714698" TEXT="return previous file mode creation mask"/>
</node>
</node>
<node CREATED="1338728810498" ID="ID_75042002" MODIFIED="1339172142586" TEXT="chmod">
<node CREATED="1338728816682" ID="ID_1643121160" MODIFIED="1338728859137" TEXT="&lt;sys/types.h&gt;&lt;sys/stat.h&gt;"/>
<node CREATED="1338729840656" ID="ID_679460657" MODIFIED="1339173037220" TEXT="int chmod(const char *pathname, mode_t mode);">
<node CREATED="1338729924400" ID="ID_134649801" MODIFIED="1338731504482" TEXT="mode">
<node CREATED="1338729988002" ID="ID_796684588" MODIFIED="1338730000410" TEXT="&lt;sys/stat.h&gt;"/>
<node CREATED="1338729929324" ID="ID_1349309884" MODIFIED="1339173343804" TEXT="S_ISUID (4) set-user-ID on execution"/>
<node CREATED="1338729929325" ID="ID_845667550" MODIFIED="1339173361012" TEXT="S_ISGID (2) set-group-ID on execution"/>
<node CREATED="1338729929325" FOLDED="true" ID="ID_456470334" MODIFIED="1339173371781" TEXT="S_ISVTX (1) saved-text (sticky bit)">
<node CREATED="1338731513732" ID="ID_604284247" MODIFIED="1338731735065" TEXT="originally,text of program with sticky bit sticks around in &#xa;swap area  once executed until system is reboot">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1338731515233" ID="ID_102819818" MODIFIED="1338732203296" TEXT="If the bit is set  for a directory, a file in the directory can be&#xa;removed or renamed only if the user has  write permission &#xa;for the directory, and either  &#xa;     &#x2022; owns the file,&#xa;     &#x2022; owns the directory, or  &#xa;     &#x2022; is the superuser.  ">
<icon BUILTIN="full-2"/>
</node>
</node>
<node CREATED="1338729929327" ID="ID_18508216" MODIFIED="1338729929327" TEXT="S_IRWXU read, write, and execute by user (owner)"/>
<node CREATED="1338729929328" ID="ID_128284556" MODIFIED="1338729929328" TEXT="S_IRUSR read by user (owner)"/>
<node CREATED="1338729929329" ID="ID_1215377202" MODIFIED="1338729929329" TEXT="S_IWOSR write by user (owner)"/>
<node CREATED="1338729929330" ID="ID_1914185733" MODIFIED="1338729929330" TEXT="S_IXUSR execute by user (owner)"/>
<node CREATED="1338729929331" ID="ID_552762876" MODIFIED="1338729929331" TEXT="S_IRWXG read, write, and execute by group"/>
<node CREATED="1338729929331" ID="ID_1054366805" MODIFIED="1338729929331" TEXT="S_IRGRP read by group"/>
<node CREATED="1338729929332" ID="ID_701106308" MODIFIED="1338729929332" TEXT="S_IWGRP write by group"/>
<node CREATED="1338729929333" ID="ID_676361183" MODIFIED="1338729929333" TEXT="S_IXGRP execute by group"/>
<node CREATED="1338729929334" ID="ID_1535954432" MODIFIED="1338729929334" TEXT="S_IRWXO read, write, and execute by other (world)"/>
<node CREATED="1338729929335" ID="ID_885952337" MODIFIED="1338729929335" TEXT="S_IROTH read by other (world)"/>
<node CREATED="1338729929335" ID="ID_878755616" MODIFIED="1338729929335" TEXT="S_IWOTH write by other (world)"/>
<node CREATED="1338729929336" ID="ID_306819416" MODIFIED="1338729929336" TEXT="S_IXOTH execute by other (world)"/>
</node>
<node CREATED="1338730034245" ID="ID_255413025" MODIFIED="1338730045008" TEXT="return 0 on OK,-1 on error"/>
</node>
<node CREATED="1338729857095" ID="ID_74156099" MODIFIED="1338729892997" TEXT="int fchmod(int filedes, mode_t &#x7f;mode&#x7f;) ;"/>
<node CREATED="1339173062277" ID="ID_51011575" MODIFIED="1339173068680" TEXT="$chmod">
<node CREATED="1339173072554" ID="ID_1251049799" MODIFIED="1339173076955" TEXT="t">
<node CREATED="1339173098601" ID="ID_953140743" MODIFIED="1339173203318" TEXT="chmod o+tx "/>
</node>
<node CREATED="1339173086588" ID="ID_909058810" MODIFIED="1339173090497" TEXT="T">
<node CREATED="1339173205997" ID="ID_562426922" MODIFIED="1339173216801" TEXT="chmod o+t,o-x "/>
</node>
<node CREATED="1339173077343" ID="ID_1924575446" MODIFIED="1339173078638" TEXT="s">
<node CREATED="1339173219397" ID="ID_1384218830" MODIFIED="1339173234895" TEXT="chmod ug+sx"/>
</node>
<node CREATED="1339173078955" ID="ID_15987518" MODIFIED="1339173083257" TEXT="S">
<node CREATED="1339173236401" ID="ID_1722359461" MODIFIED="1339173257176" TEXT="chmod ug+s,ug-x"/>
</node>
</node>
</node>
<node CREATED="1338732520666" FOLDED="true" ID="ID_48238656" MODIFIED="1338732737139" TEXT="chown">
<node CREATED="1338732524875" ID="ID_899884675" MODIFIED="1338732568035" TEXT="&lt;sys/types.h&gt;&lt;unistd.h&gt;"/>
<node CREATED="1338732524876" ID="ID_571417671" MODIFIED="1338732610376" TEXT="int chown (const char *pathname, uid_t owner, gid_t group);">
<node CREATED="1338732729556" ID="ID_1278562118" MODIFIED="1338732732189" TEXT="If the owner or group is specified as -1, then that ID is not  changed."/>
<node CREATED="1338732524879" ID="ID_1152852540" MODIFIED="1338732677854" TEXT="return: 0 on OK,-1 on error"/>
</node>
<node CREATED="1338732524876" ID="ID_661187798" MODIFIED="1338732623386" TEXT="int fchown(int filedes uid_t owner, gid_t group);"/>
<node CREATED="1338732524878" ID="ID_17109680" MODIFIED="1338732650839" TEXT="int lchown (const char *pathname, uid_t owner, gid_t group);"/>
</node>
</node>
<node CREATED="1338785022783" ID="ID_781386686" MODIFIED="1339172697958" TEXT="file size">
<node CREATED="1338785033708" ID="ID_561693436" MODIFIED="1338785038858" TEXT="st_size">
<node CREATED="1338785061830" ID="ID_546159163" MODIFIED="1338785096976" TEXT="size of file in bytes">
<node CREATED="1338785488558" ID="ID_1527442729" MODIFIED="1338785493584" TEXT="du">
<node CREATED="1338785514971" ID="ID_1303119827" MODIFIED="1338786379175" TEXT="-estimate file space usage"/>
</node>
<node CREATED="1338785517255" ID="ID_75834492" MODIFIED="1338785519690" TEXT="wc -c"/>
<node CREATED="1338785520710" ID="ID_1090030232" MODIFIED="1338785975961" TEXT="od">
<node CREATED="1338785656114" ID="ID_1403450335" MODIFIED="1338786383012" TEXT="-dump files in octal and other formats"/>
<node CREATED="1338785974354" ID="ID_1941907761" MODIFIED="1338786120932" TEXT="od -A[doxn] -N20 -w10 -t [doxcalfu]n /dev/urandom"/>
</node>
<node CREATED="1338786362879" ID="ID_1485389939" MODIFIED="1338786370400" TEXT="dd">
<node CREATED="1338786371999" ID="ID_65201339" MODIFIED="1338786371999" TEXT="- convert and copy a file"/>
</node>
</node>
</node>
<node CREATED="1338785039192" ID="ID_537933009" MODIFIED="1338785048414" TEXT="st_blksize">
<node CREATED="1338785099229" ID="ID_1609659579" MODIFIED="1338785150258" TEXT="preferred block size for IO"/>
</node>
<node CREATED="1338785048794" ID="ID_625845745" MODIFIED="1338785053133" TEXT="st_blocks">
<node CREATED="1338785154086" ID="ID_957113610" MODIFIED="1338785197768" TEXT="number of 512-byte block allocated"/>
</node>
<node CREATED="1338786412268" ID="ID_553599727" MODIFIED="1338786435218" TEXT="truncate">
<node CREATED="1338786421888" ID="ID_595696067" MODIFIED="1338786456200" TEXT="&lt;sys/types.h&gt;&lt;unistd.h&gt;"/>
<node CREATED="1338786421888" ID="ID_984330165" MODIFIED="1338786480778" TEXT="int truncate(const char*pathname, off_t&#x7f; length);"/>
<node CREATED="1338786421888" ID="ID_16715015" MODIFIED="1338786421888" TEXT="int ftruncate (int filedes, off_t length) ;"/>
</node>
</node>
<node CREATED="1338786798292" ID="ID_1288765094" MODIFIED="1339172690530" TEXT="file system">
<node CREATED="1338786806849" ID="ID_288305325" MODIFIED="1338786810922" TEXT="st_ino"/>
<node CREATED="1338786811474" ID="ID_564565390" MODIFIED="1338786816858" TEXT="st_nlink"/>
<node CREATED="1338786894068" ID="ID_809033281" MODIFIED="1338786897190" TEXT="link">
<node CREATED="1338786914561" ID="ID_741515364" MODIFIED="1338786955371" TEXT="&lt;unistd.h&gt;int link(const char*existingpath, constchar *newpath) ;">
<node CREATED="1338788781650" ID="ID_993097067" MODIFIED="1338788834326" TEXT="$link"/>
</node>
</node>
<node CREATED="1338787018791" ID="ID_819310966" MODIFIED="1338787021554" TEXT="unlink">
<node CREATED="1338786914561" ID="ID_273354010" MODIFIED="1338787055141" TEXT="&lt;unistd.h&gt;int unlink(constchar *pathname) ;">
<node CREATED="1338788796603" ID="ID_806786105" MODIFIED="1338788838023" TEXT="$unlink"/>
</node>
</node>
<node CREATED="1338787255950" ID="ID_1460862080" MODIFIED="1338787259431" TEXT="remove">
<node CREATED="1338787272480" ID="ID_464863979" MODIFIED="1338787297425" TEXT="&lt;stdio.h&gt;int remove(const char*pathname) ;">
<node CREATED="1338788806111" ID="ID_966182015" MODIFIED="1338788841564" TEXT="$rm"/>
</node>
</node>
<node CREATED="1338787322266" ID="ID_1274277312" MODIFIED="1338788753962" TEXT="rename">
<node CREATED="1338787328999" ID="ID_1048712319" MODIFIED="1338787379543" TEXT="&lt;stdio. h&gt;int rename(const char*oldname,const char*newname) ;">
<node CREATED="1338788817694" ID="ID_1885458267" MODIFIED="1338788821908" TEXT="$mv"/>
</node>
</node>
<node CREATED="1338788297432" ID="ID_1373624862" MODIFIED="1338788301054" TEXT="symlink">
<node CREATED="1338788303136" ID="ID_881188955" MODIFIED="1338788338946" TEXT="&lt;unistd.h&gt;int symlink(const char * actualpath, const char *sympath); ">
<node CREATED="1338788844394" ID="ID_254731274" MODIFIED="1338788853132" TEXT="$ln -s"/>
</node>
</node>
<node CREATED="1338788370503" ID="ID_1870756209" MODIFIED="1338788372892" TEXT="readlink">
<node CREATED="1338788378531" ID="ID_1528564494" MODIFIED="1338788390816" TEXT="&lt;unistd. h&gt;int readlink(const char *pathname, char *buf, int bufsize); "/>
</node>
<node CREATED="1338790039778" ID="ID_1065132682" MODIFIED="1338790042073" TEXT="mkdir">
<node CREATED="1338790090270" ID="ID_174885483" MODIFIED="1338790104723" TEXT="&lt;sys/types.h&gt;&lt;sys/stat.h&gt; "/>
<node CREATED="1338790090270" ID="ID_650154095" MODIFIED="1338790090270" TEXT="int mkdir(const char *pathname, mode_t mode);"/>
</node>
<node CREATED="1338790042375" ID="ID_1477489101" MODIFIED="1338790045201" TEXT="rmdir">
<node CREATED="1338790058609" ID="ID_1944207332" MODIFIED="1338790069818" TEXT="&lt;unistd.h&gt;int rmdir(const char *pathname); "/>
</node>
<node CREATED="1338792353807" FOLDED="true" ID="ID_1675055151" MODIFIED="1339172694040" TEXT="read directory">
<node CREATED="1338792377388" ID="ID_1076305334" MODIFIED="1338792392099" TEXT="&lt;sys/types.h&gt;&lt;dirent.h&gt;"/>
<node CREATED="1338792408627" ID="ID_749941684" MODIFIED="1338792408627" TEXT="DIR *opendir(const char *pathname);"/>
<node CREATED="1338792431996" ID="ID_626863886" MODIFIED="1338792431996" TEXT="struct dirent *readdir(DIR *dp);"/>
<node CREATED="1338792452065" ID="ID_1771274749" MODIFIED="1338792452065" TEXT="void rewinddir (DIR *dp) ;"/>
<node CREATED="1338792463758" ID="ID_993653674" MODIFIED="1338792463758" TEXT="int closedir(DIR *dp);"/>
<node CREATED="1338792511375" FOLDED="true" ID="ID_281165882" MODIFIED="1338793694846" TEXT="struct dirent">
<node CREATED="1338793619621" ID="ID_1541925083" MODIFIED="1338793686250">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct dirent {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ino_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d_ino;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* inode number */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;off_t&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d_off;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* offset to the next dirent */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unsigned short d_reclen;&#160;&#160;&#160;&#160;/* length of this record */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unsigned char&#160;&#160;d_type;&#160;&#160;&#160;&#160;&#160;&#160;/* type of file; not supported
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;by all file system types */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d_name[256]; /* filename */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1338795628652" ID="ID_1351351803" MODIFIED="1338795632944" TEXT="chdir">
<node CREATED="1338795640211" ID="ID_1469374424" MODIFIED="1338795640211" TEXT=""/>
</node>
<node CREATED="1338795642621" ID="ID_574303469" MODIFIED="1338795648161" TEXT="getcwd"/>
</node>
<node CREATED="1338788459907" ID="ID_152909860" MODIFIED="1363164506481" TEXT="file time">
<node CREATED="1338788505266" ID="ID_767050503" MODIFIED="1338788606089" TEXT="st_atime">
<node CREATED="1338788505266" ID="ID_792547394" MODIFIED="1338788520601" TEXT="last-access tirne of file data"/>
<node CREATED="1338788505266" ID="ID_1000530854" MODIFIED="1338788571433" TEXT="read  (ls -u)"/>
</node>
<node CREATED="1338788505266" ID="ID_644505237" MODIFIED="1338788615004" TEXT="st_mtime">
<node CREATED="1338788505266" ID="ID_1873447219" MODIFIED="1338789101328" TEXT="last-modification time of file data"/>
<node CREATED="1338788505266" ID="ID_251681020" MODIFIED="1338788579764" TEXT="write (ls default)"/>
</node>
<node CREATED="1338788505266" ID="ID_45371294" MODIFIED="1338788625916" TEXT="st_ctime">
<node CREATED="1338788505266" ID="ID_1653022206" MODIFIED="1338788528533" TEXT="last-change time of i-node status"/>
<node CREATED="1338788505266" ID="ID_493156541" MODIFIED="1338788594131" TEXT="chmod, chown (ls  -c)"/>
</node>
<node CREATED="1338789499852" FOLDED="true" ID="ID_1677282803" MODIFIED="1338790036059" TEXT="utime">
<node CREATED="1338789513309" ID="ID_1389236151" MODIFIED="1338789534050" TEXT="&lt;sys/types.h&gt;&lt;utime.h&gt; "/>
<node CREATED="1338789513309" ID="ID_1838979800" MODIFIED="1338789513309" TEXT="int utime(const char *pathname, const struct utimbuf *times);">
<node CREATED="1338789933394" ID="ID_1743494061" MODIFIED="1338789945236" TEXT="struct utimbuf">
<node CREATED="1338789965709" ID="ID_937044291" MODIFIED="1338789976896">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct utimbuf {
    </p>
    <p>
      time t actime; /* access time */
    </p>
    <p>
      time t modtime; /* modification time */
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1338789978322" ID="ID_1808077504" MODIFIED="1338789987060" TEXT="$touch"/>
</node>
</node>
</node>
<node CREATED="1338796409886" ID="ID_1263416245" MODIFIED="1363164504913" TEXT="file device">
<node CREATED="1338796420721" ID="ID_235538431" MODIFIED="1338796423421" TEXT="st_dev">
<node CREATED="1338796425221" ID="ID_1797301092" MODIFIED="1338796432664" TEXT="major number"/>
<node CREATED="1338796432920" ID="ID_60303817" MODIFIED="1338796436822" TEXT="minor number"/>
</node>
<node CREATED="1338796438076" ID="ID_65579689" MODIFIED="1338796441541" TEXT="st_rdev"/>
</node>
</node>
</node>
</node>
<node CREATED="1338637082269" FOLDED="true" ID="ID_1651944216" MODIFIED="1366129709156" POSITION="right" TEXT="environment of unix procss">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1338822136849" ID="ID_766699234" MODIFIED="1338822194055" TEXT="start-up routine">
<node CREATED="1338822145228" ID="ID_754782817" MODIFIED="1338822246567" TEXT="executable &apos;s starting address set by linker"/>
<node CREATED="1338822248118" ID="ID_1587548033" MODIFIED="1338822304914" TEXT="take values (commandline argument) from kernel"/>
<node CREATED="1338822305449" ID="ID_1188401425" MODIFIED="1338822374087" TEXT="call main function"/>
</node>
<node CREATED="1338904337804" ID="ID_1694410466" MODIFIED="1338904339409" TEXT="main">
<node CREATED="1338904341459" ID="ID_1962500784" MODIFIED="1338904362866" TEXT="int main(int argc,char*argv[]);"/>
<node CREATED="1338904363642" ID="ID_498716461" MODIFIED="1338904420055" TEXT="int main(int argc,char*argv[],char*envp[]);">
<node CREATED="1338904421788" ID="ID_742624749" MODIFIED="1338904425436" TEXT="deprecated"/>
</node>
<node CREATED="1338904426721" ID="ID_1613600394" MODIFIED="1338904510348" TEXT="command-line arguments">
<node CREATED="1338904530045" ID="ID_1541976105" MODIFIED="1338904602428" TEXT="argv[argc]==NULL guaranteed"/>
</node>
<node CREATED="1338904431150" FOLDED="true" ID="ID_1396530300" MODIFIED="1338906196671" TEXT="environment list">
<node CREATED="1338904609033" FOLDED="true" ID="ID_666134160" MODIFIED="1338906195734" TEXT="environ">
<node CREATED="1338905226227" ID="ID_400326195" MODIFIED="1338905247213" TEXT="global variable pointing to env list"/>
<node CREATED="1338905248741" FOLDED="true" ID="ID_1854434020" MODIFIED="1338906192678" TEXT="using &quot;extern char **environ;&quot;">
<icon BUILTIN="button_ok"/>
<node CREATED="1338906122330" ID="ID_964968475" MODIFIED="1338906145578" TEXT="environ points to env list"/>
</node>
<node CREATED="1338905273870" FOLDED="true" ID="ID_1387450017" MODIFIED="1338906193721" TEXT="!using &quot;extern char *environ[];&quot;">
<icon BUILTIN="button_cancel"/>
<node CREATED="1338906148446" ID="ID_1056592730" MODIFIED="1338906190670" TEXT="environ point to string"/>
</node>
</node>
<node CREATED="1338904620478" ID="ID_131447063" MODIFIED="1338904712428" TEXT="getenv">
<node CREATED="1338904706682" ID="ID_1625452751" MODIFIED="1338904763942" TEXT="&lt;stdlib.h&gt;char *getenv(const char *name); "/>
</node>
<node CREATED="1338904660630" ID="ID_24237573" MODIFIED="1338904682442" TEXT="putenv">
<node CREATED="1338904745965" ID="ID_1513990665" MODIFIED="1338904777308" TEXT="&lt;stdlib.h&gt;int putenv(char *string); "/>
</node>
</node>
</node>
<node CREATED="1338822429613" ID="ID_783748357" MODIFIED="1366129700489" TEXT="process termination">
<node CREATED="1338822449013" ID="ID_1531611158" MODIFIED="1366129705085" TEXT="normal (3)">
<node CREATED="1338822536719" ID="ID_701252260" MODIFIED="1338822541416" TEXT="return from main">
<node CREATED="1338822705799" ID="ID_1597753802" MODIFIED="1338822731045" TEXT="start-up routine: exit(main(argc,argv);"/>
</node>
<node CREATED="1338822542157" ID="ID_115718796" MODIFIED="1338822572803" TEXT="calling exit">
<node CREATED="1338903529358" ID="ID_1194099467" MODIFIED="1338903563459" TEXT="&lt;stdlib.h&gt;void exit(int status);">
<node CREATED="1338903685769" ID="ID_945962732" MODIFIED="1338903826970" TEXT="do some cleanup before returning to kernel(calling exit handlers)"/>
<node CREATED="1338903862893" ID="ID_742428803" MODIFIED="1338903886464" TEXT="&lt;stdlib.h&gt;int atexit (void (*fn) (void)) ;">
<node CREATED="1338903921888" ID="ID_962466249" MODIFIED="1338904058084" TEXT="register up to 32 exit handlers which is automatically &#xa;called in reverse order of their registration"/>
</node>
</node>
</node>
<node CREATED="1338822547443" ID="ID_1026094773" MODIFIED="1338822582218" TEXT="calling _exit">
<node CREATED="1338903573142" ID="ID_446590773" MODIFIED="1338903590270" TEXT="&lt;unistd.h&gt;void _exit(int status);">
<node CREATED="1338903692082" ID="ID_1814061778" MODIFIED="1338903742316" TEXT="return to kernel immediately"/>
</node>
</node>
</node>
<node CREATED="1338822460370" ID="ID_1013012304" MODIFIED="1338822533782" TEXT="abnormal (2)">
<node CREATED="1338822554070" ID="ID_1101005981" MODIFIED="1338822586155" TEXT="calling abort"/>
<node CREATED="1338822586579" ID="ID_1921756236" MODIFIED="1338822604440" TEXT="terminated by signal"/>
</node>
</node>
<node CREATED="1338906451366" ID="ID_1355210046" MODIFIED="1338906462286" TEXT="executable format"/>
<node CREATED="1338906462775" FOLDED="true" ID="ID_1571391690" MODIFIED="1338992092045" TEXT="memory allocation">
<node CREATED="1338990718457" ID="ID_424555725" MODIFIED="1338990718457" TEXT="#include &lt;stdlib. h&gt;"/>
<node CREATED="1338990718462" ID="ID_1321955775" MODIFIED="1338990718462" TEXT="void *malloc (size_t size) ;">
<node CREATED="1338990757209" ID="ID_890124462" MODIFIED="1338990872950" TEXT="alloc and uninitialized"/>
</node>
<node CREATED="1338990718464" ID="ID_1228300930" MODIFIED="1338990718464" TEXT="void *calloc(size_t nobj, size_t size);">
<node CREATED="1338990785247" ID="ID_1819217181" MODIFIED="1338990793811" TEXT="alloc and initialize"/>
</node>
<node CREATED="1338990718466" ID="ID_926468250" MODIFIED="1338990718466" TEXT="void *realloc(void *ptr, size_t newsize);">
<node CREATED="1338990798110" ID="ID_1931220472" MODIFIED="1338990870220" TEXT="realloc,old space keep unchanged,new space uninitialized"/>
<node CREATED="1338990718467" ID="ID_1612220735" MODIFIED="1338990732869" TEXT="all three return: nonnull pointer if OK, NULL on error"/>
</node>
<node CREATED="1338990718470" ID="ID_518930583" MODIFIED="1338990718470" TEXT="void free (void *ptr);"/>
<node CREATED="1338991688395" ID="ID_178485361" MODIFIED="1338991712261" TEXT="misc">
<node CREATED="1338991713783" ID="ID_1617120209" MODIFIED="1338991725435" TEXT="mallopt"/>
<node CREATED="1338991726002" ID="ID_604349040" MODIFIED="1338991738460" TEXT="mallinfo"/>
<node CREATED="1338991738710" ID="ID_1505688895" MODIFIED="1338991741966" TEXT="alloca"/>
</node>
</node>
<node CREATED="1338992093422" ID="ID_783949792" MODIFIED="1339166986150" TEXT="environment variable">
<node CREATED="1338992118012" ID="ID_1167548546" MODIFIED="1338992118012" TEXT="#include &lt;stdlib. h&gt;"/>
<node CREATED="1338992118013" ID="ID_927119891" MODIFIED="1338992128334" TEXT="char *getenv(const char *name);"/>
<node CREATED="1338992143120" ID="ID_1637971547" MODIFIED="1338992143120" TEXT="int putenv(const char *str);"/>
<node CREATED="1338992143121" ID="ID_887222789" MODIFIED="1338992208030" TEXT="int setenv(const char *name,const char *value, int rewrite) ; "/>
<node CREATED="1338992143122" ID="ID_1174850635" MODIFIED="1338992212564" TEXT="void unsetenv(const char *name) ;"/>
</node>
<node CREATED="1338993134747" ID="ID_1262606434" MODIFIED="1363229139415" TEXT="setjmp longjmp">
<node CREATED="1338993121158" ID="ID_442727634" MODIFIED="1338993178302" TEXT="#include &lt;setjmp. h&gt;"/>
<node CREATED="1338993121159" ID="ID_1867238479" MODIFIED="1338993121159" TEXT="int setjmp(jmp_buf env) ;">
<node CREATED="1338993121159" ID="ID_385106889" MODIFIED="1338993121159" TEXT="Returns: 0 if called directly, nonzero if returning from a call to longjmp"/>
</node>
<node CREATED="1338993121161" ID="ID_603423713" MODIFIED="1338993121161" TEXT="void longjmp(jmp_buf env, int val) ;">
<node CREATED="1338993299913" ID="ID_1728064522" MODIFIED="1338993334813" TEXT="automatic register variable depends"/>
<node CREATED="1338993341288" ID="ID_709949709" MODIFIED="1338993370507" TEXT="global static volatile OK"/>
</node>
</node>
<node CREATED="1338993399175" FOLDED="true" ID="ID_1201533562" MODIFIED="1341294846390" TEXT="getrlimit setrlimit">
<node CREATED="1338993418253" ID="ID_1430269401" MODIFIED="1338993418253" TEXT="#include &lt;sys/time.h&gt;"/>
<node CREATED="1338993418256" ID="ID_1827360889" MODIFIED="1338993418256" TEXT="#include &lt;sys/resource.h&gt;"/>
<node CREATED="1338993418257" ID="ID_1827805105" MODIFIED="1338993456976" TEXT="int getrlimit(int resource,struct rlimit *rlptr);"/>
<node CREATED="1338993418259" ID="ID_1469654502" MODIFIED="1339316570330" TEXT="int setrlimit(int resource,const struct rlimit *rlptr); ">
<node CREATED="1338993418262" ID="ID_984862067" MODIFIED="1338993477386" TEXT="both return: 0 if OK, nonzero on error"/>
<node CREATED="1338993510640" ID="ID_924224849" MODIFIED="1338993553412">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct rlimit {
    </p>
    <p>
      &#160;&#160;&#160;&#160;rlim_t rlim_cur; /* soft limit: current limit */
    </p>
    <p>
      &#160;&#160;&#160;&#160;rlim_t rlim_max; /* hard limit: maximum value for rlim cur */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
<node CREATED="1338994100711" ID="ID_418386087" MODIFIED="1338994107730" TEXT="RLIM_INFINITY"/>
</node>
<node CREATED="1338993798964" ID="ID_167950228" MODIFIED="1338993804865" TEXT="resource">
<node CREATED="1338993806629" ID="ID_301798452" MODIFIED="1338993824385" TEXT="RLIMIT_CORE">
<node CREATED="1338994059103" ID="ID_1292232147" MODIFIED="1338994066327" TEXT="size of core"/>
</node>
<node CREATED="1338993824784" ID="ID_1026112794" MODIFIED="1338993836725" TEXT="RLIMIT_CPU ">
<node CREATED="1338994048599" ID="ID_538983537" MODIFIED="1338994057674" TEXT="cpu time in second"/>
</node>
<node CREATED="1338993838540" ID="ID_1544501465" MODIFIED="1338993845922" TEXT="RLIMIT _DATA">
<node CREATED="1338994042952" ID="ID_136707077" MODIFIED="1338994046928" TEXT="data segment"/>
</node>
<node CREATED="1338993855553" ID="ID_902835617" MODIFIED="1338993861784" TEXT="RLIMIT _FSIZE">
<node CREATED="1338994036275" ID="ID_1924061025" MODIFIED="1338994041203" TEXT="size of file"/>
</node>
<node CREATED="1338993862051" ID="ID_1086670703" MODIFIED="1338993892680" TEXT="RLIMIT _MEMLOCK">
<node CREATED="1338994027530" ID="ID_1614120168" MODIFIED="1338994034751" TEXT="unknown"/>
</node>
<node CREATED="1338993892918" ID="ID_1474718187" MODIFIED="1338993896784" TEXT="RLIMIT _NOFILE">
<node CREATED="1338994022741" ID="ID_1074241936" MODIFIED="1338994025849" TEXT="num of file"/>
</node>
<node CREATED="1338993897124" ID="ID_1325439088" MODIFIED="1338993901398" TEXT="RLIMIT _OFILE">
<node CREATED="1338994014153" ID="ID_1699627618" MODIFIED="1338994020282" TEXT="num of file"/>
</node>
<node CREATED="1338993919676" ID="ID_1608884019" MODIFIED="1338993924020" TEXT="RLIMIT _NPROC">
<node CREATED="1338993993665" ID="ID_1241699934" MODIFIED="1338994007852" TEXT="num of proc"/>
</node>
<node CREATED="1338993932444" ID="ID_1347533983" MODIFIED="1338993937636" TEXT="RLIMIT _RSS">
<node CREATED="1338993983020" ID="ID_715684157" MODIFIED="1338993991799" TEXT="reside set size"/>
</node>
<node CREATED="1338993945201" ID="ID_251631172" MODIFIED="1338993950185" TEXT="RLIMIT _STACK">
<node CREATED="1338993971857" ID="ID_1883851695" MODIFIED="1338993981224" TEXT="stack segment"/>
</node>
<node CREATED="1338993950498" ID="ID_1207737870" MODIFIED="1341294623887" TEXT="RLIMIT _VMEM">
<node CREATED="1338993962592" ID="ID_1439444496" MODIFIED="1338993969204" TEXT="mmap"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1338994150146" ID="ID_194992328" MODIFIED="1366270147930" POSITION="right" TEXT="process control">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1338994404974" ID="ID_1210400997" MODIFIED="1338994412479" TEXT="process">
<node CREATED="1338994415115" ID="ID_421103117" MODIFIED="1338994419528" TEXT="0">
<node CREATED="1338994424549" ID="ID_640427957" MODIFIED="1338994427636" TEXT="swapper">
<node CREATED="1338994543335" ID="ID_1404961116" MODIFIED="1338994559716" TEXT="system(kernel) process"/>
</node>
</node>
<node CREATED="1338994419853" ID="ID_825509080" MODIFIED="1338994420600" TEXT="1">
<node CREATED="1338994562179" ID="ID_877957790" MODIFIED="1338994563680" TEXT="init">
<node CREATED="1338994564903" ID="ID_1205146957" MODIFIED="1338994564903" TEXT=""/>
</node>
</node>
<node CREATED="1338994420862" ID="ID_1034044981" MODIFIED="1338994421542" TEXT="2">
<node CREATED="1338994629200" ID="ID_384168062" MODIFIED="1338994633723" TEXT="pagedaemon"/>
</node>
</node>
<node CREATED="1339221928340" FOLDED="true" ID="ID_1029104348" MODIFIED="1366267674155" TEXT="uid/gid">
<node CREATED="1338994699751" ID="ID_939710529" MODIFIED="1339174111553" TEXT="getppid"/>
<node CREATED="1338994696539" ID="ID_1990506831" MODIFIED="1339221950087" TEXT="getpid"/>
<node CREATED="1338994702126" ID="ID_618800614" MODIFIED="1339174092527" TEXT="getuid"/>
<node CREATED="1338994708820" ID="ID_155229962" MODIFIED="1339174092528" TEXT="geteuid"/>
<node CREATED="1338994711415" ID="ID_1935263084" MODIFIED="1339174092530" TEXT="getgid"/>
<node CREATED="1338994716900" ID="ID_497525194" MODIFIED="1339174092545" TEXT="getegid"/>
<node CREATED="1339174138997" FOLDED="true" ID="ID_119029249" MODIFIED="1339221937492" TEXT="setuid">
<node CREATED="1339175548879" ID="ID_1407602593" MODIFIED="1339175553689" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1339175548880" ID="ID_168527188" MODIFIED="1339175553691" TEXT="#include &lt;unistd.h&gt;"/>
<node CREATED="1339175548881" ID="ID_506903882" MODIFIED="1339175553707" TEXT="int setuid(uid_t uid);">
<node CREATED="1339175692628" ID="ID_1748638309" MODIFIED="1339175692628" TEXT=""/>
<node CREATED="1339175707919" ID="ID_745343291" MODIFIED="1339175757057" TEXT="Both return: 0 if OK, -1 on error (errno:EPERM)"/>
</node>
<node CREATED="1339174210561" FOLDED="true" ID="ID_1910006622" MODIFIED="1339175483876" TEXT="internal data struct">
<node CREATED="1339174238090" ID="ID_1445632913" MODIFIED="1339174256234" TEXT="real user ID">
<node CREATED="1339174958320" ID="ID_828092490" MODIFIED="1339175038506" TEXT=" inherits its parent&apos;s (fork)"/>
<node CREATED="1339174601970" ID="ID_18355414" MODIFIED="1339175022549" TEXT="set by superuser using setuid(setuid)"/>
</node>
<node CREATED="1339174256572" ID="ID_23427981" MODIFIED="1339174264647" TEXT="effective user ID">
<node CREATED="1339175032153" ID="ID_432650431" MODIFIED="1339175055024" TEXT="inherits its parent&apos;s (fork)"/>
<node CREATED="1339174658649" ID="ID_935852715" MODIFIED="1339175030808" TEXT="set from user ID of program file if its set-user-ID is on (exec)"/>
<node CREATED="1339175057506" ID="ID_1483038286" MODIFIED="1339175139489" TEXT="set by user(including superuser and unprivileged user)using setuid(setuid)"/>
</node>
<node CREATED="1339174264954" ID="ID_1776324709" MODIFIED="1339174317845" TEXT="saved set-user-ID">
<node CREATED="1339175153436" ID="ID_1673899616" MODIFIED="1339175173152" TEXT="inherit its parent&apos;s (fork)"/>
<node CREATED="1339175182637" ID="ID_333449376" MODIFIED="1339175247303" TEXT="copy from its effective user ID(exec)"/>
<node CREATED="1339175220366" ID="ID_795119299" MODIFIED="1339175239518" TEXT="set by superuser using setuid(setuid)"/>
</node>
</node>
<node CREATED="1339175249316" FOLDED="true" ID="ID_1321789852" MODIFIED="1339175485604" TEXT="rules">
<node CREATED="1339175256569" ID="ID_344146332" MODIFIED="1339175256569" TEXT="">
<node CREATED="1339175274438" ID="ID_434569408" MODIFIED="1339175335786" TEXT="Only a superuser process can change the real user ID. Normally the real user ID  is set by the login(1) program when we log in and never changes. Since login is a superuser process, when it calls setuid it sets all three user IDs.&#xa;&#xa;">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1339175349804" ID="ID_779778999" MODIFIED="1339175432599">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The effective user ID is set by the exec functions, only if the set-user-ID bit is
    </p>
    <p>
      set for the program file. If the set-user-ID bit is not set, the exec functions leave
    </p>
    <p>
      the effective user ID as ifs current value. We can call setuid after at any&#160;&#160;time to set the effective user ID to either the real user ID or the saved set-user-ID Naturally we can't set the effective user ID to any random value.
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="full-2"/>
</node>
<node CREATED="1339175457998" ID="ID_1259121174" MODIFIED="1339175464321" TEXT="The saved set-user-ID is copied from the effective user ID by exec. This copy is  saved after exec stores the effective user ID from the file&apos;s user ID (if the file&apos;s  set-user-ID bit is set).  ">
<icon BUILTIN="full-3"/>
</node>
</node>
</node>
<node CREATED="1339175490044" ID="ID_1997074472" MODIFIED="1339175491536" TEXT="case">
<node CREATED="1339175561122" ID="ID_1145391221" MODIFIED="1339175576989" TEXT="unprivileged user">
<node CREATED="1339175579045" ID="ID_1980004544" MODIFIED="1339176603216" TEXT="set effective user ID to either real user ID or saved set-user-ID,can&apos;t set effective user ID to random value"/>
</node>
<node CREATED="1339175493672" ID="ID_743070488" MODIFIED="1339176518723" TEXT="superuser ">
<node CREATED="1339175510239" ID="ID_113585840" MODIFIED="1339175559650" TEXT="using setuid set all three IDs to uid."/>
</node>
</node>
</node>
<node CREATED="1339174148969" ID="ID_671828985" MODIFIED="1339174153362" TEXT="setgid"/>
<node CREATED="1339176428582" FOLDED="true" ID="ID_1980318506" MODIFIED="1366267019333" TEXT="setreuid">
<node CREATED="1339176440948" ID="ID_521915231" MODIFIED="1339176459698" TEXT="swap real user ID and effective user ID"/>
</node>
<node CREATED="1339176421299" ID="ID_164515585" MODIFIED="1339176428066" TEXT="setregid"/>
<node CREATED="1339174153862" FOLDED="true" ID="ID_275699227" MODIFIED="1339221941805" TEXT="seteuid">
<node CREATED="1339176495576" ID="ID_1083002541" MODIFIED="1339176506167" TEXT="unprivileged user">
<node CREATED="1339176522997" ID="ID_903803618" MODIFIED="1339176686845" TEXT="set effective user ID to either real user ID or saved &#xa;set-user-ID,can&apos;t set effective user ID to random value "/>
</node>
<node CREATED="1339176506476" ID="ID_1478487928" MODIFIED="1339176512662" TEXT="privileged user">
<node CREATED="1339176689450" ID="ID_1753751616" MODIFIED="1339176718299" TEXT="only set effective user ID to uid, other two IDs unchanged"/>
</node>
</node>
<node CREATED="1339174156939" ID="ID_1779559083" MODIFIED="1339174161529" TEXT="setegid"/>
</node>
<node CREATED="1338994752175" FOLDED="true" ID="ID_999655989" MODIFIED="1366129809625" TEXT="fork">
<node CREATED="1338994841204" ID="ID_1161502757" MODIFIED="1339425140104" TEXT="&lt;sys/types.h&gt;&lt;unistd.h&gt; pid_t fork (void) ;">
<node CREATED="1338994884529" ID="ID_1715255732" MODIFIED="1338994884529" TEXT="Returns: 0 in child, process ID of child in parent, -1 on error"/>
<node CREATED="1339074650993" ID="ID_642208880" MODIFIED="1339074679587" TEXT="data,stack,heap copy-on-write">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1339074681082" ID="ID_724571022" MODIFIED="1339074866698" TEXT="it depends on scheduling agorithm that parent or child starting executing first">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1339074914915" ID="ID_1314617397" MODIFIED="1339074961394" TEXT="IPC is required to synchronize child and parent processes">
<icon BUILTIN="button_ok"/>
</node>
<node CREATED="1339075371248" ID="ID_1208882956" MODIFIED="1339314311863" TEXT="properties of parent herited by child ">
<icon BUILTIN="button_ok"/>
<node CREATED="1339075443245" ID="ID_253946005" MODIFIED="1339075443245" TEXT="&#x2022; real user ID, real group ID, effective user ID, effective group ID"/>
<node CREATED="1339075443247" ID="ID_728540118" MODIFIED="1339075443247" TEXT="&#x2022; supplementary group IDs"/>
<node CREATED="1339075443248" ID="ID_1714058486" MODIFIED="1339075443248" TEXT="&#x2022; process group ID"/>
<node CREATED="1339075443249" ID="ID_628226276" MODIFIED="1339075443249" TEXT="&#x2022; session ID"/>
<node CREATED="1339075443250" ID="ID_1471758074" MODIFIED="1339075443250" TEXT="&#x2022; controlling terminal"/>
<node CREATED="1339075443251" ID="ID_666863272" MODIFIED="1339075443251" TEXT="&#x2022; set-user-ID flag and set-group-ID flag"/>
<node CREATED="1339075443252" ID="ID_1560361803" MODIFIED="1339075443252" TEXT="&#x2022; current working directory"/>
<node CREATED="1339075443253" ID="ID_1469208562" MODIFIED="1339075443253" TEXT="&#x2022; root directory"/>
<node CREATED="1339075443253" ID="ID_882802680" MODIFIED="1339075443253" TEXT="&#x2022; file mode creation mask"/>
<node CREATED="1339075443254" ID="ID_558508489" MODIFIED="1339075443254" TEXT="&#x2022; signal mask and dispositions"/>
<node CREATED="1339075443255" ID="ID_511479901" MODIFIED="1339075443255" TEXT="&#x2022; the close-on-exec flag for any open file descriptors"/>
<node CREATED="1339075443256" ID="ID_919524643" MODIFIED="1339075443256" TEXT="&#x2022; environment"/>
<node CREATED="1339075443257" ID="ID_214920060" MODIFIED="1339075443257" TEXT="&#x2022; attached shared memory segments"/>
<node CREATED="1339075443258" ID="ID_738694583" MODIFIED="1339075443258" TEXT="&#x2022; resource limits"/>
</node>
<node CREATED="1339075470630" ID="ID_800073633" MODIFIED="1339075524720" TEXT="properties different between parent and child">
<icon BUILTIN="button_ok"/>
<node CREATED="1339075561900" ID="ID_75078523" MODIFIED="1339075561900" TEXT="&#x2022; the retum value from fork"/>
<node CREATED="1339075561901" ID="ID_933122884" MODIFIED="1339075561901" TEXT="&#x2022; the process IDs are different"/>
<node CREATED="1339075561902" ID="ID_895583920" MODIFIED="1339075582829" TEXT="&#x2022; the two processes have different parent process IDs--the parent process ID of the child is the parent; the parent process ID of the parent doesn&apos;t change"/>
<node CREATED="1339075561908" ID="ID_424710585" MODIFIED="1339075598918" TEXT="&#x2022; the child&apos;s values for tms_utime, tms_stime, tms_cutime, and tms ustime are set to 0 "/>
<node CREATED="1339075561910" ID="ID_1892433651" MODIFIED="1339075561910" TEXT="&#x2022; file locks set by the parent are not inherited by the child"/>
<node CREATED="1339075561911" ID="ID_1184391112" MODIFIED="1339075561911" TEXT="&#x2022; pending alarms are cleared for the child"/>
<node CREATED="1339075561911" ID="ID_36490541" MODIFIED="1339075561911" TEXT="&#x2022; the set of pending signals for the child is set to the empty set"/>
</node>
</node>
<node CREATED="1339075715684" FOLDED="true" ID="ID_1196698537" MODIFIED="1339314572946" TEXT="&lt;vfork.h&gt; pid_t vfork(void); ">
<node CREATED="1339075798232" ID="ID_1229445099" MODIFIED="1339075921005" TEXT="vfork is intended to create a new process when the purpose of the new process is  to exec a new program "/>
<node CREATED="1339075931296" ID="ID_1751659558" MODIFIED="1339076022006" TEXT="vfork creates the new process, just like fork, without fully copying the address space of the parent into the child,  since the child won&apos;t reference that address space--the child just calls exec (or exit) right after the vfork. "/>
<node CREATED="1339076062511" ID="ID_568130480" MODIFIED="1339076124711" TEXT="while the child is running, until it calls either exec or  exit, the child runs in the address space of the parent. "/>
<node CREATED="1339076126017" ID="ID_1875101190" MODIFIED="1339076128054" TEXT="vfork guarantees that the  child runs first, until the child calls exec or exit. When the child calls either of these  functions, the parent resumes. "/>
</node>
</node>
<node CREATED="1339079911162" ID="ID_403211442" MODIFIED="1366269017726" TEXT="wait">
<node CREATED="1339079935443" ID="ID_1337300058" MODIFIED="1339079935443" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1339079935445" ID="ID_1112245520" MODIFIED="1339079935445" TEXT="#include &lt;sys/wait.h&gt;"/>
<node CREATED="1339079935446" FOLDED="true" ID="ID_393326232" MODIFIED="1366269858468" TEXT="pid_t wait(int *statloc);">
<node CREATED="1339080050538" ID="ID_917046497" MODIFIED="1339080071121" TEXT="bahavior">
<node CREATED="1339080073111" ID="ID_1522635188" MODIFIED="1366266745975" TEXT="block">
<icon BUILTIN="full-1"/>
<node CREATED="1339080160826" ID="ID_1531830440" MODIFIED="1339080303148" TEXT="all child processes ara still running"/>
</node>
<node CREATED="1339080081509" ID="ID_807711340" MODIFIED="1339080146950" TEXT="return immediately with termination status">
<icon BUILTIN="full-2"/>
<node CREATED="1339080186535" ID="ID_829620081" MODIFIED="1339080278639" TEXT="any child process has terminated and is waiting for its termination status to be fetched"/>
</node>
<node CREATED="1339080093863" ID="ID_584658238" MODIFIED="1358665450923" TEXT="return immediately with error (-1)">
<icon BUILTIN="full-3"/>
<node CREATED="1339080281188" ID="ID_522629118" MODIFIED="1339080298854" TEXT="no child processes"/>
</node>
</node>
<node CREATED="1339081105787" FOLDED="true" ID="ID_517132370" MODIFIED="1366269853085" TEXT="termination status (low 16bit)">
<node CREATED="1366269219646" FOLDED="true" ID="ID_804223851" MODIFIED="1366269851049" TEXT="|-(8b)-|-coredump(1b)-|-0&lt;signal(7b)&lt;0x7f-|">
<node CREATED="1358664200586" ID="ID_138825532" MODIFIED="1366269413782" TEXT="signaled (terminate abnormally)">
<node CREATED="1339081168880" ID="ID_547360969" MODIFIED="1366269293807" TEXT="WIFSIGNALED(status&#x7f;)">
<node CREATED="1339081224407" ID="ID_1433635559" MODIFIED="1366266830639" TEXT="WTERMSIG ( status )">
<node CREATED="1358664420386" ID="ID_1571649975" MODIFIED="1358664691223" TEXT="which signal caused termination of child process?"/>
</node>
<node CREATED="1339081236319" ID="ID_1086358463" MODIFIED="1339081236319" TEXT="WCOREDUMP (status)">
<node CREATED="1358664496103" ID="ID_273024851" MODIFIED="1358664697884" TEXT="is core file generated?"/>
</node>
</node>
</node>
</node>
<node CREATED="1366269578599" FOLDED="true" ID="ID_1852704379" MODIFIED="1366269848982" TEXT="|-stop signal(8b)-|-0x7f(8b)-|">
<node CREATED="1358664208242" ID="ID_457258712" MODIFIED="1366269575114" TEXT="stopped (jop control)">
<node CREATED="1339081168883" FOLDED="true" ID="ID_265387155" MODIFIED="1366269456482" TEXT="WIFSTOPPED (status)">
<node CREATED="1339081253994" ID="ID_1736161498" MODIFIED="1339081253994" TEXT="WSTOPSIG (status)">
<node CREATED="1358664557833" ID="ID_1885265194" MODIFIED="1358664716269" TEXT="which signal caused stop of child process?"/>
</node>
</node>
</node>
</node>
<node CREATED="1366269715495" FOLDED="true" ID="ID_1756498677" MODIFIED="1366269848358" TEXT="|-0xffff(8b)-|">
<node CREATED="1366269771136" ID="ID_1944266127" MODIFIED="1366269784812" TEXT="continued(job control)">
<node CREATED="1366269786111" ID="ID_438293728" MODIFIED="1366269820477" TEXT="WIFCONTINUED(status)"/>
</node>
</node>
<node CREATED="1366269038791" FOLDED="true" ID="ID_281573246" MODIFIED="1366269850377" TEXT="|-exit status(8b)-|-0(8b)-|">
<node CREATED="1358664183435" ID="ID_207425608" MODIFIED="1366269130521" TEXT="exited (terminate normally)">
<node CREATED="1339081168876" FOLDED="true" ID="ID_1983837262" MODIFIED="1366269608969" TEXT="WIFEXlTED (status)">
<node CREATED="1339081206224" ID="ID_1392025678" MODIFIED="1339081206224" TEXT="WEXITSTATUS (status)"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1339079935448" FOLDED="true" ID="ID_1100869807" MODIFIED="1366269019147" TEXT="pid_t waitpid(pid_t pid&#x7f;,int *statloc, int options) ;">
<node CREATED="1339081422036" ID="ID_725128144" MODIFIED="1366266845014" TEXT="options">
<node CREATED="1358663686932" FOLDED="true" ID="ID_867859217" MODIFIED="1366266851114" TEXT="0">
<node CREATED="1358663997755" ID="ID_1729558107" MODIFIED="1358664016012" TEXT="blocking"/>
</node>
<node CREATED="1339081437044" FOLDED="true" ID="ID_716871028" MODIFIED="1366266849014" TEXT="WNOHANG ">
<node CREATED="1358664020681" FOLDED="true" ID="ID_721511481" MODIFIED="1358664029853" TEXT="non-blocking">
<node CREATED="1339081491919" ID="ID_997223006" MODIFIED="1339081506119" TEXT="waitpid will not block if a child specified by pid is not immediately available. In this case the return value is 0. "/>
</node>
</node>
<node CREATED="1339081437049" FOLDED="true" ID="ID_1886801217" MODIFIED="1366266847653" TEXT="WUNTRACED ">
<node CREATED="1358664031202" ID="ID_1287838303" MODIFIED="1358664037534" TEXT="job control">
<node CREATED="1339081518588" ID="ID_901755186" MODIFIED="1339081574345" TEXT="If the implementation supports job control, the status of any childspecified by pid that bas stopped, and whose status has not been reported since it bas stopped, is returned. The WIFSTOPPED macro determines if the return value corresponds to a stopped child process.&#xa;&#xa;"/>
</node>
</node>
</node>
<node CREATED="1339081616605" ID="ID_239008581" MODIFIED="1339081633050" TEXT="pid">
<node CREATED="1339081634412" ID="ID_1723621999" MODIFIED="1339081641453" TEXT="== -1">
<node CREATED="1339081658568" ID="ID_1303387467" MODIFIED="1339081684831" TEXT="waits for any child process"/>
</node>
<node CREATED="1339081686246" ID="ID_315722980" MODIFIED="1339081695529" TEXT="&gt; 0">
<node CREATED="1339081700549" ID="ID_1781934602" MODIFIED="1339081758665" TEXT="waits for child process whose PID equals pid "/>
</node>
<node CREATED="1339081759860" ID="ID_1258723314" MODIFIED="1358663681086" TEXT="== 0">
<node CREATED="1339081781721" ID="ID_1619065286" MODIFIED="1339081839668" TEXT="waits for any child process whose GPID equals caller&apos;s "/>
</node>
<node CREATED="1339081849235" ID="ID_773717609" MODIFIED="1358663682524" TEXT="&lt; -1">
<node CREATED="1339081855705" ID="ID_34458924" MODIFIED="1339081894261" TEXT="waits for any child process whose GPID equals  absolute pid"/>
</node>
</node>
<node CREATED="1358665462298" ID="ID_199916579" MODIFIED="1358665465911" TEXT="return value">
<node CREATED="1358665468617" ID="ID_1288004579" MODIFIED="1358665474906" TEXT="-1">
<node CREATED="1358665480098" ID="ID_1749363087" MODIFIED="1358665484701" TEXT="on error">
<node CREATED="1358665487009" ID="ID_514308503" MODIFIED="1358665505124" TEXT="has no  such child process."/>
</node>
</node>
<node CREATED="1358665467119" ID="ID_1691275830" MODIFIED="1358665468398" TEXT="0">
<node CREATED="1358665507670" ID="ID_1196760265" MODIFIED="1358665515444" TEXT="non-blocking">
<node CREATED="1358665517205" ID="ID_183935575" MODIFIED="1358665596185" TEXT="return immediately if the specified  process is still running."/>
</node>
</node>
<node CREATED="1358665469680" ID="ID_249249863" MODIFIED="1358665470933" TEXT="pid"/>
</node>
</node>
<node CREATED="1339079935450" ID="ID_1682827753" MODIFIED="1339079935450" TEXT="Both return: process ID if OK, 0 (see later), or -1 on error"/>
<node CREATED="1339082130543" ID="ID_716582997" MODIFIED="1339082280272" TEXT="wait3(3.4+BSD)"/>
<node CREATED="1339082134109" ID="ID_713389170" MODIFIED="1339082280270" TEXT="wait4(3.4+BSD)"/>
</node>
<node CREATED="1339082288144" FOLDED="true" ID="ID_1503021603" MODIFIED="1366267025408" TEXT="exec">
<node CREATED="1339158848523" ID="ID_293706532" MODIFIED="1339158853258" TEXT="#include &lt;unistd. h&gt;"/>
<node CREATED="1339082354512" ID="ID_863683100" MODIFIED="1339082361415" TEXT="execl">
<node CREATED="1339167270514" ID="ID_173537753" MODIFIED="1339167359787" TEXT="int execl(const char*pathname,arg0,arg1,...,(char*)0);"/>
</node>
<node CREATED="1339082365653" ID="ID_1505881015" MODIFIED="1339082368194" TEXT="execv">
<node CREATED="1339167372054" ID="ID_1450922506" MODIFIED="1339167403072" TEXT="int execv(const char*pathname,argv);"/>
</node>
<node CREATED="1339082377919" ID="ID_1957500978" MODIFIED="1339082382443" TEXT="execle">
<node CREATED="1339167410759" ID="ID_1686952737" MODIFIED="1339167476382" TEXT="int execv(const char*pathname,arg0,arg1,...,(char*)0, char *const envp[]);"/>
</node>
<node CREATED="1339082387974" ID="ID_403492269" MODIFIED="1366266958884" TEXT="execve">
<icon BUILTIN="messagebox_warning"/>
<node CREATED="1339167223880" ID="ID_457312174" MODIFIED="1339167260298" TEXT="system call,others libaray functions just"/>
<node CREATED="1339167496290" ID="ID_305047369" MODIFIED="1339167533551" TEXT="int execve(const char*pathname,argv[],char* const envp[]);"/>
</node>
<node CREATED="1339082400646" ID="ID_1965507696" MODIFIED="1339082404982" TEXT="execlp">
<node CREATED="1339167539526" ID="ID_1502263952" MODIFIED="1339167573096" TEXT="int execlp(const char*filename,arg0,arg1,...,(char*)0);"/>
</node>
<node CREATED="1339082405274" ID="ID_959174817" MODIFIED="1366267006591" TEXT="execvp">
<node CREATED="1339167575968" ID="ID_26369015" MODIFIED="1339167593940" TEXT="int execvp(const char*filename,argv);"/>
</node>
<node CREATED="1339158797969" ID="ID_1820618979" MODIFIED="1339158825649" TEXT="All six return: -1 on error, no return on success"/>
<node CREATED="1339166873031" ID="ID_1439127980" MODIFIED="1339166875497" TEXT="e ">
<node CREATED="1339166938746" ID="ID_851197931" MODIFIED="1339167169509" TEXT="evironment  list terminated with NULL"/>
</node>
<node CREATED="1339166875836" ID="ID_517432916" MODIFIED="1339166877111" TEXT="l">
<node CREATED="1339167017706" ID="ID_805256369" MODIFIED="1339167338591" TEXT="argument list arg0,arg1,...,(char*)0"/>
</node>
<node CREATED="1339166877393" ID="ID_1131852162" MODIFIED="1339166878019" TEXT="v">
<node CREATED="1339167026165" ID="ID_705815986" MODIFIED="1339167118598" TEXT="char *argv[]"/>
</node>
<node CREATED="1339166878292" ID="ID_1748812766" MODIFIED="1339166879317" TEXT="p">
<node CREATED="1339167033900" ID="ID_1944804133" MODIFIED="1339167097181" TEXT="path prefix in $PATH"/>
</node>
</node>
<node CREATED="1339076175245" FOLDED="true" ID="ID_754308123" MODIFIED="1366269014113" TEXT="exit">
<node CREATED="1339079166383" FOLDED="true" ID="ID_1163042621" MODIFIED="1366267855489" TEXT="normal">
<node CREATED="1339079376693" ID="ID_659505909" MODIFIED="1339079382307" TEXT="return"/>
<node CREATED="1339076190907" ID="ID_502501278" MODIFIED="1339079371987" TEXT="exit">
<node CREATED="1366267505999" ID="ID_516269719" MODIFIED="1366267638072" TEXT="first performs cleanup handlers registered by atexit(),then call _exit"/>
</node>
<node CREATED="1339076193325" ID="ID_185108301" MODIFIED="1339076194939" TEXT="_exit">
<node CREATED="1366267465772" ID="ID_80391960" MODIFIED="1366267475683" TEXT="returns to the kernel immediately"/>
</node>
</node>
<node CREATED="1339079060609" FOLDED="true" ID="ID_464301849" MODIFIED="1366267861617" TEXT="abnormal">
<node CREATED="1339079412888" ID="ID_1215565398" MODIFIED="1339079415652" TEXT="abort"/>
<node CREATED="1339079415918" ID="ID_1001367820" MODIFIED="1339079419532" TEXT="signal"/>
</node>
<node CREATED="1366267868687" ID="ID_913070930" MODIFIED="1366267871975" TEXT="exit status"/>
<node CREATED="1339079435471" FOLDED="true" ID="ID_956365969" MODIFIED="1366267867130" TEXT="when process terminates">
<node CREATED="1339079580257" ID="ID_1242941529" MODIFIED="1366266715699" TEXT="unavailable">
<node CREATED="1339079644421" ID="ID_102168110" MODIFIED="1339079652712" TEXT="memory"/>
<node CREATED="1339079652972" ID="ID_1389590127" MODIFIED="1339079661421" TEXT="file descriptors"/>
</node>
<node CREATED="1339079587952" ID="ID_1199714714" MODIFIED="1366266721513" TEXT="available">
<node CREATED="1339079677519" ID="ID_201413227" MODIFIED="1339079679926" TEXT="pid"/>
<node CREATED="1339079680226" ID="ID_532159956" MODIFIED="1339079706302" TEXT="termination status"/>
<node CREATED="1339079706751" ID="ID_1465858674" MODIFIED="1339079721620" TEXT="mount of cpu time"/>
</node>
</node>
<node CREATED="1339078779539" FOLDED="true" ID="ID_408061442" MODIFIED="1366267864174" TEXT="child process">
<node CREATED="1339078687656" ID="ID_356726017" MODIFIED="1339078768158" TEXT="orphan process">
<node CREATED="1339079733008" ID="ID_832142527" MODIFIED="1339079793814" TEXT="process terminates after its parent process and adopted by process 0 init"/>
</node>
<node CREATED="1339078712000" ID="ID_833246715" MODIFIED="1339078764369" TEXT="zombie process">
<node CREATED="1339079795862" ID="ID_1040526321" MODIFIED="1339079908954" TEXT="process terminates before its parent process and will be recycled by its parent process using wait or waitpid"/>
</node>
</node>
</node>
<node CREATED="1339221960011" FOLDED="true" ID="ID_1961384818" MODIFIED="1366269016278" TEXT="accouting">
<node CREATED="1339222036515" ID="ID_976434166" MODIFIED="1339222051891" TEXT="enable the kernel writes an accounting record each time a process terminates. "/>
<node CREATED="1339222073486" ID="ID_244985844" MODIFIED="1339222094713" TEXT="accounting  records are typically 32 bytes of binary data with the name of the command, the amount  of CPU time used, the user ID and group ID, the starting time, and so on. "/>
<node CREATED="1339223103089" ID="ID_1039216420" MODIFIED="1339223105746" TEXT="The data required for the accounting record (CPU times, number of characters  transferred, etc.) are all kept by the kernel in the process table and initialized whenever  a new process is created "/>
<node CREATED="1339222207843" ID="ID_1309199752" MODIFIED="1339222470998" TEXT="$accton">
<node CREATED="1339222559742" ID="ID_1161560028" MODIFIED="1339222595439" TEXT="$accton /var/adm/pacct">
<node CREATED="1339222643572" ID="ID_269463061" MODIFIED="1339222651745" TEXT="turn on accounting"/>
</node>
<node CREATED="1339222625659" ID="ID_44213746" MODIFIED="1339222639329" TEXT="$accton /usr/adm/acct">
<node CREATED="1339222643572" ID="ID_300969849" MODIFIED="1339222651745" TEXT="turn on accounting"/>
</node>
<node CREATED="1339222598107" ID="ID_853012207" MODIFIED="1339222601263" TEXT="$accton">
<node CREATED="1339222643572" ID="ID_909529616" MODIFIED="1339222666199" TEXT="turn off accounting"/>
</node>
</node>
<node CREATED="1339222783490" FOLDED="true" ID="ID_1516444256" MODIFIED="1339225284726" TEXT="&lt;sys/acct.h&gt;">
<node CREATED="1339222902674" ID="ID_1636149215" MODIFIED="1339222936138" TEXT="struct acct">
<node CREATED="1339222931662" ID="ID_1202885147" MODIFIED="1339224393580" TEXT="definition">
<node CREATED="1339222801493" ID="ID_1887087815" MODIFIED="1339224706767">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typedef u_int16_t comp_t;/* 3-bit base 8 exponent; 13-bit fraction */
    </p>
    <p>
      struct acct
    </p>
    <p>
      &#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;char ac_flag;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting flags.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int16_t ac_uid;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting user ID.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int16_t ac_gid;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting group ID.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int16_t ac_tty;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Controlling tty.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int32_t ac_btime;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Beginning time.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_utime;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting user time.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_stime;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting system time.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_etime;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting elapsed time.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_mem;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting average memory usage.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_io;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting chars transferred. &#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_rw;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting blocks read or written.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_minflt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting minor pagefaults.&#160; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_majflt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting major pagefaults.&#160; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;comp_t ac_swaps;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting number of swaps.&#160; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int32_t ac_exitcode;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting process exitcode.&#160; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char ac_comm[ACCT_COMM+1];&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting command name.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;char ac_pad[10];&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Accounting padding bytes.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;};
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1339222972499" FOLDED="true" ID="ID_565961315" MODIFIED="1339223088586" TEXT="ac_flag">
<node CREATED="1339223028125" ID="ID_327803068" MODIFIED="1339223036043">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      enum
    </p>
    <p>
      &#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;AFORK = 0x01,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Has executed fork, but no exec.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;ASU = 0x02,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Used super-user privileges.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;ACORE = 0x08,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Dumped core.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;AXSIG = 0x10&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Killed by a signal.&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;};
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1339224098278" ID="ID_948428984" MODIFIED="1339224144687" TEXT="&lt;unistd.h&gt;int acct(const char*filename)">
<node CREATED="1339224147831" ID="ID_1091050122" MODIFIED="1339224155823" TEXT="used by accton"/>
</node>
<node CREATED="1339222521557" ID="ID_415800326" MODIFIED="1339222521557" TEXT=""/>
</node>
<node CREATED="1339225287048" FOLDED="true" ID="ID_1484205277" MODIFIED="1366129687419" TEXT="user identification">
<node CREATED="1339225490366" ID="ID_1142515086" MODIFIED="1339225517531" TEXT="get log name">
<node CREATED="1339225533752" ID="ID_441527606" MODIFIED="1339225624824" TEXT="&lt;unistd.&gt; char *getlogin();">
<node CREATED="1339225662361" ID="ID_1286719966" MODIFIED="1339225662361" TEXT="Returns:pointertostring givinglogin nameif OK, NULL on &#x7f;ror"/>
<node CREATED="1339225678191" ID="ID_301314363" MODIFIED="1339225683944" TEXT="This function can fail if the process is hOt attached to a terminal that a user logged into.  We normally call these processes daemons. ">
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
<node CREATED="1339225554633" ID="ID_1967350079" MODIFIED="1339225585817" TEXT="getpwuid">
<node CREATED="1339225554634" ID="ID_1598230747" MODIFIED="1339225554634" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1339225554634" MODIFIED="1339225554634" TEXT="#include &lt;pwd.h&gt;"/>
<node CREATED="1339225554635" ID="ID_1083188254" MODIFIED="1339225554635" TEXT="struct passwd *getpwnam(const char *name);"/>
<node CREATED="1339225554636" ID="ID_390622217" MODIFIED="1339225554636" TEXT="struct passwd *getpwuid(uid_t uid);"/>
<node CREATED="1339225554637" MODIFIED="1339225554637" TEXT="int getpwnam_r(const char *name, struct passwd *pwbuf,">
<node CREATED="1339225554638" MODIFIED="1339225554638" TEXT="char *buf, size_t buflen, struct passwd **pwbufp);"/>
</node>
<node CREATED="1339225554638" MODIFIED="1339225554638" TEXT="int getpwuid_r(uid_t uid, struct passwd *pwbuf,">
<node CREATED="1339225554639" MODIFIED="1339225554639" TEXT="char *buf, size_t buflen, struct passwd **pwbufp);"/>
</node>
</node>
</node>
</node>
<node CREATED="1339225715305" FOLDED="true" ID="ID_1521787437" MODIFIED="1366267678142" TEXT="process times">
<node CREATED="1339226532124" ID="ID_1204706641" MODIFIED="1339226599883" TEXT="&lt;sys/times.h&gt; clock_t times(struct tms *buf);">
<node CREATED="1339227115623" ID="ID_1995263056" MODIFIED="1339227187625" TEXT="clock_t using clock tick as basic measure unit">
<node CREATED="1339227202588" ID="ID_417589588" MODIFIED="1339227376330" TEXT="clock tick is quantum (time slice) as schedule period in TSS"/>
<node CREATED="1339227380097" ID="ID_1799007908" MODIFIED="1339227851968" TEXT="&lt;unistd.h&gt; long sysconf(int name);">
<icon BUILTIN="messagebox_warning"/>
<node CREATED="1339227530772" ID="ID_308880777" MODIFIED="1339227798287" TEXT="sysconf(_SC_CLK_TCK)"/>
</node>
</node>
<node CREATED="1339227836853" ID="ID_489224828" MODIFIED="1339227836853" TEXT="Returns: elapsed wall dock time in dock ticks if OK, -1 on error"/>
<node COLOR="#338800" CREATED="1339227189749" FOLDED="true" ID="ID_12176303" MODIFIED="1339227954663" TEXT="struct times">
<node CREATED="1339227918503" ID="ID_1585179297" MODIFIED="1339227937827">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct tms {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock_t tms_utime;&#160;&#160;/* user time */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock_t tms_stime;&#160;&#160;/* system time */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock_t tms_cutime; /* user time of children */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock_t tms_cstime; /* system time of children */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;};
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1339226729752" ID="ID_1300448599" MODIFIED="1339226750301" TEXT="execution time of process">
<node CREATED="1339226752002" ID="ID_365655895" MODIFIED="1339226808444" TEXT="clock time(wall clock time)">
<node CREATED="1339226825677" ID="ID_1723353434" MODIFIED="1339226840329" TEXT="the mount of time process takes to run"/>
</node>
<node CREATED="1339226759031" ID="ID_641700929" MODIFIED="1339226772356" TEXT="user CPU time">
<node CREATED="1339226842256" ID="ID_1294374500" MODIFIED="1339226939965" TEXT="CPU time of process execute in user mode"/>
</node>
<node CREATED="1339226772669" ID="ID_887095091" MODIFIED="1339226791231" TEXT="system CPU time">
<node CREATED="1339226910182" ID="ID_726568614" MODIFIED="1339226934920" TEXT="CPU time of process executes in kernel mode"/>
</node>
</node>
<node CREATED="1339226987505" FOLDED="true" ID="ID_1866853532" MODIFIED="1339227095504" TEXT="$time can measure all three times of executing a process">
<node CREATED="1339227024865" ID="ID_1444074099" MODIFIED="1339227077948" TEXT="time grep -R something /  &gt;&amp; /dev/null"/>
</node>
</node>
</node>
<node CREATED="1339228099723" ID="ID_1935674997" MODIFIED="1366129744965" POSITION="right" TEXT="process relationship">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339236124624" FOLDED="true" ID="ID_620686278" MODIFIED="1339238956815" TEXT="login">
<node CREATED="1339236135397" FOLDED="true" ID="ID_784036749" MODIFIED="1339238884393" STYLE="fork" TEXT="4.3+BSD terminal login">
<node CREATED="1339236205323" ID="ID_1601130280" MODIFIED="1339236231932" TEXT="init">
<icon BUILTIN="full-1"/>
<node CREATED="1339236205755" ID="ID_1659679808" MODIFIED="1339236267347" TEXT="fork">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339236206223" ID="ID_64572894" MODIFIED="1339236284135" TEXT="init">
<icon BUILTIN="full-2"/>
<node CREATED="1339236287334" ID="ID_782022662" MODIFIED="1339236300036" TEXT="exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339236306723" ID="ID_1067385574" MODIFIED="1339236323667" TEXT="getty">
<icon BUILTIN="full-3"/>
<node CREATED="1339236345953" ID="ID_298089902" MODIFIED="1339236352462" TEXT="exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339236353811" ID="ID_1435404960" MODIFIED="1339236358552" TEXT="login">
<icon BUILTIN="full-4"/>
<node CREATED="1339236422178" ID="ID_659684851" MODIFIED="1339237556301" TEXT="exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339236432414" ID="ID_692381650" MODIFIED="1339237560690" TEXT="login shell">
<icon BUILTIN="full-5"/>
</node>
</node>
<node CREATED="1339236966305" FOLDED="true" ID="ID_688149042" MODIFIED="1339237555136" TEXT="">
<node CREATED="1339236968431" ID="ID_920611798" MODIFIED="1339237094486" TEXT="accesses passwd database using getpwnam with username,prompts for password input"/>
<node CREATED="1339237096156" ID="ID_629650763" MODIFIED="1339237256854" TEXT="reads password,encrypts it using crypt ,compares it,accepts log in"/>
<node CREATED="1339237257489" ID="ID_715963001" MODIFIED="1339237335887" TEXT="changes cwd to user home directory(chdir)"/>
<node CREATED="1339237307953" ID="ID_178393661" MODIFIED="1339237402946" TEXT="changes  ownership of terminal device to user"/>
<node CREATED="1339237403616" ID="ID_413801996" MODIFIED="1339237439161" TEXT="changes permissions"/>
<node CREATED="1339237440730" ID="ID_194256270" MODIFIED="1339237468327" TEXT="setgid initgroups"/>
<node CREATED="1339237505481" ID="ID_182621026" MODIFIED="1339237533485" TEXT="initialize environment:HOME,USER,SHELL,PATH etc."/>
<node CREATED="1339237550245" ID="ID_1911166703" MODIFIED="1339237551975" TEXT="setuid"/>
</node>
</node>
</node>
<node CREATED="1339236753039" FOLDED="true" ID="ID_546445655" MODIFIED="1339236926631" TEXT="">
<node CREATED="1339236695842" ID="ID_947930362" MODIFIED="1339236814806" TEXT="opens terminal device,file descriptor 0,1,2 set to the device"/>
<node CREATED="1339236791015" ID="ID_1345590659" MODIFIED="1339236845133" TEXT="outputs login: ,then waits for user input username"/>
<node CREATED="1339236902043" ID="ID_1112050679" MODIFIED="1339236923771" TEXT="creates environment variables for login"/>
</node>
</node>
</node>
<node CREATED="1339236679249" FOLDED="true" ID="ID_1527342729" MODIFIED="1339236692995" TEXT="">
<node CREATED="1339236681202" ID="ID_1194900672" MODIFIED="1339236691644" TEXT="with empty environment"/>
</node>
</node>
</node>
<node CREATED="1339236467053" FOLDED="true" ID="ID_626401796" MODIFIED="1339236594285" TEXT="">
<node CREATED="1339236470215" FOLDED="true" ID="ID_46179129" MODIFIED="1339236556408" TEXT="reads /etc/ttys">
<node CREATED="1339236515521" ID="ID_1371679554" MODIFIED="1339236554766" TEXT="/etc/ttys has one line per terminal device"/>
</node>
<node CREATED="1339236471564" ID="ID_1303147492" MODIFIED="1339236589186" TEXT="fork once per terminal"/>
</node>
</node>
</node>
<node CREATED="1339237584693" ID="ID_1680392759" MODIFIED="1339238886132" TEXT="SVR4 terminal login">
<node CREATED="1339237611065" ID="ID_707663038" MODIFIED="1339237628651" TEXT="a. getty style">
<node CREATED="1339237637941" ID="ID_1437595531" MODIFIED="1339237648205" TEXT="as 4.3+BSD"/>
<node CREATED="1339237676833" ID="ID_803366752" MODIFIED="1339237686927" TEXT="used for console login"/>
</node>
<node CREATED="1339237649137" ID="ID_765773319" MODIFIED="1339238891736" TEXT="b.ttymon">
<node CREATED="1339237707318" ID="ID_1806354860" MODIFIED="1339238892993" TEXT="init">
<icon BUILTIN="full-1"/>
<node CREATED="1339237893256" ID="ID_1587443500" MODIFIED="1339237913340" TEXT="fork exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339237915760" ID="ID_1595757238" MODIFIED="1339237923369" TEXT="sac">
<icon BUILTIN="full-2"/>
<node CREATED="1339237948459" ID="ID_1424347135" MODIFIED="1339237962063" TEXT="fork exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339237927367" ID="ID_1432768729" MODIFIED="1339237966575" TEXT="ttymon">
<icon BUILTIN="full-3"/>
<node CREATED="1339237987335" ID="ID_1434026781" MODIFIED="1339237991964" TEXT="fork">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339237993819" ID="ID_329095441" MODIFIED="1339238003969" TEXT="ttymon">
<icon BUILTIN="full-4"/>
<node CREATED="1339238006638" ID="ID_931320759" MODIFIED="1339238014257" TEXT="exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238029494" ID="ID_711004679" MODIFIED="1339238036844" TEXT="login">
<icon BUILTIN="full-5"/>
</node>
</node>
</node>
</node>
<node CREATED="1339238045731" ID="ID_1050471749" MODIFIED="1339238045731" TEXT="">
<node CREATED="1339238094060" ID="ID_69352504" MODIFIED="1339238115799" TEXT="ttymon means &quot;tty monitor&quot;"/>
</node>
</node>
</node>
<node CREATED="1339238161530" ID="ID_1681996602" MODIFIED="1339238161530" TEXT="">
<node CREATED="1339238163520" ID="ID_997948218" MODIFIED="1339238326932" TEXT="sac abbriviation of &quot;service access controller&quot;"/>
</node>
</node>
</node>
</node>
<node CREATED="1339237696687" ID="ID_1404705443" MODIFIED="1339237703927" TEXT="used for other terminal"/>
</node>
</node>
<node CREATED="1339238340981" ID="ID_582011142" MODIFIED="1339238919977" TEXT="4.3+BSD network login">
<node CREATED="1339238470451" ID="ID_247230739" MODIFIED="1339238478206" TEXT="init">
<icon BUILTIN="full-1"/>
<node CREATED="1339238480060" ID="ID_1762618523" MODIFIED="1339238521616" TEXT="execute script /etc/rc">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238523975" ID="ID_825004783" MODIFIED="1339238546245" TEXT="inetd(internet superserver)">
<icon BUILTIN="full-2"/>
<node CREATED="1339238553198" ID="ID_499483526" MODIFIED="1339238593682" TEXT="spawn">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238553672" ID="ID_1115609341" MODIFIED="1339238607392" TEXT="telnetd">
<icon BUILTIN="full-3"/>
<node CREATED="1339238707093" ID="ID_1674884472" MODIFIED="1339238774532" TEXT="fork a child">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238713691" ID="ID_458202597" MODIFIED="1339238730158" TEXT="telnet">
<icon BUILTIN="full-4"/>
<node CREATED="1339238733949" ID="ID_1400425500" MODIFIED="1339238747110" TEXT="exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238751470" ID="ID_1045340284" MODIFIED="1339238762216" TEXT="login">
<icon BUILTIN="full-5"/>
</node>
</node>
</node>
</node>
<node CREATED="1339238778552" ID="ID_32037183" MODIFIED="1339238778552" TEXT="">
<node CREATED="1339238780457" ID="ID_515049613" MODIFIED="1339238832110" TEXT="open pseudo-terminal device"/>
</node>
</node>
</node>
<node CREATED="1339238612715" FOLDED="true" ID="ID_1528087368" MODIFIED="1339238636422" TEXT="">
<node CREATED="1339238614840" ID="ID_638266688" MODIFIED="1339238633648" TEXT="wait for internet connections"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1339238866067" ID="ID_1668813235" MODIFIED="1339238879454" TEXT="SVR4 teriminal login">
<node CREATED="1339237707318" ID="ID_607313341" MODIFIED="1339238892993" TEXT="init">
<icon BUILTIN="full-1"/>
<node CREATED="1339237893256" ID="ID_1840128256" MODIFIED="1339237913340" TEXT="fork exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339237915760" ID="ID_1920033709" MODIFIED="1339238939856" TEXT="sac">
<icon BUILTIN="full-2"/>
<node CREATED="1339237948459" ID="ID_1781965836" MODIFIED="1339237962063" TEXT="fork exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238523975" ID="ID_1504169030" MODIFIED="1339238546245" TEXT="inetd(internet superserver)">
<icon BUILTIN="full-2"/>
<node CREATED="1339238553198" ID="ID_1015899724" MODIFIED="1339238593682" TEXT="spawn">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238553672" ID="ID_872888257" MODIFIED="1339238607392" TEXT="telnetd">
<icon BUILTIN="full-3"/>
<node CREATED="1339238707093" ID="ID_1580008599" MODIFIED="1339238774532" TEXT="fork a child">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238713691" ID="ID_1233494067" MODIFIED="1339238730158" TEXT="telnet">
<icon BUILTIN="full-4"/>
<node CREATED="1339238733949" ID="ID_621316976" MODIFIED="1339238747110" TEXT="exec">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339238751470" ID="ID_1315922007" MODIFIED="1339238762216" TEXT="login">
<icon BUILTIN="full-5"/>
</node>
</node>
</node>
</node>
<node CREATED="1339238778552" ID="ID_884518839" MODIFIED="1339238778552" TEXT="">
<node CREATED="1339238780457" ID="ID_1201075422" MODIFIED="1339238832110" TEXT="open pseudo-terminal device"/>
</node>
</node>
</node>
<node CREATED="1339238612715" FOLDED="true" ID="ID_849022986" MODIFIED="1339238636422" TEXT="">
<node CREATED="1339238614840" ID="ID_1638160654" MODIFIED="1339238633648" TEXT="wait for internet connections"/>
</node>
</node>
</node>
<node CREATED="1339238161530" FOLDED="true" ID="ID_781546729" MODIFIED="1339238940760" TEXT="">
<node CREATED="1339238163520" ID="ID_1890155764" MODIFIED="1339238326932" TEXT="sac abbriviation of &quot;service access controller&quot;"/>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1339239966032" FOLDED="true" ID="ID_553996094" MODIFIED="1358082445217" TEXT="process group">
<node CREATED="1339241169317" ID="ID_1843846262" MODIFIED="1339241172935" TEXT="#include &lt;unistd.h&gt;"/>
<node CREATED="1339241169319" ID="ID_1633064237" MODIFIED="1339241194715" TEXT="pid_t getpgid(pid_t pid);"/>
<node CREATED="1339241169320" ID="ID_47584369" MODIFIED="1339241194721" TEXT="pid_t getpgrp(void);">
<node CREATED="1339241266334" ID="ID_169837946" MODIFIED="1339241300309" TEXT="equals getpgrp(0)"/>
</node>
<node CREATED="1339241169318" ID="ID_1290719909" MODIFIED="1339241169318" TEXT="int setpgid(pid_t pid, pid_t pgid);">
<node CREATED="1339241368282" ID="ID_1833590005" MODIFIED="1339241407434">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      A process can set the process group ID of only itself or one of its children.
    </p>
    <p>
      Furthermore, it can't change the process group ID of one of its children
    </p>
    <p>
      after that child has&#160; called one of the exec functions.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1339241582864" ID="ID_674082371" MODIFIED="1339241731078">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      In most job-control shells this function is called after a fork fo have the parent
    </p>
    <p>
      set the process group ID of the child, and to have the child set its own process
    </p>
    <p>
      group ID. One of these calls is redundant, but by doing both we are
    </p>
    <p>
      guaranteed that the child is placed into its own process group before either process assumes that is has happened. If we didn't do this we have a race condition, since it depends on which process executes first.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1339241169319" ID="ID_1449027070" MODIFIED="1339241183600" TEXT="int setpgrp(void);">
<node CREATED="1339241302715" ID="ID_845276255" MODIFIED="1339241314199" TEXT="equals setpgrp(0,0)"/>
</node>
<node CREATED="1339241424763" ID="ID_1335584442" MODIFIED="1339241424763" TEXT="Returns: 0 if OK, -1 on error"/>
</node>
<node CREATED="1339241755829" FOLDED="true" ID="ID_1488236355" MODIFIED="1339249236921" TEXT="session">
<node CREATED="1339241774282" ID="ID_1117767571" MODIFIED="1339241774282" TEXT="A session is a collection of one or more process groups."/>
<node CREATED="1339242016353" ID="ID_1626187875" MODIFIED="1339242016353" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1339242016354" ID="ID_819624185" MODIFIED="1339242016354" TEXT="#include &lt;unistd.h&gt;"/>
<node CREATED="1339242016355" ID="ID_689608726" MODIFIED="1339242016355" TEXT="pid_t setsid(void);">
<node CREATED="1339242022485" ID="ID_1158045806" MODIFIED="1339242103012" TEXT="if caller is not group leader,creats a new session,three things happens">
<node CREATED="1339242053496" ID="ID_558911574" MODIFIED="1339242128428" TEXT="becomes session leader"/>
<node CREATED="1339242105555" ID="ID_678825035" MODIFIED="1339242143119" TEXT="becomes group leader"/>
<node CREATED="1339242105953" ID="ID_835324055" MODIFIED="1339242164291" TEXT="has no controling terminal"/>
</node>
<node CREATED="1339242169192" ID="ID_404406610" MODIFIED="1339242194959" TEXT="if caller is group leader,return -1 on error"/>
</node>
<node CREATED="1339242016355" ID="ID_1271334606" MODIFIED="1339242016355" TEXT="Returns: process group ID if OK, -1 on error"/>
</node>
<node CREATED="1339249238169" ID="ID_588087892" MODIFIED="1339249964049" TEXT="controlling terminal">
<node CREATED="1339249336709" ID="ID_1902018468" MODIFIED="1339249336709" TEXT="A session can have a single controlling terminal."/>
<node CREATED="1339249402671" ID="ID_1690186675" MODIFIED="1339260390849" TEXT="controlling process">
<node CREATED="1339249424064" ID="ID_720787298" MODIFIED="1339260414046" TEXT="The session leader that establishes the connection to the controlling terminal"/>
</node>
<node CREATED="1339249483089" ID="ID_1835512497" MODIFIED="1339249528102" TEXT="a session contains a single fg process grp,one or more bg grps"/>
<node CREATED="1339249656468" ID="ID_727878799" MODIFIED="1339249711027" TEXT="interrupt and quit signals is sent to processes in fg grp"/>
<node CREATED="1339249711496" ID="ID_1641616577" MODIFIED="1339249743989" TEXT="hang-up signal is sent to session leader"/>
</node>
<node CREATED="1339249906475" FOLDED="true" ID="ID_1806623540" MODIFIED="1339250091599" TEXT="get&amp;set terminal fg process grp">
<node CREATED="1339249961434" ID="ID_165396687" MODIFIED="1339249961434" TEXT="#include &lt;unistd.h&gt;"/>
<node CREATED="1339249961435" ID="ID_1198264515" MODIFIED="1339249961435" TEXT="pid_t tcgetpgrp(int fd);">
<node CREATED="1339250049005" ID="ID_218591534" MODIFIED="1339250049005" TEXT="Returns: process group ID of foreground process group if OK, -1 on error"/>
</node>
<node CREATED="1339249961436" ID="ID_1476405235" MODIFIED="1339249961436" TEXT="int tcsetpgrp(int fd, pid_t pgrp);">
<node CREATED="1339250059646" ID="ID_571234534" MODIFIED="1339250059646" TEXT="Returns: 0 if OK, -I on error"/>
</node>
</node>
<node CREATED="1339250092468" ID="ID_1249745950" MODIFIED="1339250096033" TEXT="job control">
<node CREATED="1339251910056" ID="ID_1371996318" MODIFIED="1339251976244" TEXT="manipulate fg process grp">
<node CREATED="1339251977537" ID="ID_528707858" MODIFIED="1339251985922" TEXT="^C">
<node CREATED="1339252001257" ID="ID_903526749" MODIFIED="1339252012840" TEXT="SIGINT"/>
</node>
<node CREATED="1339251978585" ID="ID_1251929907" MODIFIED="1339251990784" TEXT="^\">
<node CREATED="1339252014325" ID="ID_1756560058" MODIFIED="1339252023258" TEXT="SIGQUIT"/>
</node>
<node CREATED="1339251991313" ID="ID_220160049" MODIFIED="1339251993965" TEXT="^Z">
<node CREATED="1339252024750" ID="ID_1550256135" MODIFIED="1339252085856" TEXT="SIGTSTP"/>
</node>
</node>
<node CREATED="1339252284474" ID="ID_68028379" MODIFIED="1339252296896" TEXT="manipulate bg process grps">
<node CREATED="1339252869917" ID="ID_1884275273" MODIFIED="1358664758246" TEXT="SIGTTIN">
<node CREATED="1339252298498" ID="ID_1269192000" MODIFIED="1339253046338" TEXT="bg process read from terminal">
<node CREATED="1339252358038" ID="ID_1492927675" MODIFIED="1339252431452" TEXT="terminal driver generates SIGTTIN to bg process">
<node CREATED="1339252436071" ID="ID_1934343669" MODIFIED="1339252468240" TEXT="bg process stops  on receiving SIGTTIN"/>
</node>
</node>
</node>
<node CREATED="1339252892515" ID="ID_1413609530" MODIFIED="1358664784928" TEXT="SIGCON">
<node CREATED="1339252927686" ID="ID_1905622340" MODIFIED="1339253037942" TEXT="shell&apos;s command fg places bg job into fg grp (tcsetpgrp) and send SIGCON"/>
</node>
<node CREATED="1339253110170" ID="ID_1857737597" MODIFIED="1358664787653" TEXT="SIGTTOU">
<node CREATED="1339253118568" ID="ID_591792013" MODIFIED="1339253141479" TEXT="can allow or disallow">
<node CREATED="1339253144004" ID="ID_1445122382" MODIFIED="1339253148031" TEXT="disallow">
<node CREATED="1339253150631" ID="ID_758531808" MODIFIED="1339253158249" TEXT="stty tostop"/>
</node>
<node CREATED="1339253159940" ID="ID_1904773948" MODIFIED="1339253162904" TEXT="allow">
<node CREATED="1339253164147" ID="ID_1716960538" MODIFIED="1339253409495" TEXT="stty -tostop"/>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1339310541091" FOLDED="true" ID="ID_1385180175" MODIFIED="1366129742814" POSITION="right" TEXT="signal">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339311014169" ID="ID_1345831434" MODIFIED="1339311026760" TEXT="signal concept">
<node CREATED="1339311028388" ID="ID_1342774908" MODIFIED="1339311065627" TEXT="signal name">
<node CREATED="1339311066756" ID="ID_911133771" MODIFIED="1339311070331" TEXT="SIGXXX"/>
</node>
<node CREATED="1339311071429" ID="ID_1226017385" MODIFIED="1339311217790" TEXT="signal number">
<node CREATED="1339311078550" ID="ID_966370149" MODIFIED="1339311100127" TEXT="positive integer"/>
</node>
<node CREATED="1339311111287" ID="ID_1886979932" MODIFIED="1363224085037" TEXT="asynchronous event">
<icon BUILTIN="help"/>
<node CREATED="1339311271553" ID="ID_74233814" MODIFIED="1339311371099" TEXT="divide-by-0 is sync event"/>
<node CREATED="1339311277474" ID="ID_1642844308" MODIFIED="1339311396402" TEXT="invalid memory reference is sync event"/>
</node>
<node CREATED="1339311141917" ID="ID_906886579" MODIFIED="1339311152902" TEXT="software interrupt"/>
</node>
<node CREATED="1339313901986" ID="ID_1814741594" MODIFIED="1339314084571" TEXT="generated by">
<node CREATED="1339313948607" ID="ID_1000041653" MODIFIED="1339427741309" TEXT="terminal-generated"/>
<node CREATED="1339313987724" ID="ID_1342526047" MODIFIED="1339313998334" TEXT="hardware exception"/>
<node CREATED="1339314031903" ID="ID_400575991" MODIFIED="1339427724335" TEXT="software condition"/>
<node CREATED="1339313998667" ID="ID_1579616075" MODIFIED="1339314076217" TEXT="kill function &amp; command"/>
</node>
<node CREATED="1339314582156" ID="ID_563473174" MODIFIED="1339314588835" TEXT="handle signal">
<node CREATED="1339314590900" ID="ID_1838530542" MODIFIED="1366129723553" TEXT="ignore">
<node CREATED="1339314618052" ID="ID_867197543" MODIFIED="1339316340962" TEXT="SIGSTOP and SIGKILL can never be ignored"/>
<node CREATED="1339314717385" ID="ID_1736488142" MODIFIED="1339314831205" TEXT="signals generated by hardware exception are not supposed to be ignored "/>
</node>
<node CREATED="1339314598053" ID="ID_725420471" MODIFIED="1339314893543" TEXT="user-defined signal handlers">
<node CREATED="1339314870850" ID="ID_968234939" MODIFIED="1339314910828" TEXT="handlers are executed in user mode "/>
</node>
<node CREATED="1339314610853" ID="ID_997036024" MODIFIED="1339314615519" TEXT="default"/>
</node>
<node CREATED="1339316700815" ID="ID_1261269996" MODIFIED="1366129729638" TEXT="all signals ($ kill -l)">
<node CREATED="1339316959760" ID="ID_1250542368" MODIFIED="1339316959760" TEXT="">
<node CREATED="1339316962981" ID="ID_1273987765" MODIFIED="1339316969317" TEXT="SIGABRT">
<node CREATED="1339317630078" ID="ID_1762926422" MODIFIED="1339317821789" TEXT="abnormally terminate and dump core  (compared with exit)"/>
</node>
<node CREATED="1339317016903" ID="ID_1020169475" MODIFIED="1339317019650" TEXT="SIGBUS"/>
<node CREATED="1339317110893" ID="ID_1123918361" MODIFIED="1339317112704" TEXT="SIGEMT"/>
<node CREATED="1339317124707" ID="ID_805422313" MODIFIED="1339317127439" TEXT="SIGFPE">
<node CREATED="1339317836428" ID="ID_256237504" MODIFIED="1339318103299" TEXT="divide-by-zero,float point overflow"/>
</node>
<node CREATED="1339317158527" ID="ID_1032768274" MODIFIED="1339317160542" TEXT="SIGILL"/>
<node CREATED="1339317264725" ID="ID_618942147" MODIFIED="1339317266630" TEXT="SIGIOT"/>
<node CREATED="1339317328482" ID="ID_226509221" MODIFIED="1339317331978" TEXT="SIGPWR">
<node CREATED="1339318419060" ID="ID_1551768797" MODIFIED="1339318498726" TEXT="if power falls,UPS(uninterruptible power supply) takes over"/>
</node>
<node CREATED="1339317347186" ID="ID_1204162867" MODIFIED="1339317351510" TEXT="SIGSEGV">
<node CREATED="1339318563842" ID="ID_1476799541" MODIFIED="1339318583725" TEXT="wild pointer(invalid memory reference)"/>
</node>
<node CREATED="1339317383535" ID="ID_644405435" MODIFIED="1339317386079" TEXT="SIGSYS">
<node CREATED="1339318654340" ID="ID_136677909" MODIFIED="1339318658832" TEXT="invalid system call"/>
</node>
<node CREATED="1339317415491" ID="ID_1329118726" MODIFIED="1339317417833" TEXT="SIGTRAP"/>
<node CREATED="1339317500511" ID="ID_1287520771" MODIFIED="1339317504959" TEXT="SIGXCPU"/>
<node CREATED="1339317505215" ID="ID_1466937732" MODIFIED="1339317514999" TEXT="SIGXFSZ"/>
</node>
<node CREATED="1339316981725" ID="ID_633835471" MODIFIED="1339316981725" TEXT="">
<node CREATED="1339316983542" ID="ID_1135932442" MODIFIED="1339316997584" TEXT="SIGALRM">
<node CREATED="1339317874624" ID="ID_563274367" MODIFIED="1339317897574" TEXT="timer set by alarm expires"/>
</node>
<node CREATED="1339317251176" ID="ID_1706040579" MODIFIED="1339317253674" TEXT="SIGIO">
<node CREATED="1339318272105" ID="ID_1235617496" MODIFIED="1339318287645" TEXT="async IO event"/>
</node>
<node CREATED="1339317276417" ID="ID_540540928" MODIFIED="1339317279477" TEXT="SIGPIPE"/>
<node CREATED="1339317289014" ID="ID_1706419786" MODIFIED="1339317291886" TEXT="SIGPOLL"/>
<node CREATED="1339317315994" ID="ID_796852359" MODIFIED="1339317317931" TEXT="SIGPROF">
<node CREATED="1339318318461" ID="ID_811509243" MODIFIED="1339318330662" TEXT="setitimer(2)"/>
</node>
<node CREATED="1339317454803" ID="ID_65462443" MODIFIED="1339317457582" TEXT="SIGURG">
<node CREATED="1339318734522" ID="ID_1585840266" MODIFIED="1339318764671" TEXT="out-of-band data receive on TCP connection"/>
</node>
<node CREATED="1339317468991" ID="ID_433887982" MODIFIED="1339317475577" TEXT="SIGVTALRM">
<node CREATED="1339318785158" ID="ID_1839546321" MODIFIED="1339318789824" TEXT="setitimer(2)"/>
</node>
</node>
<node CREATED="1339317032729" ID="ID_918951337" MODIFIED="1339317032729" TEXT="">
<node CREATED="1339317034780" ID="ID_1487714844" MODIFIED="1339317037668" TEXT="SIGCHLD">
<node CREATED="1339317982584" ID="ID_1152493517" MODIFIED="1339317997188" TEXT="child process terminates  or stops "/>
</node>
<node CREATED="1339317046753" ID="ID_363692661" MODIFIED="1339317050577" TEXT="SIGCON"/>
<node CREATED="1339317136212" ID="ID_1014570361" MODIFIED="1339317148725" TEXT="SIGHUP">
<node CREATED="1339318131416" ID="ID_677507004" MODIFIED="1339318206728" TEXT="controlling terminal disconnects"/>
<node CREATED="1339318132298" ID="ID_1246258007" MODIFIED="1339318227335" TEXT="notify daemon process to reread configure file"/>
</node>
<node CREATED="1339317362264" ID="ID_1915977424" MODIFIED="1339317364559" TEXT="SIGSTOP">
<node CREATED="1339318625120" ID="ID_1179161456" MODIFIED="1339318638636" TEXT="can&apos;t be caught or ignored"/>
</node>
<node CREATED="1339317426481" ID="ID_75224502" MODIFIED="1339317429557" TEXT="SIGTSTP"/>
<node CREATED="1339317438439" ID="ID_732528334" MODIFIED="1339317440360" TEXT="SIGTTIN"/>
<node CREATED="1339317441130" ID="ID_1500452510" MODIFIED="1339317446061" TEXT="SIGTTOU"/>
</node>
<node CREATED="1339317196397" ID="ID_34591308" MODIFIED="1339317196397" TEXT="">
<node CREATED="1339317199368" ID="ID_1118783083" MODIFIED="1339317204175" TEXT="SIGINFO">
<node CREATED="1339318252987" ID="ID_1755790967" MODIFIED="1339318255298" TEXT="^T"/>
</node>
<node CREATED="1339317227019" ID="ID_1116394074" MODIFIED="1339317228722" TEXT="SIGINT"/>
<node CREATED="1339317338833" ID="ID_750000800" MODIFIED="1339317341299" TEXT="SIGQUIT">
<node CREATED="1339318525048" ID="ID_1229092306" MODIFIED="1339318539180" TEXT="dump core">
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
</node>
<node CREATED="1339317400780" ID="ID_1959737822" MODIFIED="1339317400780" TEXT="">
<node CREATED="1339317402879" ID="ID_756468293" MODIFIED="1339317406328" TEXT="SIGTERM">
<node CREATED="1339318672869" ID="ID_1402092022" MODIFIED="1339318683228" TEXT="sent by kill defaultly"/>
</node>
<node CREATED="1339317532477" ID="ID_1015298124" MODIFIED="1339317537596" TEXT="SIGWINCH"/>
<node CREATED="1339317548382" ID="ID_1513980819" MODIFIED="1339317564482" TEXT="SIGUSR1"/>
<node CREATED="1339317564738" ID="ID_876974558" MODIFIED="1339317568265" TEXT="SIGUSR2"/>
</node>
</node>
<node CREATED="1339421856588" ID="ID_189724434" MODIFIED="1366129728109" TEXT="signal and system call">
<node CREATED="1339421950366" ID="ID_113807667" MODIFIED="1339422002647" TEXT="uninterruptible system call">
<node CREATED="1339422026114" ID="ID_1585665057" MODIFIED="1339422045884" TEXT="atomic operation/primitive"/>
</node>
<node CREATED="1339421990488" FOLDED="true" ID="ID_118537351" MODIFIED="1363224182767" TEXT="interruptible system call">
<node CREATED="1339422059276" ID="ID_1283937267" MODIFIED="1339422480665" TEXT="non-restarted ">
<node CREATED="1339422461696" ID="ID_1353342940" MODIFIED="1339422477558" TEXT="return error and set errno to EINTR"/>
</node>
<node CREATED="1339422306933" ID="ID_398467915" MODIFIED="1363224144477" TEXT="automatically restarted">
<node CREATED="1339422888534" ID="ID_297055796" MODIFIED="1339422985426" TEXT="errno can be overwritten">
<node CREATED="1339422988715" ID="ID_942951485" MODIFIED="1339423014706" TEXT="so store and restore errno in signal handler"/>
</node>
<node CREATED="1339422891142" FOLDED="true" ID="ID_1169813215" MODIFIED="1339423241837" TEXT="calling non-reentrant function from signal handler causes unpredictable result">
<node CREATED="1339423168958" ID="ID_699210468" MODIFIED="1339423225428" TEXT="so write signal handler cautiously"/>
</node>
</node>
</node>
</node>
<node CREATED="1339418540586" ID="ID_303802728" MODIFIED="1366129732631" TEXT="manipulate signal">
<node CREATED="1339512363209" ID="ID_1186971720" MODIFIED="1363412791584" TEXT="send signal">
<node CREATED="1339511296268" ID="ID_908651015" MODIFIED="1339511305273" TEXT="int kill(&#x7f;pid_t pid, int signo);">
<node CREATED="1339511334380" ID="ID_517841994" MODIFIED="1363223802795" TEXT="pid">
<node CREATED="1339511337901" ID="ID_1737066738" MODIFIED="1339511966582" TEXT="&gt;0  (unicast)">
<node CREATED="1339511350007" ID="ID_1390270522" MODIFIED="1339511412940" TEXT="sent to process whose PID equals pid"/>
</node>
<node CREATED="1339511418781" ID="ID_1038045770" MODIFIED="1363223834545" TEXT="==0  (local groupcast)">
<node CREATED="1339511488579" ID="ID_1021181962" MODIFIED="1339511819307" TEXT="sent to all processes whose GPID equals sender&apos;s ,excluding an implementation-defined set of system processes"/>
</node>
<node CREATED="1339511545329" ID="ID_870226609" MODIFIED="1339511952538" TEXT="==-1 (broadcast)">
<node CREATED="1339512121904" ID="ID_1615689516" MODIFIED="1339512220087">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      SVR4 and 4.3+BSD use this for what they call broadcast signais. These broadcast signals are never sent to the set of system processes described previously.4.3+BSD also never sends a broadcast signal to the process sending the signal. If the caller is the superuser, the signal is sent to ail processes. If the caller is not the superuser, the signal is sent to ail processes whose real user ID or saved set-user-ID equals the real user ID or effective user ID of the caller. These broadcast signais should be
    </p>
    <p>
      used only for administrative purposes (such as a superuser process that is about to shut down the system).
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1339511645899" ID="ID_670572792" MODIFIED="1339512250900" TEXT="&lt;-1 (groupcast)">
<node CREATED="1339512255803" ID="ID_1688038853" MODIFIED="1339512324879">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The signal is sent to ail processes whose process group ID equals the
    </p>
    <p>
      absolute value of pid and for which the sender has permission to send the
    </p>
    <p>
      signal. Again, the set of &quot;all processes&quot; excludes certain system processes, as
    </p>
    <p>
      described earlier.
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1339511296265" ID="ID_887976252" MODIFIED="1339511296265" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1339511296267" ID="ID_1549656450" MODIFIED="1339511296267" TEXT="#include &lt;signal.h&gt;"/>
</node>
<node CREATED="1339511296268" ID="ID_430797523" MODIFIED="1355711734333" TEXT="int raise (int signo) ;">
<node CREATED="1339512330492" ID="ID_79123994" MODIFIED="1339512353757" TEXT="send signal to self"/>
<node CREATED="1339511296265" ID="ID_692345810" MODIFIED="1339511296265" TEXT="#include &lt;sys/types.h&gt;"/>
<node CREATED="1339511296267" ID="ID_1396032994" MODIFIED="1339511296267" TEXT="#include &lt;signal.h&gt;"/>
</node>
<node CREATED="1339512513033" FOLDED="true" ID="ID_915329557" MODIFIED="1363412868604" TEXT="unsigned int alarm(unsigned int seconds);">
<node CREATED="1339512513033" ID="ID_433407181" MODIFIED="1339512519396" TEXT="#include &lt;unistd. h&gt;"/>
<node CREATED="1339512575324" ID="ID_558717524" MODIFIED="1339512604309">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The alarm function allows us to set a timer that will expire at a specified time
    </p>
    <p>
      in the future. When the timer expires, the SIGALRM signal is generated. If we
    </p>
    <p>
      ignore or don't catch this signal, its default action is to terminate the process.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1339512722594" ID="ID_1991352409" MODIFIED="1339512763725">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      There is only one of these alarm clocks per process. If, when we call alarm, there is a previously registered alarm dock for the process that has not yet expired, the number of seconds left for that alarm dock is returned as the value of this function. That previously registered alarm dock is replaced by the new value.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1339512887388" ID="ID_203512037" MODIFIED="1339512900148">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If there is a previously registered alarm dock for the process that has not yet
    </p>
    <p>
      expired and if the seconds value is 0, the previous alarm dock is cancelled. The number of seconds left for that previous alarm dock is still returned as the value of the function.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1339512513034" ID="ID_1480813764" MODIFIED="1339512513034" TEXT="Returns: 0 or number of seconds until previously set alarm"/>
</node>
<node CREATED="1339513121817" FOLDED="true" ID="ID_1395280730" MODIFIED="1363412871214" TEXT="int pause(void);">
<node CREATED="1339513121816" ID="ID_1851929844" MODIFIED="1339513128614" TEXT="#include &lt;unistd.h&gt;"/>
<node CREATED="1339513172409" ID="ID_470473852" MODIFIED="1339513175261" TEXT="The pause function suspends the calling process until a signal is caught."/>
<node CREATED="1339513187945" ID="ID_442016560" MODIFIED="1339513195836">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      The only time pause returns is if a signal handler is executed and that handler returns. In that case, pause returns -1 with errno set to EINTR.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1339513121818" ID="ID_69731884" MODIFIED="1339513121818" TEXT="Returns: -1 with errno set to EINTR"/>
</node>
</node>
<node CREATED="1339679944156" FOLDED="true" ID="ID_1617527858" MODIFIED="1363227616506" TEXT="mask signal">
<node CREATED="1339682799080" ID="ID_1637014054" MODIFIED="1363226830303" TEXT="manipulate sigset_t">
<node CREATED="1339682841172" ID="ID_1512659845" MODIFIED="1339682841172" TEXT="#include &lt;signal. h&gt;"/>
<node CREATED="1339682841172" FOLDED="true" ID="ID_402042061" MODIFIED="1363224947326" TEXT="int sigemptyset (sigset_t *set) :">
<icon BUILTIN="button_ok"/>
<node CREATED="1363224880708" ID="ID_1408621242" MODIFIED="1363224882200" TEXT="initializes the signal set pointed to by set so that all signals  are excluded. "/>
</node>
<node CREATED="1339682841173" FOLDED="true" ID="ID_216473376" MODIFIED="1363224946576" TEXT="int sigfillset (sigset_t *set) ;">
<icon BUILTIN="button_ok"/>
<node CREATED="1363224899286" ID="ID_1663501476" MODIFIED="1363224900558" TEXT="initializes the signal set so that all signais are  included. "/>
</node>
<node CREATED="1339682841174" FOLDED="true" ID="ID_1117112296" MODIFIED="1363224945876" TEXT="int sigaddset (sigset_t *set, int signo) ;">
<icon BUILTIN="button_ok"/>
<node CREATED="1363224929136" ID="ID_1011266420" MODIFIED="1363224930438" TEXT="add"/>
</node>
<node CREATED="1339682841175" FOLDED="true" ID="ID_1045210422" MODIFIED="1363224945156" TEXT="int sigdelset (sigset_t *set, int signo) ;">
<icon BUILTIN="button_ok"/>
<node CREATED="1363224933146" ID="ID_824437482" MODIFIED="1363224939996" TEXT="delete"/>
</node>
<node CREATED="1339682859309" ID="ID_619443298" MODIFIED="1363224942676" TEXT="All four return: 0 if OK, -1 on error "/>
<node CREATED="1339682841176" ID="ID_1686609122" MODIFIED="1339682885296" TEXT="int sigismember(const sigset_t *set,int signo) ; ">
<icon BUILTIN="button_ok"/>
<node CREATED="1363224959134" ID="ID_1951682192" MODIFIED="1363224965036" TEXT="in"/>
<node CREATED="1339682841178" ID="ID_17181270" MODIFIED="1339682841178" TEXT="Returns: 1 if true, 0 if false"/>
</node>
</node>
<node CREATED="1363226820411" FOLDED="true" ID="ID_1875943844" MODIFIED="1363227250944" TEXT="unblock &amp; block signals">
<node CREATED="1339682943811" FOLDED="true" ID="ID_1520795721" MODIFIED="1363227241669" TEXT="sigprocmask">
<node CREATED="1339682964258" ID="ID_26647644" MODIFIED="1339682964258" TEXT="#include &lt;signal.h&gt;"/>
<node CREATED="1339682964259" ID="ID_1850819709" MODIFIED="1339683010097" TEXT="int sigprocmask(int how,const sigset_t *set, sigset_t *oset); ">
<node CREATED="1339683035360" ID="ID_922192156" MODIFIED="1339683040050" TEXT="how">
<node CREATED="1339683042231" ID="ID_307595545" MODIFIED="1339683067972" TEXT="SIG_BLOCK">
<node CREATED="1339683222645" ID="ID_113936284" MODIFIED="1339683289968" TEXT="| (or)"/>
</node>
<node CREATED="1339683202307" ID="ID_1483661872" MODIFIED="1339683208258" TEXT="SIG_UNBLOCK">
<node CREATED="1339683273765" ID="ID_1498099399" MODIFIED="1339683310876" TEXT="&amp;~"/>
</node>
<node CREATED="1339683213707" ID="ID_493493541" MODIFIED="1339683217020" TEXT="SIG_SETMASK">
<node CREATED="1339683327889" ID="ID_593214904" MODIFIED="1339683329138" TEXT="="/>
</node>
</node>
<node CREATED="1363225174065" ID="ID_1081670571" MODIFIED="1363225178907" TEXT="oset">
<node CREATED="1363225179855" ID="ID_389655278" MODIFIED="1363225181057" TEXT="if oset is a nonnull pointer, the current signal mask for the process is returned  through oset.  "/>
</node>
<node CREATED="1363225237266" ID="ID_818674739" MODIFIED="1363225239558" TEXT="set">
<node CREATED="1363225240596" ID="ID_19974592" MODIFIED="1363225241658" TEXT="if set is a nonnull pointer, then the how argument indicates how the current  signal mask is modified. "/>
<node CREATED="1363225256896" ID="ID_767044739" MODIFIED="1363225257888" TEXT="If set is a null pointer, the signal mask of the process is not changed, and the value of  how is not significant.  "/>
<node CREATED="1363225329806" ID="ID_168661165" MODIFIED="1363225330918" TEXT="If there are any pending, unblocked signals after the call to sigprocmask, at least  one of these signals is delivered to the process before s igprocmask returns.  "/>
</node>
</node>
<node CREATED="1339682964261" ID="ID_164619125" MODIFIED="1339683032944" TEXT="Returns:0 if OK,-1 on error"/>
</node>
</node>
</node>
<node CREATED="1339683354714" FOLDED="true" ID="ID_1831061575" MODIFIED="1363227615446" TEXT="check if the signal is pending and unblock the signal">
<node CREATED="1363226726703" FOLDED="true" ID="ID_1126625448" MODIFIED="1363227612232">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      #include &lt;signal.h&gt;
    </p>
    <p>
      int sigpending(sigset_t *set) ;
    </p>
    <p>
      Returns: 0 if OK, -1 on error
    </p>
  </body>
</html></richcontent>
<node CREATED="1363226761601" ID="ID_609744344" MODIFIED="1363226762893" TEXT="sigpending returns the set of signals that are blocked from delivery and currently  pending for the calling process. "/>
<node CREATED="1363227297726" ID="ID_147734007" MODIFIED="1363227343974" TEXT="pending">
<node CREATED="1363227301821" ID="ID_1915845659" MODIFIED="1363227341681" TEXT="Any occurrence of the SIGXXX signal during this period is blocked and  won&apos;t be delivered until the signal is unblocked. "/>
<node CREATED="1363227430708" ID="ID_989557207" MODIFIED="1363227432254" TEXT="If we generate the quit signal during this sleep period, the signal is now pending  and unblocked, soit is delivered before sigprocmask returns. "/>
</node>
</node>
</node>
<node CREATED="1339679949543" FOLDED="true" ID="ID_6260115" MODIFIED="1363228932966" TEXT="handle signal">
<node CREATED="1339679958734" ID="ID_866062993" MODIFIED="1339679999796" TEXT="signal(deprecated)">
<node CREATED="1339418550927" ID="ID_1973720297" MODIFIED="1339680005985" TEXT="&lt;signal.h&gt;void (*signal (int signo, void (*func) (int)) ) (int) ;  (unreliable)">
<node CREATED="1339418654162" ID="ID_259810709" MODIFIED="1339420208190" TEXT="func">
<font ITALIC="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1339418741977" ID="ID_300910199" MODIFIED="1339418747039" TEXT="SIG_ERR">
<node CREATED="1339418754784" ID="ID_1599079821" MODIFIED="1339418791598" TEXT="(void(*)())-1">
<node CREATED="1363224668004" ID="ID_1448256510" MODIFIED="1363224698626" TEXT="return value on failure"/>
</node>
</node>
<node CREATED="1339418673196" ID="ID_1216051767" MODIFIED="1339418740092" TEXT="SIG_DFL">
<node CREATED="1339418754784" ID="ID_1386123438" MODIFIED="1339418783982" TEXT="(void(*)())0"/>
</node>
<node CREATED="1339418663054" ID="ID_1379488155" MODIFIED="1339418672935" TEXT="SIG_IGN">
<node CREATED="1339418754784" ID="ID_843310012" MODIFIED="1339418795495" TEXT="(void(*)())1">
<node CREATED="1363224586453" ID="ID_129038203" MODIFIED="1363224608854" TEXT="SIGKILL &amp; SIGSTOP never be ignored!"/>
</node>
</node>
</node>
<node CREATED="1339420212071" ID="ID_1029290971" MODIFIED="1339680008643" TEXT="shortcomings">
<node CREATED="1339420234439" ID="ID_1672853593" MODIFIED="1339420305619" TEXT="can determine disposition of signal unless changing disposition"/>
<node CREATED="1339420307615" ID="ID_1324361949" MODIFIED="1339420522042" TEXT="reset to default each time signal accurs,catching signal and set signal handler again is non-atomic operation"/>
<node CREATED="1339420547005" ID="ID_1311024839" MODIFIED="1339420581627" TEXT="only can ignore signal but can&apos;t prevent signal from accuring"/>
</node>
</node>
</node>
<node CREATED="1339680028868" ID="ID_1125549547" MODIFIED="1355711902302" TEXT="sigaction">
<node CREATED="1339680063795" ID="ID_1942764604" MODIFIED="1339680343688" TEXT="#include&lt;signal.h&gt; "/>
<node CREATED="1339680256315" ID="ID_1463517085" MODIFIED="1339680360406" TEXT="int sigaction(int signum, const struct sigaction *act, struct sigaction*oldact);">
<node CREATED="1339681953440" ID="ID_1906929000" MODIFIED="1339681982285" TEXT="can set and get signal handler"/>
<node CREATED="1339680378743" ID="ID_1036111758" MODIFIED="1339680442994" TEXT="Returns: 0 if OK, -1 on error  "/>
</node>
<node CREATED="1339680264938" ID="ID_1799595632" MODIFIED="1339680374900" TEXT="arguments">
<node CREATED="1339680569688" ID="ID_840481322" MODIFIED="1363227646224" TEXT="struct sigaction">
<node CREATED="1339680581872" ID="ID_1738517817" MODIFIED="1363227693664">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct sigaction {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;void (*sa_handler) (); /* addr of signal handler, or SIG_IGN, or SIG_DFL */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;sigset_t sa_mask; /* additional signals to block */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;int sa_flags; /* signal options, Figure 10.5 */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
<node CREATED="1339680808604" ID="ID_79833569" MODIFIED="1339681111678" TEXT="sa_flags">
<node CREATED="1339680931701" ID="ID_703032615" MODIFIED="1339681032791" TEXT="SA_NOCLDSTOP">
<node CREATED="1363228657112" ID="ID_1784894917" MODIFIED="1363228660577" TEXT="SIGCHLD">
<node CREATED="1363227762536" ID="ID_1614285169" MODIFIED="1363228661833" TEXT="If signo is SIGCHLD, do not generate this signal when a  child process stops (job control). This signal is still  generated, of course, when a child terminates "/>
</node>
</node>
<node CREATED="1339680931704" ID="ID_1295451330" MODIFIED="1339681344620" TEXT="SA_NOCLDWAIT">
<icon BUILTIN="button_ok"/>
<node CREATED="1363228648539" ID="ID_1712293438" MODIFIED="1363228653565" TEXT="SIGCHILD">
<node CREATED="1363228642845" ID="ID_677880863" MODIFIED="1363228654852" TEXT="If signo is SIGCHLD, this option causes the system hot fo  create zombie processes when children of the calling  process terminate. If the calling process subsequenfly calls  wait, it blocks until all its child processes bave terminated  and then returns -1 with errno set to ECHILD. "/>
</node>
</node>
<node CREATED="1339680931706" ID="ID_681392429" MODIFIED="1339681807955" TEXT="SA_RESETHAND">
<icon BUILTIN="button_ok"/>
<node CREATED="1339681810319" ID="ID_623745628" MODIFIED="1339681841849" TEXT="resets signal handler to SIG_DFL"/>
<node CREATED="1339681854704" ID="ID_1529714941" MODIFIED="1339681916065" TEXT="default,signal handler keep unchanged until next call sigaction explicitly change handler">
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
<node CREATED="1339680931709" ID="ID_1489189762" MODIFIED="1339680931709" TEXT="SA_ONSTACK">
<node CREATED="1363228719847" ID="ID_230415043" MODIFIED="1363228726682" TEXT="sigaltstack">
<node CREATED="1363227809648" ID="ID_577938104" MODIFIED="1363228743405" TEXT="If an alternate stack has been dedared with  sigaltstack(2), this signal is delivered to the process on  the alternate stack.  "/>
</node>
</node>
<node CREATED="1339680931712" ID="ID_460689494" MODIFIED="1339681209162" TEXT="SA_RESTART">
<icon BUILTIN="button_ok"/>
<node CREATED="1339681151633" ID="ID_420422895" MODIFIED="1339681193262" TEXT="interrupted system call is automatically restarted"/>
</node>
<node CREATED="1339680931714" ID="ID_385590391" MODIFIED="1339681542180" TEXT="SA_NODEFER">
<icon BUILTIN="button_ok"/>
<node CREATED="1339681544776" ID="ID_477517293" MODIFIED="1339681669337" TEXT="When this signal is caught, the signal is not automatically  blocked by the system while the signal-catching function  executes. "/>
<node CREATED="1339681733513" ID="ID_1646499008" MODIFIED="1339681802059" TEXT="the same signal is blocked when the signal is caught">
<icon BUILTIN="messagebox_warning"/>
</node>
</node>
<node CREATED="1339680931716" ID="ID_1056990469" MODIFIED="1339680931716" TEXT="SA_SIGINFO">
<node CREATED="1363227898311" ID="ID_88061912" MODIFIED="1363227899546" TEXT="This option provides additional information fo a signal  handler. Refer to Section 10.21 for additional details.  "/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1339682001020" ID="ID_267243273" MODIFIED="1339682661605" TEXT="sigaction  vs. signal">
<node CREATED="1339682037767" ID="ID_176640031" MODIFIED="1339682098676" TEXT="sigaction can get signal handler  without set handler">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1339682099940" ID="ID_585983089" MODIFIED="1339682539456" TEXT="signal handler keep unchanged until calling sigaction explicit change handler">
<icon BUILTIN="full-2"/>
<icon BUILTIN="messagebox_warning"/>
</node>
<node CREATED="1339682548891" ID="ID_40797737" MODIFIED="1339682746545" TEXT="sigaction can mask off signals we don&apos;t want to catch when we&apos;re handling current signal,after signal handler returns,sigset is reset to previous.">
<icon BUILTIN="full-3"/>
</node>
</node>
</node>
</node>
<node CREATED="1339685022002" FOLDED="true" ID="ID_893451140" MODIFIED="1363229004726" TEXT="suspend signal">
<node CREATED="1339685038435" ID="ID_643815178" MODIFIED="1339685038435" TEXT="#include &lt;signal.h&gt;"/>
<node CREATED="1339685038436" ID="ID_1908452355" MODIFIED="1340372551905" TEXT="int sigsuspend(const sigset_t *sigmask) ; ">
<node CREATED="1339685079531" ID="ID_618887899" MODIFIED="1339685200969" TEXT="both reset the signal mask and put the  process to sleep in a single atomic operation. "/>
<node CREATED="1339685208673" ID="ID_1058539680" MODIFIED="1339685399774">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      if (sigprocmask(SIG_SETMASK,&amp;sigmask,NULL)&lt;0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;perror(&quot;SIG_SETMASK error&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;exit(1);
    </p>
    <p>
      }
    </p>
    <p>
      /*race condition*/
    </p>
    <p>
      pause();
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1339685038438" ID="ID_1116047020" MODIFIED="1339685038438" TEXT="Returns: -1 with errno set to EINTR"/>
</node>
<node CREATED="1339684682355" FOLDED="true" ID="ID_779947799" MODIFIED="1363229006957" TEXT="sigsetjmp siglongjmp">
<node CREATED="1339684747633" ID="ID_82716175" MODIFIED="1339684766318" TEXT="#include &lt;setjmp.h&gt;"/>
<node CREATED="1339684747633" ID="ID_295626279" MODIFIED="1339684747633" TEXT="int sigsetjmp (sigjmp_buf env, int savemask) ;">
<node CREATED="1339684747634" ID="ID_1471947110" MODIFIED="1339684747634" TEXT="Returns: 0 if called directly, nonzero if returning from a call to siglongjmp"/>
</node>
<node CREATED="1339684747635" ID="ID_852778295" MODIFIED="1339684747635" TEXT="void siglongjmp(sigjmp_buf env, int val);"/>
<node CREATED="1339684756120" ID="ID_1050354145" MODIFIED="1339684796103" TEXT="sigsetjmp/siglongjmp vs.setjmp/longjmp">
<node CREATED="1339684798042" ID="ID_215440727" MODIFIED="1339684826617" TEXT="save signal mask and restore signal mask"/>
</node>
</node>
</node>
<node CREATED="1340372827739" FOLDED="true" ID="ID_1514224846" MODIFIED="1366129739594" TEXT="library functions impletemented with signals">
<node CREATED="1339853674973" ID="ID_1432074245" MODIFIED="1358088772066" TEXT="abort">
<node CREATED="1339853871123" ID="ID_860663884" MODIFIED="1339853896088" TEXT="abort generates SIGABRT">
<node CREATED="1339853780787" ID="ID_1229090816" MODIFIED="1339853900132" TEXT="#include &lt;stdlib. h&gt;"/>
<node CREATED="1339853780788" ID="ID_1817966093" MODIFIED="1339853900130" TEXT="void abort (void) ;">
<node CREATED="1339853780789" ID="ID_403378555" MODIFIED="1339853780789" TEXT="This function never returns"/>
</node>
</node>
<node CREATED="1339853902323" ID="ID_862147371" MODIFIED="1339853937243" TEXT="SIGABRT can&apos;t be ignored and blocked">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1339853940517" ID="ID_721897055" MODIFIED="1339854223098" TEXT="if abort causes termination of process,before termination,flush all output streams.">
<icon BUILTIN="full-2"/>
</node>
</node>
<node CREATED="1339853678526" ID="ID_334577527" MODIFIED="1340372929197" TEXT="system">
<node CREATED="1339854338479" ID="ID_736982206" MODIFIED="1339854397012" TEXT="ignore SIGINT and SIGQUIT, block SIGCHLD"/>
</node>
<node CREATED="1340372930264" ID="ID_557662317" MODIFIED="1340372935332" TEXT="sleep">
<node CREATED="1340372994826" ID="ID_424401306" MODIFIED="1340373013458" TEXT="#include &lt;unistd.h&gt;"/>
<node CREATED="1340372994827" ID="ID_1140156468" MODIFIED="1340372994827" TEXT="unsigned int sleep(unsigned int seconds);">
<node CREATED="1340373056441" ID="ID_196597567" MODIFIED="1340373088210" TEXT="1. the amount of wall clock time specified by seconds has elapsed, return 0"/>
<node CREATED="1340373056442" ID="ID_1563862202" MODIFIED="1340373100893" TEXT="2. a signal is caught by the process and the signal handler returns.return unslept time"/>
</node>
</node>
</node>
</node>
<node CREATED="1340373429940" FOLDED="true" ID="ID_13458321" MODIFIED="1363158226857" POSITION="right" TEXT="terminal IO">
<font BOLD="true" NAME="&#x5fae;&#x8f6f;&#x96c5;&#x9ed1;" SIZE="16"/>
<node CREATED="1340373538185" FOLDED="true" ID="ID_27375457" MODIFIED="1340373645570" TEXT="style">
<node CREATED="1340373557746" ID="ID_1799134504" MODIFIED="1340373578580" TEXT="UNIX Version7 style (BSD)"/>
<node CREATED="1340373579051" ID="ID_249501767" MODIFIED="1340373635622" TEXT="System III style (SVR)"/>
<node CREATED="1340373636138" ID="ID_1783306624" MODIFIED="1340373643795" TEXT="posix"/>
</node>
<node CREATED="1340373680767" ID="ID_897719233" MODIFIED="1340373878028" TEXT="two different modes for terminal I/O">
<node CREATED="1340373743575" ID="ID_1936039018" MODIFIED="1341232292749" TEXT="Canonical mode input processing(default).">
<node CREATED="1340373773279" ID="ID_202381886" MODIFIED="1340373862313" TEXT="characters assembled into lines"/>
</node>
<node CREATED="1340373763933" ID="ID_1046987190" MODIFIED="1340373763933" TEXT="Noncanonical mode input processing."/>
</node>
<node CREATED="1340374411235" FOLDED="true" ID="ID_955371768" MODIFIED="1341232549369" TEXT="Version 7 and BSD-style terminal drivers support three different modes ">
<node CREATED="1340374426589" ID="ID_1641693097" MODIFIED="1341232301219" TEXT="cooked mode">
<icon BUILTIN="full-1"/>
<node CREATED="1340374441787" ID="ID_407678431" MODIFIED="1340374522747" TEXT="the input is collected into lines and the special characters are processed"/>
</node>
<node CREATED="1340374465821" FOLDED="true" ID="ID_587876440" MODIFIED="1341232310859" TEXT="raw mode">
<icon BUILTIN="full-2"/>
<node CREATED="1340374485237" ID="ID_526140637" MODIFIED="1340374505099" TEXT="the input is not assembled into lines and there is no processing of special characters&#xa;"/>
</node>
<node CREATED="1340374538573" ID="ID_124262774" MODIFIED="1341232311749" TEXT="cbreak mode">
<icon BUILTIN="full-3"/>
<node CREATED="1340374553159" ID="ID_1282982046" MODIFIED="1340374565102" TEXT="the input is not assembled into lines, but some of the special characters are processed"/>
</node>
</node>
<node CREATED="1341232550278" ID="ID_565332307" MODIFIED="1341232558529" TEXT="terminal device ">
<node CREATED="1341232574987" ID="ID_1348033922" MODIFIED="1341232597510" TEXT="controlled by terminal driver">
<node CREATED="1341232612828" ID="ID_829709604" MODIFIED="1341232619540" TEXT="input queue"/>
<node CREATED="1341232619708" ID="ID_272771684" MODIFIED="1341232628010" TEXT="output queue"/>
</node>
<node CREATED="1341232629458" ID="ID_1033288204" MODIFIED="1341232673540" TEXT="implied link between input queue and output queue if  echo enabled"/>
<node CREATED="1341232676188" ID="ID_790842829" MODIFIED="1341232799870" TEXT="size of input queue (MAX_INPUT) may be finite, most unix system  echo  bell character when input queue fills"/>
<node CREATED="1341232813358" ID="ID_669992464" MODIFIED="1341232888710" TEXT="MAX_CANON is max number of bytes in a canonical  input line"/>
<node CREATED="1341232910798" ID="ID_749253974" MODIFIED="1341232958130" TEXT="when output queue fills, write process goes to sleep"/>
<node CREATED="1341232958528" ID="ID_1656139153" MODIFIED="1341233018570" TEXT="tcflush() flushes  either input queue or output queue"/>
<node CREATED="1341233018988" ID="ID_1257483692" MODIFIED="1341233052170" TEXT="tcsetattr() set either input or output attributes"/>
</node>
<node CREATED="1341233128828" ID="ID_622295823" MODIFIED="1341233154180" TEXT="terminal line discipline"/>
</node>
</node>
</map>
